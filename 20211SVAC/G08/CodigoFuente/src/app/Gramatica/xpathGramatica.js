/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xpathGramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,17],$V2=[1,16],$V3=[1,15],$V4=[1,19],$V5=[1,24],$V6=[1,25],$V7=[1,14],$V8=[1,18],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,29],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[1,37],$Vl=[1,38],$Vm=[1,42],$Vn=[5,15,20,73,96],$Vo=[5,137],$Vp=[1,50],$Vq=[1,49],$Vr=[1,48],$Vs=[1,54],$Vt=[1,47],$Vu=[1,53],$Vv=[1,55],$Vw=[1,56],$Vx=[1,57],$Vy=[5,12,14,15,19,20,30,37,47,49,50,58,60,63,64,70,73,79,86,87,88,89,90,96,103,105,110,111,112,113,115,116,118,127,128,129,130,131,132,133,137,142,143,147,148,151,156,159,160,161,162,163,164,165,166,167,168,169,170,171],$Vz=[2,164],$VA=[1,59],$VB=[1,66],$VC=[1,67],$VD=[5,12,14,15,19,20,30,37,47,49,50,58,60,63,64,70,73,79,86,87,88,89,90,96,103,105,110,111,112,113,115,116,118,127,128,129,130,131,132,133,137,142,143,147,148,149,151,156,159,160,161,162,163,164,165,166,167,168,169,170,171],$VE=[2,148],$VF=[1,73],$VG=[73,96,103,105,112],$VH=[1,77],$VI=[1,80],$VJ=[1,82],$VK=[1,101],$VL=[1,94],$VM=[1,93],$VN=[1,96],$VO=[1,100],$VP=[1,92],$VQ=[1,97],$VR=[1,98],$VS=[1,99],$VT=[1,108],$VU=[1,116],$VV=[1,135],$VW=[1,128],$VX=[1,129],$VY=[1,130],$VZ=[1,131],$V_=[1,132],$V$=[1,133],$V01=[1,121],$V11=[30,73,96,103,105,112],$V21=[5,12,14,15,19,20,30,37,38,47,49,50,58,60,63,64,70,73,79,86,87,88,89,90,96,103,105,110,111,112,113,115,116,118,122,123,124,127,128,129,130,131,132,133,137,142,143,147,148,149,150,151,156,159,160,161,162,163,164,165,166,167,168,169,170,171],$V31=[1,147],$V41=[1,145],$V51=[1,153],$V61=[1,152],$V71=[1,154],$V81=[1,156],$V91=[1,157],$Va1=[1,146],$Vb1=[1,148],$Vc1=[1,149],$Vd1=[1,155],$Ve1=[1,150],$Vf1=[1,151],$Vg1=[14,37,38,47,50,70,116,118,122,123,124,131,132,133,150],$Vh1=[5,12,14,15,19,20,30,37,38,47,50,60,70,73,79,86,87,88,89,90,96,103,105,110,111,112,113,115,116,118,122,123,124,131,132,133,150,156],$Vi1=[2,193],$Vj1=[5,12,14,15,19,20,30,47,60,73,79,86,87,88,89,90,96,103,105,110,111,112,113,115,116,118,156],$Vk1=[73,96,103,105,112,116,118],$Vl1=[1,171],$Vm1=[1,173],$Vn1=[1,177],$Vo1=[1,179],$Vp1=[1,169],$Vq1=[1,175],$Vr1=[1,176],$Vs1=[1,178],$Vt1=[1,180],$Vu1=[1,170],$Vv1=[1,172],$Vw1=[1,174],$Vx1=[1,189],$Vy1=[12,14,19,20,30,47,60,73,79,86,87,88,89,90,96,113,156],$Vz1=[1,192],$VA1=[1,195],$VB1=[1,193],$VC1=[1,194],$VD1=[1,196],$VE1=[1,197],$VF1=[5,12,14,15,19,20,28,30,47,52,57,58,59,60,61,73,79,86,87,88,89,90,96,103,105,110,111,112,113,115,116,118,156],$VG1=[5,12,14,15,19,20,30,37,38,47,60,73,79,86,87,88,89,90,96,103,105,110,111,112,113,115,116,118,122,123,124,156],$VH1=[12,19,20,47,73,79,86,87,88,89,90,96,113,156],$VI1=[2,83],$VJ1=[1,240],$VK1=[49,50],$VL1=[1,256],$VM1=[14,38,47,50,70,116,118,122,131,132,133,150],$VN1=[14,47,50,70,116,118,131,132,133,150],$VO1=[14,30],$VP1=[5,12,14,15,19,20,30,38,47,60,73,79,86,87,88,89,90,96,103,105,110,111,112,113,115,116,118,122,156],$VQ1=[20,49,50],$VR1=[1,277],$VS1=[2,22],$VT1=[1,289],$VU1=[1,293],$VV1=[1,291],$VW1=[1,292],$VX1=[1,295],$VY1=[1,294],$VZ1=[20,28,47,52,57,58,59,61],$V_1=[14,30,59],$V$1=[14,30,36,37,38,59];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"XPath":4,"EOF":5,"XQUERY":6,"SENTENCIA_XQUERY":7,"FLWORExpr":8,"AnnotatedDecl":9,"LlamadoFuncion":10,"FunctionName":11,"lparen":12,"Expr":13,"rparen":14,"declare":15,"VarDecl":16,"FunctionDecl":17,"variable":18,"$":19,"nodename":20,":=":21,"VarValue":22,"ExprSingle":23,"function":24,"EParamList":25,"TypeDeclaration":26,"FunctionBody":27,":":28,"ParamList":29,",":30,"Param":31,"as":32,"SequenceType":33,"ItemType":34,"OccurrenceIndicator":35,"?":36,"*":37,"+":38,"xsString":39,"xsDate":40,"xsDecimal":41,"xsBoolean":42,"EnclosedExpr":43,"semicolon":44,"DirectConstructor":45,"DirElemConstructor":46,"<":47,"DirAttributeList":48,"BARRASIMPLE":49,">":50,"EDirElemContent":51,"</":52,"LDirElemContent":53,"DirElemContent":54,"CommonContent":55,"PredefinedEntityRef":56,"CharRef":57,"DOT":58,"{":59,"}":60,"&":61,"REF":62,"lt":63,"gt":64,"amp":65,"quot":66,"apos":67,"LAtr":68,"Atr":69,"=":70,"STRING_LITERAL":71,"ForClause":72,"for":73,"LForBinding":74,"ForBinding":75,"in":76,"SENTENCIA":77,"IfExpr":78,"entero":79,"to":80,"NativeFuntion":81,"XPARAM":82,"LPathExpresion":83,"PathExpresion":84,"NativeFunctionName":85,"uppercase":86,"lowercase":87,"tostring":88,"tonumber":89,"substring":90,"InitialClause":91,"ELIntermediateClause":92,"ReturnClause":93,"QuantifiedExpr":94,"LetClause":95,"let":96,"LLetBinding":97,"LetBinding":98,"LIntermediateClause":99,"IntermediateClause":100,"WhereClause":101,"OrderByClause":102,"where":103,"LComparisonExpr":104,"order":105,"by":106,"OrderSpecList":107,"OrderSpec":108,"OrderModifier":109,"ascending":110,"descending":111,"return":112,"if":113,"then":114,"else":115,"and":116,"ComparisonExpr":117,"or":118,"ComparisonValue":119,"numberLiteral":120,"XOPERACION":121,"-":122,"mod":123,"div":124,"GeneralComp":125,"ValueComp":126,"eq":127,"ne":128,"le":129,"ge":130,"!=":131,"<=":132,">=":133,"XCOMPARISON":134,"PARAMETRO":135,"LSENTENCIA":136,"|":137,"NODO_NO_PREDICABLE":138,"NODO_PREDICABLE":139,"predicate":140,"NODO":141,"BARRAS":142,"DOBLEDOT":143,"AXIS":144,"ATRIBUTO":145,"FUNCION_NO_OPERABLE":146,"node":147,"text":148,"[":149,"]":150,"arroba":151,"FUNCION_OPERABLE":152,"last":153,"position":154,"OPERACION":155,"DoubleLiteral":156,"NOMBRE_AXIS":157,"PARAMETRO_AXIS":158,"ancestor":159,"ancestor-or-self":160,"attribute":161,"child":162,"descendant":163,"descendant-or-self":164,"following":165,"following-sibling":166,"namespace":167,"parent":168,"preceding":169,"preceding-sibling":170,"self":171,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"lparen",14:"rparen",15:"declare",18:"variable",19:"$",20:"nodename",21:":=",24:"function",28:":",30:",",32:"as",36:"?",37:"*",38:"+",39:"xsString",40:"xsDate",41:"xsDecimal",42:"xsBoolean",44:"semicolon",47:"<",49:"BARRASIMPLE",50:">",52:"</",57:"CharRef",58:"DOT",59:"{",60:"}",61:"&",63:"lt",64:"gt",65:"amp",66:"quot",67:"apos",70:"=",71:"STRING_LITERAL",73:"for",76:"in",79:"entero",80:"to",86:"uppercase",87:"lowercase",88:"tostring",89:"tonumber",90:"substring",96:"let",103:"where",105:"order",106:"by",110:"ascending",111:"descending",112:"return",113:"if",114:"then",115:"else",116:"and",118:"or",122:"-",123:"mod",124:"div",127:"eq",128:"ne",129:"le",130:"ge",131:"!=",132:"<=",133:">=",137:"|",142:"BARRAS",143:"DOBLEDOT",147:"node",148:"text",149:"[",150:"]",151:"arroba",153:"last",154:"position",156:"DoubleLiteral",159:"ancestor",160:"ancestor-or-self",161:"attribute",162:"child",163:"descendant",164:"descendant-or-self",165:"following",166:"following-sibling",167:"namespace",168:"parent",169:"preceding",170:"preceding-sibling",171:"self"},
productions_: [0,[3,2],[3,2],[6,2],[6,1],[7,1],[7,1],[7,1],[10,4],[9,2],[9,2],[16,5],[22,1],[17,7],[11,3],[11,1],[25,1],[25,0],[29,3],[29,1],[31,3],[26,2],[26,0],[33,2],[35,1],[35,1],[35,1],[35,0],[34,1],[34,1],[34,1],[34,1],[27,2],[45,1],[46,5],[46,8],[51,1],[51,0],[53,2],[53,1],[54,1],[54,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[43,3],[56,3],[62,1],[62,1],[62,1],[62,1],[62,1],[48,1],[48,0],[68,2],[68,1],[69,3],[72,2],[74,3],[74,1],[75,4],[75,4],[23,1],[23,1],[23,5],[23,1],[23,1],[23,1],[23,1],[83,3],[83,1],[84,3],[81,4],[85,1],[85,1],[85,1],[85,1],[85,1],[85,1],[8,3],[94,2],[91,1],[91,1],[95,2],[97,3],[97,1],[98,4],[92,1],[92,0],[99,2],[99,1],[100,1],[100,1],[100,1],[101,2],[102,3],[107,3],[107,1],[108,2],[109,1],[109,1],[109,0],[93,2],[78,8],[13,2],[13,3],[13,1],[104,3],[104,3],[104,1],[117,3],[117,4],[82,1],[82,1],[82,1],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[119,1],[119,1],[126,1],[126,1],[126,1],[126,1],[126,1],[126,1],[125,1],[125,1],[125,1],[125,1],[125,1],[125,1],[134,3],[4,1],[136,3],[136,1],[77,2],[77,3],[77,2],[141,1],[141,1],[141,1],[141,1],[141,1],[141,1],[141,1],[139,1],[139,1],[139,1],[139,1],[139,1],[139,1],[138,1],[138,1],[138,1],[146,3],[146,3],[140,3],[140,0],[145,2],[145,2],[152,3],[152,3],[135,1],[135,1],[135,1],[135,1],[135,1],[135,3],[135,1],[135,1],[135,1],[155,3],[155,3],[155,3],[155,3],[155,3],[155,3],[155,3],[155,3],[155,3],[155,3],[155,3],[155,3],[155,3],[155,3],[120,1],[120,1],[144,4],[157,1],[157,1],[157,1],[157,1],[157,1],[157,1],[157,1],[157,1],[157,1],[157,1],[157,1],[157,1],[157,1],[158,1],[158,1],[158,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 salida = []; typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);
          return new Entrada(null,$$[$0-1],0); 
break;
case 2:
return new Entrada($$[$0-1],null,1); 
break;
case 3: case 92: case 107:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 4: case 19: case 73: case 100: case 109:
this.$ = []; this.$.push($$[$0]);
break;
case 5:
this.$ = new SentenciaXquery($$[$0],null,null);
break;
case 6:
this.$ = new SentenciaXquery(null,$$[$0],null);
break;
case 7:
this.$ = new SentenciaXquery(null,null,$$[$0]);
break;
case 8:
this.$ = new LlamadoFuncion($$[$0-1],$$[$0-3]);
break;
case 9:
this.$ = new DeclaracionXquery(TipoDeclaracionXquery.Varible, $$[$0]);
break;
case 10:
this.$ = new DeclaracionXquery(TipoDeclaracionXquery.FuncionDefinida, $$[$0]);
break;
case 11:
this.$ = new VariableXquery('$' + $$[$0-2],$$[$0]);
break;
case 12: case 98:
this.$ = $$[$0]
break;
case 13:
this.$ = new FuncionXquery($$[$0-5],$$[$0-3],$$[$0-1],$$[$0]);
break;
case 14:
this.$ = new FunctionName($$[$0],$$[$0-2]);
break;
case 15:
this.$ = new FunctionName($$[$0], '');
break;
case 16: case 21: case 44: case 60: case 86: case 90: case 97: case 105: case 115: case 124: case 125: case 151: case 154: case 158: case 165: case 166: case 169: case 170: case 195: case 196: case 197: case 198: case 199: case 200: case 201: case 202: case 203: case 204: case 205: case 206: case 207: case 209:
this.$ = $$[$0];
break;
case 17: case 22: case 91: case 164:
this.$ = null;
break;
case 18: case 72: case 108:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 20:
this.$ = new ParametroXquery('$' + $$[$0-1], $$[$0]);
break;
case 23:
this.$ = new TypeDeclaration($$[$0-1],$$[$0]);
break;
case 24:
this.$ = '?';
break;
case 25:
this.$ = '*';
break;
case 26:
this.$ = '+';
break;
case 27:
this.$ = '';
break;
case 28:
this.$ = ParamType.xsString;
break;
case 29:
this.$ = ParamType.xsDate;
break;
case 30:
this.$ = ParamType.xsDecimal;
break;
case 31:
this.$ = ParamType.xsBoolean;
break;
case 32: case 48: case 163:
this.$ = $$[$0-1];
break;
case 61: case 87:
$$[$0-2].Variables.push($$[$0]); this.$ = $$[$0-2];
break;
case 62:
this.$ = new FLWORBinding(FLWORTipo.For,$$[$0]); 
break;
case 63:
this.$ = new FLWORVariables('$' + $$[$0-2], $$[$0], null);
break;
case 64: case 89:
this.$ = new FLWORVariables('$' + $$[$0-2], null, $$[$0]);
break;
case 65:
this.$ = new SingleExpresion (SingleExpresionType.FLWORExpr, $$[$0],0,0);
break;
case 66:
this.$ = new SingleExpresion (SingleExpresionType.IfExpr, $$[$0],0,0);
break;
case 67:
this.$ = new SingleExpresion (SingleExpresionType.Contador, null,Number($$[$0-3]),Number($$[$0-1]));
break;
case 68:
this.$ = new SingleExpresion (SingleExpresionType.HtmlSequence, $$[$0],0,0);
break;
case 69:
this.$ = new SingleExpresion (SingleExpresionType.FuncionDefinida, $$[$0],0,0);
break;
case 70:
this.$ = new SingleExpresion (SingleExpresionType.XPARAM, $$[$0],0,0);
break;
case 71:
this.$ = new SingleExpresion (SingleExpresionType.Path, $$[$0],0,0);
break;
case 74:
this.$ = new PathExpresion('$' + $$[$0-1],$$[$0]);
break;
case 75:
this.$ = new NativeFunctionExpresion($$[$0-3],$$[$0-1]);
break;
case 76: case 77: case 78: case 79: case 80:
this.$ = new Funcion(TipoFuncion.Nativa,$$[$0]);
break;
case 81:
this.$ = new Funcion(TipoFuncion.Definida,$$[$0]);
break;
case 82:
this.$ = new FLWORExpr($$[$0-2],$$[$0-1],$$[$0]);
break;
case 83:
this.$ = '$'+$$[$0];
break;
case 84: case 85:
this.$=$$[$0];
break;
case 88:
this.$ = new FLWORBinding(FLWORTipo.Let, $$[$0]);
break;
case 93:
this.$ = []; this.$.push($$[$0]); 
break;
case 94:
this.$ = new IntermediteClause(TipoClausulaIntermedia.InitialClause, $$[$0]);
break;
case 95:
this.$ = new IntermediteClause(TipoClausulaIntermedia.WhereClause, $$[$0]);
break;
case 96:
this.$ = new IntermediteClause(TipoClausulaIntermedia.OrderByClause, $$[$0]);
break;
case 99:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 101:
this.$ = new OrderSpec($$[$0-1],$$[$0]);
break;
case 102:
this.$ = OrderModifierType.Ascendente
break;
case 103:
this.$ = OrderModifierType.Descendente
break;
case 104:
this.$ = OrderModifierType.Ninguno
break;
case 106:
this.$ = new IfExpresion($$[$0-5],$$[$0-2],$$[$0]);
break;
case 110:
this.$ = new parametroXpath($$[$0-2],$$[$0],null,TipoOperador.And);
break;
case 111:
this.$ = new parametroXpath($$[$0-2],$$[$0],null,TipoOperador.Or);
break;
case 112:
this.$ = new parametroXpath(null,null,$$[$0],TipoOperador.None);
break;
case 113:
this.$ = new OperacionXpath(new ParametroOperacionXpath(null,$$[$0-2],TipoParametro.Variable),$$[$0].Objeto,$$[$0-1],null);
break;
case 114:
this.$ = new OperacionXpath(new ParametroOperacionXpath(null,$$[$0-3],TipoParametro.Variable),$$[$0].Objeto,$$[$0-1],$$[$0-2]);
break;
case 116:
this.$ = new ParametroOperacionXpath(null,$$[$0],TipoParametro.Variable);
break;
case 117: case 171:
this.$ = new ParametroOperacionXpath($$[$0],'',TipoParametro.Operacion);
break;
case 118: case 178:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.Mas);
break;
case 119: case 179:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.Menos);
break;
case 120: case 180:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.Por);
break;
case 121: case 181:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.Mod);
break;
case 122: case 182:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.Div);
break;
case 123: case 191:
this.$ = $$[$0-1].Operacion;
break;
case 126: case 132:
this.$ = TipoOperador.Igual;
break;
case 127: case 133:
this.$ = TipoOperador.Diferente;
break;
case 128: case 134:
this.$ = TipoOperador.Menor;
break;
case 129: case 135:
this.$ = TipoOperador.MenorIgual;
break;
case 130: case 136:
this.$ = TipoOperador.Mayor;
break;
case 131: case 137:
this.$ = TipoOperador.MayorIgual;
break;
case 139:
this.$ = salida; salida = []; return new Entrada(null,this.$,0);
break;
case 140:
 salida.push($$[$0]);
break;
case 141:
  salida.push($$[$0]);
break;
case 142:
this.$ = new sentenciaXpath($$[$0],null,$$[$0-1]);
break;
case 143:
this.$ = new sentenciaXpath($$[$0-1],$$[$0],$$[$0-2]);
break;
case 144:
      
                                if($$[$0-1] != TipoNodo.ID && $$[$0] != null) {console.log("Error toquen no debe llever predicado");}
                                else{
                                        this.$ = new sentenciaXpath($$[$0-1],$$[$0],null);
                                }
                        
break;
case 145: case 159:
this.$ = new NodoXpath(TipoNodo.Descendiente,$$[$0],null);
break;
case 146: case 160:
this.$ = new NodoXpath(TipoNodo.Raiz,$$[$0],null);
break;
case 147: case 152: case 210:
this.$ = new NodoXpath(TipoNodo.Asterisco,$$[$0],null);
break;
case 148: case 153: case 208:
this.$ = new NodoXpath(TipoNodo.ID,$$[$0],null);
break;
case 149:
this.$ = new NodoXpath(TipoNodo.NodoPadre,$$[$0],null); 
break;
case 150: case 157:
this.$ = new NodoXpath(TipoNodo.AutoReferencia,$$[$0],null);
break;
case 155:
this.$ = new NodoXpath(TipoNodo.Atributo,$$[$0],null);
break;
case 156:
this.$ = new NodoXpath(TipoNodo.NodoPadre,$$[$0],null);
break;
case 161:
this.$ = new NodoXpath(TipoNodo.Funcion_Node,$$[$0-2],null);
break;
case 162:
this.$ = new NodoXpath(TipoNodo.Funcion_Text,$$[$0-2],null);
break;
case 167:
this.$ = new ParametroOperacionXpath(null,$$[$0-2],TipoParametro.Funtion_Last); console.log($$[$0-2]);
break;
case 168:
this.$ = new ParametroOperacionXpath(null,$$[$0-2],TipoParametro.Funtion_Position);
break;
case 172:
this.$ = new ParametroOperacionXpath(null,$$[$0],TipoParametro.DosPuntos);
break;
case 173:
this.$ = new ParametroOperacionXpath(null,$$[$0],TipoParametro.Punto);
break;
case 174:
this.$ = new ParametroOperacionXpath(null,$$[$0-2] + '@' + $$[$0],TipoParametro.Nodo);
break;
case 175:
this.$ = new ParametroOperacionXpath(null,$$[$0],TipoParametro.Atributo);
break;
case 176:
this.$ = new ParametroOperacionXpath(null,$$[$0],TipoParametro.Cadena);
break;
case 177:
this.$ = new ParametroOperacionXpath(null,$$[$0],TipoParametro.Nodo);
break;
case 183:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.MenorIgual);
break;
case 184:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.MayorIgual);
break;
case 185:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.Mayor);
break;
case 186:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.Menor);
break;
case 187:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.Igual);
break;
case 188:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.Diferente);
break;
case 189:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.And);
break;
case 190:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.Or);
break;
case 192:
this.$ = new ParametroOperacionXpath(null,$$[$0],TipoParametro.Decimal);
break;
case 193:
this.$ = new ParametroOperacionXpath(null,$$[$0],TipoParametro.Entero);
break;
case 194:
this.$ = new NodoXpath(TipoNodo.Axis,$$[$0-3],$$[$0]); 
break;
}
},
table: [{3:1,4:2,6:3,7:5,8:7,9:8,10:9,11:13,15:$V0,20:$V1,37:$V2,49:$V3,58:$V4,72:21,73:$V5,77:6,91:11,95:22,96:$V6,136:4,141:10,142:$V7,143:$V8,144:20,157:23,159:$V9,160:$Va,161:$Vb,162:$Vc,163:$Vd,164:$Ve,165:$Vf,166:$Vg,167:$Vh,168:$Vi,169:$Vj,170:$Vk,171:$Vl},{1:[3]},{5:[1,39]},{5:[1,40],7:41,8:7,9:8,10:9,11:13,15:$V0,20:$Vm,72:21,73:$V5,91:11,95:22,96:$V6},{5:[2,139],137:[1,43]},o($Vn,[2,4]),o($Vo,[2,141],{157:23,138:44,139:45,146:46,144:51,145:52,20:$Vp,37:$Vq,49:$Vr,58:$Vs,142:$Vt,143:$Vu,147:$Vv,148:$Vw,151:$Vx,159:$V9,160:$Va,161:$Vb,162:$Vc,163:$Vd,164:$Ve,165:$Vf,166:$Vg,167:$Vh,168:$Vi,169:$Vj,170:$Vk,171:$Vl}),o($Vn,[2,5]),o($Vn,[2,6]),o($Vn,[2,7]),o($Vy,$Vz,{140:58,149:$VA}),{72:21,73:$V5,91:63,92:60,95:22,96:$V6,99:61,100:62,101:64,102:65,103:$VB,105:$VC,112:[2,91]},{16:68,17:69,18:[1,70],24:[1,71]},{12:[1,72]},o($VD,[2,145]),o($VD,[2,146]),o($VD,[2,147]),o([5,12,20,30,37,49,58,73,96,103,105,112,137,142,143,147,148,149,151,159,160,161,162,163,164,165,166,167,168,169,170,171],$VE,{28:$VF}),o($VD,[2,149]),o($VD,[2,150]),o($VD,[2,151]),o($VG,[2,84]),o($VG,[2,85]),{28:[1,74]},{19:$VH,74:75,75:76},{19:$VI,97:78,98:79},{28:[2,195]},{28:[2,196]},{28:[2,197]},{28:[2,198]},{28:[2,199]},{28:[2,200]},{28:[2,201]},{28:[2,202]},{28:[2,203]},{28:[2,204]},{28:[2,205]},{28:[2,206]},{28:[2,207]},{1:[2,1]},{1:[2,2]},o($Vn,[2,3]),{12:[2,15],28:$VF},{20:$VJ,37:$V2,49:$V3,58:$V4,77:81,141:10,142:$V7,143:$V8,144:20,157:23,159:$V9,160:$Va,161:$Vb,162:$Vc,163:$Vd,164:$Ve,165:$Vf,166:$Vg,167:$Vh,168:$Vi,169:$Vj,170:$Vk,171:$Vl},o($Vy,[2,142]),o($Vy,$Vz,{140:83,149:$VA}),o($Vy,[2,158]),o($Vy,[2,159]),o($Vy,[2,160]),o($VD,[2,152]),o($VD,[2,153]),o($VD,[2,154]),o($VD,[2,155]),o($VD,[2,156]),o($VD,[2,157]),{12:[1,84]},{12:[1,85]},{20:[1,86],37:[1,87]},o($Vy,[2,144]),{12:$VK,20:$VL,58:$VM,71:$VN,79:$VO,120:90,135:88,143:$VP,145:95,151:$Vx,152:89,153:$VQ,154:$VR,155:91,156:$VS},{93:102,112:[1,103]},{72:21,73:$V5,91:63,95:22,96:$V6,100:104,101:64,102:65,103:$VB,105:$VC,112:[2,90]},o($VG,[2,93]),o($VG,[2,94]),o($VG,[2,95]),o($VG,[2,96]),{19:$VT,94:107,104:105,117:106},{106:[1,109]},o($Vn,[2,9]),o($Vn,[2,10]),{19:[1,110]},{11:111,20:$Vm},{8:114,11:134,12:$VU,13:112,19:$VV,20:$Vm,23:113,45:117,46:122,47:$VW,72:21,73:$V5,78:115,79:$VO,81:118,82:119,83:120,84:127,85:123,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:11,94:125,95:22,96:$V6,113:$V01,120:124,121:126,156:$VS},{20:[1,136]},{28:[1,137]},o($VG,[2,60],{30:[1,138]}),o($V11,[2,62]),{20:[1,139]},o($VG,[2,86],{30:[1,140]}),o($V11,[2,88]),{20:[1,141]},o($Vo,[2,140],{157:23,138:44,139:45,146:46,144:51,145:52,20:$Vp,37:$Vq,49:$Vr,58:$Vs,142:$Vt,143:$Vu,147:$Vv,148:$Vw,151:$Vx,159:$V9,160:$Va,161:$Vb,162:$Vc,163:$Vd,164:$Ve,165:$Vf,166:$Vg,167:$Vh,168:$Vi,169:$Vj,170:$Vk,171:$Vl}),o($VD,$VE),o($Vy,[2,143]),{14:[1,142]},{14:[1,143]},o($V21,[2,165]),o($V21,[2,166]),{37:$V31,38:$V41,47:$V51,50:$V61,70:$V71,116:$V81,118:$V91,122:$Va1,123:$Vb1,124:$Vc1,131:$Vd1,132:$Ve1,133:$Vf1,150:[1,144]},o($Vg1,[2,169]),o($Vg1,[2,170]),o($Vg1,[2,171]),o($Vg1,[2,172]),o($Vg1,[2,173]),o($Vg1,[2,177],{49:[1,158]}),o($Vg1,[2,175]),o($Vg1,[2,176]),{12:[1,159]},{12:[1,160]},o($Vh1,[2,192]),o($Vh1,$Vi1),{12:$VK,20:$VL,58:$VM,71:$VN,79:$VO,120:90,135:161,143:$VP,145:95,151:$Vx,152:89,153:$VQ,154:$VR,155:91,156:$VS},o($Vj1,[2,82]),{8:114,11:134,12:$VU,19:$VV,20:$Vm,23:162,45:117,46:122,47:$VW,72:21,73:$V5,78:115,79:$VO,81:118,82:119,83:120,84:127,85:123,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:11,94:125,95:22,96:$V6,113:$V01,120:124,121:126,156:$VS},o($VG,[2,92]),o($VG,[2,97],{116:[1,163],118:[1,164]}),o($Vk1,[2,112]),{20:$VJ,37:$V2,47:$Vl1,49:$V3,50:$Vm1,58:$V4,63:$Vn1,64:$Vo1,70:$Vp1,77:166,119:165,125:167,126:168,127:$Vq1,128:$Vr1,129:$Vs1,130:$Vt1,131:$Vu1,132:$Vv1,133:$Vw1,141:10,142:$V7,143:$V8,144:20,157:23,159:$V9,160:$Va,161:$Vb,162:$Vc,163:$Vd,164:$Ve,165:$Vf,166:$Vg,167:$Vh,168:$Vi,169:$Vj,170:$Vk,171:$Vl},{20:[1,181]},{8:114,11:134,12:$VU,19:$VV,20:$Vm,23:184,45:117,46:122,47:$VW,72:21,73:$V5,78:115,79:$VO,81:118,82:119,83:120,84:127,85:123,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:11,94:125,95:22,96:$V6,107:182,108:183,113:$V01,120:124,121:126,156:$VS},{20:[1,185]},{12:[1,186]},{8:114,11:134,12:$VU,14:[1,187],19:$VV,20:$Vm,23:188,30:$Vx1,45:117,46:122,47:$VW,72:21,73:$V5,78:115,79:$VO,81:118,82:119,83:120,84:127,85:123,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:11,94:125,95:22,96:$V6,113:$V01,120:124,121:126,156:$VS},o($Vy1,[2,109]),o($Vj1,[2,65]),o($Vj1,[2,66]),{12:$Vz1,19:$VT,79:[1,190],82:191,94:125,120:124,121:126,156:$VS},o($Vj1,[2,68]),o($Vj1,[2,69]),o($Vj1,[2,70],{37:$VA1,38:$VB1,122:$VC1,123:$VD1,124:$VE1}),o([5,12,14,15,19,20,47,60,73,79,86,87,88,89,90,96,103,105,110,111,112,113,115,116,118,156],[2,71],{30:[1,198]}),{12:[1,199]},o($VF1,[2,33]),{12:[1,200]},o($VG1,[2,115]),o($VG1,[2,116]),o($VG1,[2,117]),o($Vj1,[2,73]),{20:[1,201]},{12:[2,76]},{12:[2,77]},{12:[2,78]},{12:[2,79]},{12:[2,80]},{12:[2,81]},{20:[1,202]},{12:[2,14]},{20:[1,204],37:[1,206],146:205,147:$Vv,148:$Vw,158:203},{19:$VH,75:207},{76:[1,208]},{19:$VI,98:209},{21:[1,210]},o($VD,[2,161]),o($VD,[2,162]),o($Vy,[2,163]),{12:$VK,20:$VL,58:$VM,71:$VN,79:$VO,120:90,135:211,143:$VP,145:95,151:$Vx,152:89,153:$VQ,154:$VR,155:91,156:$VS},{12:$VK,20:$VL,58:$VM,71:$VN,79:$VO,120:90,135:212,143:$VP,145:95,151:$Vx,152:89,153:$VQ,154:$VR,155:91,156:$VS},{12:$VK,20:$VL,58:$VM,71:$VN,79:$VO,120:90,135:213,143:$VP,145:95,151:$Vx,152:89,153:$VQ,154:$VR,155:91,156:$VS},{12:$VK,20:$VL,58:$VM,71:$VN,79:$VO,120:90,135:214,143:$VP,145:95,151:$Vx,152:89,153:$VQ,154:$VR,155:91,156:$VS},{12:$VK,20:$VL,58:$VM,71:$VN,79:$VO,120:90,135:215,143:$VP,145:95,151:$Vx,152:89,153:$VQ,154:$VR,155:91,156:$VS},{12:$VK,20:$VL,58:$VM,71:$VN,79:$VO,120:90,135:216,143:$VP,145:95,151:$Vx,152:89,153:$VQ,154:$VR,155:91,156:$VS},{12:$VK,20:$VL,58:$VM,71:$VN,79:$VO,120:90,135:217,143:$VP,145:95,151:$Vx,152:89,153:$VQ,154:$VR,155:91,156:$VS},{12:$VK,20:$VL,58:$VM,71:$VN,79:$VO,120:90,135:218,143:$VP,145:95,151:$Vx,152:89,153:$VQ,154:$VR,155:91,156:$VS},{12:$VK,20:$VL,58:$VM,71:$VN,79:$VO,120:90,135:219,143:$VP,145:95,151:$Vx,152:89,153:$VQ,154:$VR,155:91,156:$VS},{12:$VK,20:$VL,58:$VM,71:$VN,79:$VO,120:90,135:220,143:$VP,145:95,151:$Vx,152:89,153:$VQ,154:$VR,155:91,156:$VS},{12:$VK,20:$VL,58:$VM,71:$VN,79:$VO,120:90,135:221,143:$VP,145:95,151:$Vx,152:89,153:$VQ,154:$VR,155:91,156:$VS},{12:$VK,20:$VL,58:$VM,71:$VN,79:$VO,120:90,135:222,143:$VP,145:95,151:$Vx,152:89,153:$VQ,154:$VR,155:91,156:$VS},{12:$VK,20:$VL,58:$VM,71:$VN,79:$VO,120:90,135:223,143:$VP,145:95,151:$Vx,152:89,153:$VQ,154:$VR,155:91,156:$VS},{145:224,151:$Vx},{14:[1,225]},{14:[1,226]},{14:[1,227],37:$V31,38:$V41,47:$V51,50:$V61,70:$V71,116:$V81,118:$V91,122:$Va1,123:$Vb1,124:$Vc1,131:$Vd1,132:$Ve1,133:$Vf1},o($Vj1,[2,105]),{19:$VT,94:107,117:228},{19:$VT,94:107,117:229},{8:114,11:134,12:$VU,19:$VV,20:$Vm,23:230,45:117,46:122,47:$VW,72:21,73:$V5,78:115,79:$VO,81:118,82:119,83:120,84:127,85:123,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:11,94:125,95:22,96:$V6,113:$V01,120:124,121:126,156:$VS},{20:$Vp,37:$Vq,47:$Vl1,49:$Vr,50:$Vm1,58:$Vs,63:$Vn1,64:$Vo1,70:$Vp1,119:231,125:167,126:168,127:$Vq1,128:$Vr1,129:$Vs1,130:$Vt1,131:$Vu1,132:$Vv1,133:$Vw1,138:44,139:45,142:$Vt,143:$Vu,144:51,145:52,146:46,147:$Vv,148:$Vw,151:$Vx,157:23,159:$V9,160:$Va,161:$Vb,162:$Vc,163:$Vd,164:$Ve,165:$Vf,166:$Vg,167:$Vh,168:$Vi,169:$Vj,170:$Vk,171:$Vl},o($VH1,[2,124]),o($VH1,[2,125]),o($VH1,[2,132]),o($VH1,[2,133]),o($VH1,[2,134]),o($VH1,[2,135]),o($VH1,[2,136]),o($VH1,[2,137]),o($VH1,[2,126]),o($VH1,[2,127]),o($VH1,[2,128]),o($VH1,[2,129]),o($VH1,[2,130]),o($VH1,[2,131]),o([5,12,14,15,19,20,30,37,38,47,49,50,58,60,63,64,70,73,79,86,87,88,89,90,96,103,105,110,111,112,113,115,116,118,122,123,124,127,128,129,130,131,132,133,142,143,156,159,160,161,162,163,164,165,166,167,168,169,170,171],$VI1),o($VG,[2,98],{30:[1,232]}),o($V11,[2,100]),o($V11,[2,104],{109:233,110:[1,234],111:[1,235]}),{21:[1,236]},{14:[2,17],19:$VJ1,25:237,29:238,31:239},o($Vn,[2,8]),o($Vy1,[2,107]),{8:114,11:134,12:$VU,19:$VV,20:$Vm,23:241,45:117,46:122,47:$VW,72:21,73:$V5,78:115,79:$VO,81:118,82:119,83:120,84:127,85:123,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:11,94:125,95:22,96:$V6,113:$V01,120:124,121:126,156:$VS},o([14,37,38,122,123,124],$Vi1,{80:[1,242]}),{14:[1,243],37:$VA1,38:$VB1,122:$VC1,123:$VD1,124:$VE1},{12:$Vz1,19:$VT,79:$VO,82:191,94:125,120:124,121:126,156:$VS},{12:$Vz1,19:$VT,79:$VO,82:244,94:125,120:124,121:126,156:$VS},{12:$Vz1,19:$VT,79:$VO,82:245,94:125,120:124,121:126,156:$VS},{12:$Vz1,19:$VT,79:$VO,82:246,94:125,120:124,121:126,156:$VS},{12:$Vz1,19:$VT,79:$VO,82:247,94:125,120:124,121:126,156:$VS},{12:$Vz1,19:$VT,79:$VO,82:248,94:125,120:124,121:126,156:$VS},{19:[1,250],84:249},{8:114,11:134,12:$VU,13:251,19:$VV,20:$Vm,23:113,45:117,46:122,47:$VW,72:21,73:$V5,78:115,79:$VO,81:118,82:119,83:120,84:127,85:123,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:11,94:125,95:22,96:$V6,113:$V01,120:124,121:126,156:$VS},{8:114,11:134,12:$VU,19:$VV,20:$Vm,23:252,45:117,46:122,47:$VW,72:21,73:$V5,78:115,79:$VO,81:118,82:119,83:120,84:127,85:123,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:11,94:125,95:22,96:$V6,113:$V01,120:124,121:126,156:$VS},o($VK1,[2,56],{48:253,68:254,69:255,20:$VL1}),o([5,12,14,15,19,30,38,47,60,73,79,86,87,88,89,90,96,103,105,110,111,112,113,115,116,118,122,123,124,156],$VI1,{141:10,144:20,157:23,77:257,20:$VJ,37:$V2,49:$V3,58:$V4,142:$V7,143:$V8,159:$V9,160:$Va,161:$Vb,162:$Vc,163:$Vd,164:$Ve,165:$Vf,166:$Vg,167:$Vh,168:$Vi,169:$Vj,170:$Vk,171:$Vl}),o($VD,[2,194]),o($VD,[2,208]),o($VD,[2,209]),o($VD,[2,210]),o($V11,[2,61]),{8:114,11:134,12:$VU,19:$VV,20:$V1,23:259,37:$V2,45:117,46:122,47:$VW,49:$V3,58:$V4,72:21,73:$V5,77:258,78:115,79:$VO,81:118,82:119,83:120,84:127,85:123,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:11,94:125,95:22,96:$V6,113:$V01,120:124,121:126,141:10,142:$V7,143:$V8,144:20,156:$VS,157:23,159:$V9,160:$Va,161:$Vb,162:$Vc,163:$Vd,164:$Ve,165:$Vf,166:$Vg,167:$Vh,168:$Vi,169:$Vj,170:$Vk,171:$Vl},o($V11,[2,87]),{8:114,11:134,12:$VU,19:$VV,20:$Vm,23:260,45:117,46:122,47:$VW,72:21,73:$V5,78:115,79:$VO,81:118,82:119,83:120,84:127,85:123,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:11,94:125,95:22,96:$V6,113:$V01,120:124,121:126,156:$VS},o($VM1,[2,178],{37:$V31,123:$Vb1,124:$Vc1}),o($VM1,[2,179],{37:$V31,123:$Vb1,124:$Vc1}),o($Vg1,[2,180]),o($Vg1,[2,181]),o($Vg1,[2,182]),o($VN1,[2,183],{37:$V31,38:$V41,122:$Va1,123:$Vb1,124:$Vc1}),o($VN1,[2,184],{37:$V31,38:$V41,122:$Va1,123:$Vb1,124:$Vc1}),o($VN1,[2,185],{37:$V31,38:$V41,122:$Va1,123:$Vb1,124:$Vc1}),o($VN1,[2,186],{37:$V31,38:$V41,122:$Va1,123:$Vb1,124:$Vc1}),o($VN1,[2,187],{37:$V31,38:$V41,122:$Va1,123:$Vb1,124:$Vc1}),o($VN1,[2,188],{37:$V31,38:$V41,122:$Va1,123:$Vb1,124:$Vc1}),o([14,116,118,150],[2,189],{37:$V31,38:$V41,47:$V51,50:$V61,70:$V71,122:$Va1,123:$Vb1,124:$Vc1,131:$Vd1,132:$Ve1,133:$Vf1}),o([14,118,150],[2,190],{37:$V31,38:$V41,47:$V51,50:$V61,70:$V71,116:$V81,122:$Va1,123:$Vb1,124:$Vc1,131:$Vd1,132:$Ve1,133:$Vf1}),o($Vg1,[2,174]),o($Vg1,[2,167]),o($Vg1,[2,168]),o($Vg1,[2,191]),o($Vk1,[2,110]),o($Vk1,[2,111]),o($Vk1,[2,113]),{8:114,11:134,12:$VU,19:$VV,20:$Vm,23:261,45:117,46:122,47:$VW,72:21,73:$V5,78:115,79:$VO,81:118,82:119,83:120,84:127,85:123,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:11,94:125,95:22,96:$V6,113:$V01,120:124,121:126,156:$VS},{8:114,11:134,12:$VU,19:$VV,20:$Vm,23:184,45:117,46:122,47:$VW,72:21,73:$V5,78:115,79:$VO,81:118,82:119,83:120,84:127,85:123,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:11,94:125,95:22,96:$V6,108:262,113:$V01,120:124,121:126,156:$VS},o($V11,[2,101]),o($V11,[2,102]),o($V11,[2,103]),{8:114,11:134,12:$VU,19:$VV,20:$Vm,22:263,23:264,45:117,46:122,47:$VW,72:21,73:$V5,78:115,79:$VO,81:118,82:119,83:120,84:127,85:123,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:11,94:125,95:22,96:$V6,113:$V01,120:124,121:126,156:$VS},{14:[1,265]},{14:[2,16],30:[1,266]},o($VO1,[2,19]),{20:[1,267]},o($Vy1,[2,108]),{79:[1,268]},o($VG1,[2,123]),o($VP1,[2,118],{37:$VA1,123:$VD1,124:$VE1}),o($VP1,[2,119],{37:$VA1,123:$VD1,124:$VE1}),o($VG1,[2,120]),o($VG1,[2,121]),o($VG1,[2,122]),o($Vj1,[2,72]),{20:[1,269]},{8:114,11:134,12:$VU,14:[1,270],19:$VV,20:$Vm,23:188,30:$Vx1,45:117,46:122,47:$VW,72:21,73:$V5,78:115,79:$VO,81:118,82:119,83:120,84:127,85:123,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:11,94:125,95:22,96:$V6,113:$V01,120:124,121:126,156:$VS},{14:[1,271]},{49:[1,272],50:[1,273]},o($VK1,[2,55],{69:274,20:$VL1}),o($VQ1,[2,58]),{70:[1,275]},o([5,12,14,15,19,30,47,60,73,79,86,87,88,89,90,96,103,105,110,111,112,113,115,116,118,156],[2,74],{157:23,138:44,139:45,146:46,144:51,145:52,20:$Vp,37:$Vq,49:$Vr,58:$Vs,142:$Vt,143:$Vu,147:$Vv,148:$Vw,151:$Vx,159:$V9,160:$Va,161:$Vb,162:$Vc,163:$Vd,164:$Ve,165:$Vf,166:$Vg,167:$Vh,168:$Vi,169:$Vj,170:$Vk,171:$Vl}),o($V11,[2,63],{157:23,138:44,139:45,146:46,144:51,145:52,20:$Vp,37:$Vq,49:$Vr,58:$Vs,142:$Vt,143:$Vu,147:$Vv,148:$Vw,151:$Vx,159:$V9,160:$Va,161:$Vb,162:$Vc,163:$Vd,164:$Ve,165:$Vf,166:$Vg,167:$Vh,168:$Vi,169:$Vj,170:$Vk,171:$Vl}),o($V11,[2,64]),o($V11,[2,89]),o($Vk1,[2,114]),o($V11,[2,99]),o($Vn,[2,11]),o($Vn,[2,12]),{26:276,32:$VR1,59:$VS1},{19:$VJ1,31:278},o($VO1,$VS1,{26:279,32:$VR1}),{14:[1,280]},{20:$VJ,37:$V2,49:$V3,58:$V4,77:257,141:10,142:$V7,143:$V8,144:20,157:23,159:$V9,160:$Va,161:$Vb,162:$Vc,163:$Vd,164:$Ve,165:$Vf,166:$Vg,167:$Vh,168:$Vi,169:$Vj,170:$Vk,171:$Vl},{114:[1,281]},o($Vj1,[2,75]),{50:[1,282]},{20:$VT1,28:$VU1,43:290,45:286,46:122,47:$VW,51:283,52:[2,37],53:284,54:285,55:287,56:288,57:$VV1,58:$VW1,59:$VX1,61:$VY1},o($VQ1,[2,57]),{71:[1,296]},{27:297,43:298,59:$VX1},{33:299,34:300,39:[1,301],40:[1,302],41:[1,303],42:[1,304]},o($VO1,[2,18]),o($VO1,[2,20]),o($Vj1,[2,67]),{8:114,11:134,12:$VU,19:$VV,20:$Vm,23:305,45:117,46:122,47:$VW,72:21,73:$V5,78:115,79:$VO,81:118,82:119,83:120,84:127,85:123,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:11,94:125,95:22,96:$V6,113:$V01,120:124,121:126,156:$VS},o($VF1,[2,34]),{52:[1,306]},{20:$VT1,28:$VU1,43:290,45:286,46:122,47:$VW,52:[2,36],54:307,55:287,56:288,57:$VV1,58:$VW1,59:$VX1,61:$VY1},o($VZ1,[2,39]),o($VZ1,[2,40]),o($VZ1,[2,41]),o($VZ1,[2,42]),o($VZ1,[2,43]),o($VZ1,[2,44]),o($VZ1,[2,45]),o($VZ1,[2,46]),o($VZ1,[2,47]),{62:308,63:[1,309],64:[1,310],65:[1,311],66:[1,312],67:[1,313]},{8:114,11:134,12:$VU,13:314,19:$VV,20:$Vm,23:113,45:117,46:122,47:$VW,72:21,73:$V5,78:115,79:$VO,81:118,82:119,83:120,84:127,85:123,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:11,94:125,95:22,96:$V6,113:$V01,120:124,121:126,156:$VS},o($VQ1,[2,59]),o($Vn,[2,13]),{44:[1,315]},o($V_1,[2,21]),o($V_1,[2,27],{35:316,36:[1,317],37:[1,318],38:[1,319]}),o($V$1,[2,28]),o($V$1,[2,29]),o($V$1,[2,30]),o($V$1,[2,31]),{115:[1,320]},{20:[1,321]},o($VZ1,[2,38]),{44:[1,322]},{44:[2,50]},{44:[2,51]},{44:[2,52]},{44:[2,53]},{44:[2,54]},{8:114,11:134,12:$VU,19:$VV,20:$Vm,23:188,30:$Vx1,45:117,46:122,47:$VW,60:[1,323],72:21,73:$V5,78:115,79:$VO,81:118,82:119,83:120,84:127,85:123,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:11,94:125,95:22,96:$V6,113:$V01,120:124,121:126,156:$VS},o($Vn,[2,32]),o($V_1,[2,23]),o($V_1,[2,24]),o($V_1,[2,25]),o($V_1,[2,26]),{8:114,11:134,12:$VU,19:$VV,20:$Vm,23:324,45:117,46:122,47:$VW,72:21,73:$V5,78:115,79:$VO,81:118,82:119,83:120,84:127,85:123,86:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:11,94:125,95:22,96:$V6,113:$V01,120:124,121:126,156:$VS},{50:[1,325]},o($VZ1,[2,49]),o([20,28,44,47,52,57,58,59,61],[2,48]),o($Vj1,[2,106]),o($VF1,[2,35])],
defaultActions: {26:[2,195],27:[2,196],28:[2,197],29:[2,198],30:[2,199],31:[2,200],32:[2,201],33:[2,202],34:[2,203],35:[2,204],36:[2,205],37:[2,206],38:[2,207],39:[2,1],40:[2,2],129:[2,76],130:[2,77],131:[2,78],132:[2,79],133:[2,80],134:[2,81],136:[2,14],309:[2,50],310:[2,51],311:[2,52],312:[2,53],313:[2,54]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

        const {sentenciaXpath} = require("../Estructuras/sentenciaXpath.js");
        const {parametroXpath} = require("../Estructuras/parametroXpath.js");
        const {ParametroOperacionXpath} = require("../Estructuras/ParametroOperacionXpath.js");
        const {OperacionXpath} = require("../Estructuras/OperacionXpath.js");
        const {Entrada} = require("../Estructuras/Entrada.js");
        const {NodoXpath} = require("../Estructuras/NodoXpath.js");
        const {DeclaracionXquery,FuncionXquery,VariableXquery,FunctionName,ParametroXquery,TypeDeclaration} = require("../Estructuras/Xquery/DeclaracionXquery.js");
        const {FLWORExpr,FLWORVariables,FLWORBinding,IntermediteClause,OrderSpec} = require("../Estructuras/Xquery/FLWORExpr.js");
        const {IfExpresion} = require("../Estructuras/Xquery/IfExpresion.js");
        const {NativeFunctionExpresion,Funcion} = require("../Estructuras/Xquery/NativeFunctionExpresion.js");
        const {PathExpresion} = require("../Estructuras/Xquery/PathExpresion.js");
        const {SentenciaXquery,LlamadoFuncion} = require("../Estructuras/Xquery/SentenciaXquery.js");
        const {SingleExpresion} = require("../Estructuras/Xquery/SingleExpresion.js");
        const {TipoParametro, TipoOperador, TipoNodo, SingleExpresionType, FLWORTipo, TipoBinding, OrderModifierType, TipoClausulaIntermedia, TipoFuncion, TipoDeclaracionXquery, ParamType} = require("../Estructuras/tipificacion.js");
        let salida = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 142;
break;
case 2:// comentario simple línea
break;
case 3:// comentario multiple líneas
break;
case 4:return 79
break;
case 5:return 71
break;
case 6:return 'CARACTER_LITERAL'
break;
case 7:return 160;
break;
case 8:return 159;
break;
case 9:return 161;
break;
case 10:return 162;
break;
case 11:return 164;
break;
case 12:return 163;
break;
case 13:return 166;
break;
case 14:return 165;
break;
case 15:return 167;
break;
case 16:return 168;
break;
case 17:return 170;
break;
case 18:return 169;
break;
case 19:return 171;
break;
case 20:return 153;
break;
case 21:return 154;
break;
case 22:return 148;
break;
case 23:return 147;
break;
case 24:return 124;
break;
case 25:return 123;
break;
case 26:return 38;
break;
case 27:return 122;
break;
case 28:return 37;
break;
case 29:return 19;
break;
case 30:return 61;
break;
case 31:return 'comillas';
break;
case 32:return 52;
break;
case 33:return 132;
break;
case 34:return 133;
break;
case 35:return 47;
break;
case 36:return 50;
break;
case 37:return 70;
break;
case 38:return 'equal';
break;
case 39:return 131;
break;
case 40:return 21;
break;
case 41:return 116;
break;
case 42:return 118;
break;
case 43:return 'not';
break;
case 44:return 73;
break;
case 45:return 76;
break;
case 46:return 103;
break;
case 47:return 112;
break;
case 48:return 105;
break;
case 49:return 106;
break;
case 50:return 127
break;
case 51:return 128
break;
case 52:return 63
break;
case 53:return 129
break;
case 54:return 64
break;
case 55:return 130
break;
case 56:return 96
break;
case 57:return 80
break;
case 58:return 110
break;
case 59:return 111
break;
case 60:return 65
break;
case 61:return 66
break;
case 62:return 67
break;
case 63:return 87
break;
case 64:return 86
break;
case 65:return 88
break;
case 66:return 89
break;
case 67:return 90
break;
case 68:return 15
break;
case 69:return 18
break;
case 70:return 24
break;
case 71:return 39
break;
case 72:return 40
break;
case 73:return 41
break;
case 74:return 42
break;
case 75:return 32
break;
case 76:return 28;
break;
case 77:return 30;
break;
case 78:return 36;
break;
case 79:return 44;
break;
case 80:return 114;
break;
case 81:return 115;
break;
case 82:return 149;
break;
case 83:return 150;
break;
case 84:return 59;
break;
case 85:return 60;
break;
case 86:return 151;
break;
case 87:return 116;
break;
case 88:return 137;
break;
case 89:return 12;
break;
case 90:return 14;
break;
case 91:return 156;
break;
case 92:return 'IntegerLiteral';
break;
case 93:return 'string';
break;
case 94:return 20;
break;
case 95:return 49;
break;
case 96:return 143
break;
case 97:return 58
break;
case 98:return 57;
break;
case 99:return 5
break;
case 100:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([0-9]+(\.[0-9]+)?))/i,/^(?:(("(\\"|[^"]|\n)*")))/i,/^(?:(('[^']*')))/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding-sibling\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:last\b)/i,/^(?:position\b)/i,/^(?:text\b)/i,/^(?:node\b)/i,/^(?:div\b)/i,/^(?:mod\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\$)/i,/^(?:&)/i,/^(?:")/i,/^(?:<\/)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?::=)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:!)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:where\b)/i,/^(?:return\b)/i,/^(?:order\b)/i,/^(?:by\b)/i,/^(?:eq\b)/i,/^(?:ne\b)/i,/^(?:lt\b)/i,/^(?:le\b)/i,/^(?:gt\b)/i,/^(?:ge\b)/i,/^(?:let\b)/i,/^(?:to\b)/i,/^(?:ascending\b)/i,/^(?:descending\b)/i,/^(?:amp\b)/i,/^(?:quot\b)/i,/^(?:apos\b)/i,/^(?:lower-case\b)/i,/^(?:upper-case\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:substring\b)/i,/^(?:declare\b)/i,/^(?:variable\b)/i,/^(?:function\b)/i,/^(?:xs:string\b)/i,/^(?:xs:date\b)/i,/^(?:xs:decimal\b)/i,/^(?:xs:boolean\b)/i,/^(?:as\b)/i,/^(?::)/i,/^(?:,)/i,/^(?:\?)/i,/^(?:;)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:@)/i,/^(?:&&)/i,/^(?:\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:"[^\"]*")/i,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ]*)/i,/^(?:\/)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:[a-zA-Z0-9áéíúóàèìòÁÉÍÓÚÀÈÌÒÙñÑ_!@#$%+^'`"*()/¡:;.,~-¤Ã-])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xpathGramatica;
exports.Parser = xpathGramatica.Parser;
exports.parse = function () { return xpathGramatica.parse.apply(xpathGramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}