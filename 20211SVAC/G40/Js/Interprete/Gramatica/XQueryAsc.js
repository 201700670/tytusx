/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XQueryAsc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,9],$V3=[1,10],$V4=[1,11],$V5=[1,6],$V6=[5,9,13,17,18,19,78],$V7=[1,27],$V8=[1,28],$V9=[1,33],$Va=[1,34],$Vb=[1,35],$Vc=[1,36],$Vd=[1,37],$Ve=[1,38],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,26],$Vm=[1,29],$Vn=[1,30],$Vo=[1,32],$Vp=[1,24],$Vq=[1,25],$Vr=[1,54],$Vs=[1,55],$Vt=[1,65],$Vu=[1,66],$Vv=[1,67],$Vw=[1,68],$Vx=[1,57],$Vy=[1,58],$Vz=[1,59],$VA=[1,60],$VB=[1,61],$VC=[1,62],$VD=[1,63],$VE=[1,64],$VF=[12,44,60,62],$VG=[1,72],$VH=[1,71],$VI=[1,70],$VJ=[1,73],$VK=[1,74],$VL=[5,9,12,13,15,17,18,19,44,60,62,78,83,86,87,89],$VM=[12,35,44,58,60,62,64,65,66,67,68,69,70,71,72],$VN=[1,95],$VO=[1,96],$VP=[1,97],$VQ=[1,98],$VR=[25,27,28,30,31,32,33,35,36,37,38,39,40,41,46,47,48,49,50,51,52,53,54,55,56,83,86,87,89],$VS=[33,35,36,37,38,39,40,41,46,47,48,49,50,51,52,53,54,55,56],$VT=[12,25,27,28,30,31,32,33,35,36,37,38,39,40,41,44,46,47,48,49,50,51,52,53,54,55,56,58,60,62,64,65,66,67,68,69,70,71,72,83,86,87,89],$VU=[2,38],$VV=[1,104],$VW=[2,28],$VX=[5,9,13,17,18,19,78,83,86,87,89],$VY=[1,134],$VZ=[1,136],$V_=[1,138],$V$=[1,135],$V01=[1,137],$V11=[1,139],$V21=[12,44,58,60,62,64,65,66,67,68,69,70],$V31=[44,60,62],$V41=[1,163],$V51=[1,164],$V61=[1,167],$V71=[1,162],$V81=[1,165],$V91=[1,166],$Va1=[1,182],$Vb1=[1,183],$Vc1=[5,9,13,17,18,19,60,62,78,83,86,87,89],$Vd1=[1,192],$Ve1=[1,191],$Vf1=[1,190],$Vg1=[1,193],$Vh1=[1,194],$Vi1=[5,9,12,13,17,18,19,35,58,60,62,64,65,66,67,68,69,70,71,72,78,83,86,87,89],$Vj1=[5,9,12,13,17,18,19,58,60,62,64,65,66,67,68,69,70,78,83,86,87,89];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"FLOWER":7,"FUNCION":8,"tk_number":9,"tk_parentesisa":10,"EXPRESION_CADENA":11,"tk_parentesisc":12,"tk_substring":13,"CADENA":14,"tk_coma":15,"tk_entero":16,"tk_uppercase":17,"tk_lowercase":18,"tk_string":19,"SETS":20,"SET":21,"SELECTORES":22,"EXPRESION":23,"AXES":24,"tk_dobleslash":25,"OTRO_SELECTOR":26,"tk_slash":27,"tk_dpds":28,"AGREGAR_SELECTOR":29,"tk_pds":30,"tk_dps":31,"tk_ps":32,"tk_identificador":33,"PREDICADO":34,"tk_asterisco":35,"tk_punto":36,"tk_arrobaasterisco":37,"tk_arroba":38,"tk_texto":39,"tk_doblepunto":40,"tk_node":41,"tk_corchetea":42,"EXPRESION_FILTRO":43,"tk_corchetec":44,"EXPRESION_LOGICA":45,"tk_ancestorself":46,"tk_ancestor":47,"tk_child":48,"tk_descendantself":49,"tk_descendant":50,"tk_followingsibling":51,"tk_following":52,"tk_self":53,"tk_parent":54,"tk_precedingsibling":55,"tk_preceding":56,"ATRIBUTO":57,"tk_igual":58,"tk_attribute":59,"tk_and":60,"EXPRESION_RELACIONAL":61,"tk_or":62,"EXPRESION_NUMERICA":63,"tk_mayor":64,"tk_menor":65,"tk_mayorigual":66,"tk_menorigual":67,"tk_noigual":68,"tk_menos":69,"tk_mas":70,"tk_mod":71,"tk_division":72,"tk_decimal":73,"tk_last":74,"tk_position":75,"tk_cadena1":76,"tk_cadena2":77,"tk_for":78,"tk_idflower":79,"tk_in":80,"SENTENCIAS":81,"SENTENCIA":82,"tk_let":83,"tk_dospuntosigual":84,"EXPRESION_LOGICAX":85,"tk_where":86,"tk_order":87,"tk_by":88,"tk_return":89,"EXPRESION_XQUERY":90,"EXPRESION_RELACIONALX":91,"EXPRESION_NUMERICAX":92,"EXPRESION_CADENAX":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"tk_number",10:"tk_parentesisa",12:"tk_parentesisc",13:"tk_substring",15:"tk_coma",16:"tk_entero",17:"tk_uppercase",18:"tk_lowercase",19:"tk_string",25:"tk_dobleslash",27:"tk_slash",28:"tk_dpds",30:"tk_pds",31:"tk_dps",32:"tk_ps",33:"tk_identificador",35:"tk_asterisco",36:"tk_punto",37:"tk_arrobaasterisco",38:"tk_arroba",39:"tk_texto",40:"tk_doblepunto",41:"tk_node",42:"tk_corchetea",44:"tk_corchetec",46:"tk_ancestorself",47:"tk_ancestor",48:"tk_child",49:"tk_descendantself",50:"tk_descendant",51:"tk_followingsibling",52:"tk_following",53:"tk_self",54:"tk_parent",55:"tk_precedingsibling",56:"tk_preceding",58:"tk_igual",59:"tk_attribute",60:"tk_and",62:"tk_or",64:"tk_mayor",65:"tk_menor",66:"tk_mayorigual",67:"tk_menorigual",68:"tk_noigual",69:"tk_menos",70:"tk_mas",71:"tk_mod",72:"tk_division",73:"tk_decimal",74:"tk_last",75:"tk_position",76:"tk_cadena1",77:"tk_cadena2",78:"tk_for",79:"tk_idflower",80:"tk_in",83:"tk_let",84:"tk_dospuntosigual",86:"tk_where",87:"tk_order",88:"tk_by",89:"tk_return"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[8,4],[8,6],[8,8],[8,4],[8,4],[8,4],[20,2],[20,1],[21,2],[21,1],[21,1],[21,2],[22,2],[22,1],[22,1],[22,2],[22,1],[26,2],[26,2],[26,2],[26,2],[29,1],[29,0],[23,2],[23,2],[23,2],[23,2],[23,3],[23,2],[23,2],[23,2],[34,3],[34,0],[43,1],[24,2],[24,2],[24,2],[24,2],[24,2],[24,2],[24,2],[24,2],[24,2],[24,2],[24,2],[57,4],[57,4],[45,3],[45,3],[45,1],[61,3],[61,3],[61,3],[61,3],[61,3],[61,3],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[11,1],[11,1],[63,2],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[14,1],[14,1],[7,5],[81,2],[81,1],[82,4],[82,4],[82,5],[82,6],[82,3],[82,2],[82,4],[90,2],[85,3],[85,3],[85,1],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,1],[93,1],[93,1],[92,2],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,1],[92,1],[92,1],[92,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  console.log("TODO CORRECTO :D XQUERY ASC VERSION");
                                instrucciones = $$[$0-1][0];
                                nodo = $$[$0-1][1];
                                this.$ =[instrucciones,nodo];
                                return this.$; 
break;
case 2:
 $$[$0-1][0].push($$[$0][0]);
                                           $$[$0-1][1].agregarHijo($$[$0][1]);
                                           this.$ = [$$[$0-1][0],$$[$0-1][1]]; 
break;
case 3:
 this.$ = [[$$[$0][0]],$$[$0][1]]; 
break;
case 4: case 5: case 62: case 63: case 68: case 69: case 80: case 105: case 106: case 107:
 this.$ = $$[$0]; 
break;
case 6:

                xNumberAux = new XNumber(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1][0]);
                nodoaux = new NodoArbol("number()","");
                nodoaux.agregarHijo($$[$0-1][1]);
                this.$ = [xNumberAux,nodoaux]; 
break;
case 7:
 
                xSubAux = new XSubstring(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3][0], Number($$[$0-1]), 0, 0);
                nodoaux = new NodoArbol("substring()","");
                nodoaux.agregarHijo($$[$0-3][1]);
                nodoaux.agregarHijo(new NodoArbol($$[$0-1],""));
                this.$ = [xSubAux,nodoaux]; 
break;
case 8:
 
                xSubAux = new XSubstring(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5][0], Number($$[$0-3]), Number($$[$0-1]), 1);
                nodoaux = new NodoArbol("substring()","");
                nodoaux.agregarHijo($$[$0-5][1]);
                nodoaux.agregarHijo(new NodoArbol($$[$0-3],""));
                nodoaux.agregarHijo(new NodoArbol($$[$0-1],""));
                this.$ = [xSubAux,nodoaux]; 
break;
case 9:

                xUpperAux = new XUpperCase(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1][0]);
                nodoaux = new NodoArbol("upper-case()","");
                nodoaux.agregarHijo($$[$0-1][1]);
                this.$ = [xUpperAux,nodoaux]; 
break;
case 10:

                xUpperAux = new XLowerCase(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1][0]);
                nodoaux = new NodoArbol("lower-case()","");
                nodoaux.agregarHijo($$[$0-1][1]);
                this.$ = [xUpperAux,nodoaux]; 
break;
case 11:

                xStringAux = new XString(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1][0]);
                nodoaux = new NodoArbol("string()","");
                nodoaux.agregarHijo($$[$0-1][1]);
                this.$ = [xStringAux,nodoaux]; 
break;
case 12:
 $$[$0-1][1].agregarHijo($$[$0][1]);
                 $$[$0-1][0].push($$[$0][0]); 
                 this.$ = [$$[$0-1][0],$$[$0-1][1]]; 
break;
case 13: case 87:
 this.$ = [[$$[$0][0]],$$[$0][1]] 
break;
case 14:
 nodoXPath = new NodoXpath("", TipoNodo.SELECTOR_EXPRESION, null, $$[$0-1][0], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column); 
                               nodoaux= new NodoArbol($$[$0-1][1],"");
                               nodoaux.agregarHijo($$[$0][1]);
                               this.$ = [nodoXPath,nodoaux]; 
break;
case 15:
nodoXPath = new NodoXpath("", TipoNodo.EXPRESION, null, [], $$[$0][0], _$[$0].first_line, _$[$0].first_column);  
                        this.$ = [nodoXPath,$$[$0][1]] 
break;
case 16:
     nodoXPath = new NodoXpath("", TipoNodo.AXES, $$[$0][0], [], null, _$[$0].first_line, _$[$0].first_column); 
                        this.$ = [nodoXPath,$$[$0][1]]; 
break;
case 17:
  nodoXPath = new NodoXpath("", TipoNodo.SELECTOR_AXES, $$[$0][0], $$[$0-1][0], null, _$[$0-1].first_line, _$[$0-1].first_column);    
                                nodoaux= new NodoArbol($$[$0-1][1],"");
                                nodoaux.agregarHijo($$[$0][1]);
                                this.$ = [nodoXPath,nodoaux]; 
break;
case 18:
 arr = [TipoSelector.DOBLE_SLASH]; 
                                          arr = arr.concat($$[$0][0]);
                                          $$[$0-1] = $$[$0-1]+""+$$[$0][1] ;
                                          this.$ = [arr,$$[$0-1]]; 
break;
case 19:
 this.$ = [[TipoSelector.DOBLE_SLASH],$$[$0]]; 
break;
case 20:
 this.$ = [[TipoSelector.SLASH],$$[$0]]; 
break;
case 21:
    arr = [TipoSelector.SLASH] 
                                        arr = arr.concat($$[$0][0]);
                                        $$[$0-1] = $$[$0-1]+""+$$[$0][1];
                                        this.$ = [arr,$$[$0-1]];
break;
case 22: case 27:
 this.$ = [$$[$0][0],$$[$0][1]];  
break;
case 23:
 arr = [TipoSelector.DOSPUNTOS_DOSSLASH];
                                          arr = arr.concat($$[$0][0]);
                                          $$[$0-1] = $$[$0-1]+""+$$[$0][1];
                                          this.$ = [arr,$$[$0-1]];
break;
case 24:
 arr = [TipoSelector.PUNTO_DOSSLASH];
                                          arr = arr.concat($$[$0][0]);
                                          $$[$0-1] = $$[$0-1]+""+$$[$0][1];
                                          this.$ = [arr,$$[$0-1]];
break;
case 25:
 arr = [TipoSelector.DOSPUNTOS_SLASH];
                                          arr = arr.concat($$[$0][0]);
                                          $$[$0-1] = $$[$0-1]+""+$$[$0][1];
                                          this.$ = [arr,$$[$0-1]];
break;
case 26:
 arr = [TipoSelector.PUNTO_SLASH];
                                          arr = arr.concat($$[$0][0]);
                                          $$[$0-1] = $$[$0-1]+""+$$[$0][1];
                                          this.$ = [arr,$$[$0-1]];
break;
case 28:
 this.$ = [[TipoSelector.FIN],""];  
break;
case 29:
 expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.IDENTIFICADOR, $$[$0][0]);
                                         nodoaux = new NodoArbol($$[$0-1],"");
                                         nodoaux.agregarHijo($$[$0][1]);
                                         this.$ = [expresionAux,nodoaux];
break;
case 30:
     expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.ASTERISCO, $$[$0][0]);
                                        nodoaux = new NodoArbol($$[$0-1],"");
                                        nodoaux.agregarHijo($$[$0][1]);
                                        this.$ = [expresionAux,nodoaux];
break;
case 31:
 expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.PUNTO, null);
                                nodoaux = new NodoArbol($$[$0-1],"");
                                this.$ = [expresionAux,nodoaux]; 
break;
case 32:
 expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.ARROBA, null);
                                          nodoaux = new NodoArbol($$[$0-1],"");
                                          this.$ = [expresionAux,nodoaux];
break;
case 33:
 expresionAux = new ExpresionXPath(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], TipoExpresionXPath.ARROBA_ID, null);
                                                  nodoaux = new NodoArbol($$[$0-2]+""+$$[$0-1],"");
                                                  this.$ = [expresionAux,nodoaux]; 
break;
case 34:
 expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.TEXT, $$[$0][0]);
                                nodoaux = new NodoArbol($$[$0-1],"");
                                nodoaux.agregarHijo($$[$0][1]);
                                this.$ = [expresionAux,nodoaux]; 
break;
case 35:
    expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.DOBLEPUNTO, null);
                                        nodoaux = new NodoArbol($$[$0-1],"");
                                        this.$ = [expresionAux,nodoaux];
break;
case 36:
  expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.NODE, $$[$0][0]);
                                nodoaux = new NodoArbol($$[$0-1],"");
                                nodoaux.agregarHijo($$[$0][1]);
                                this.$ = [expresionAux,nodoaux]; 
break;
case 37:
 nodoaux = new NodoArbol("Predicado","");
                                                         nodoaux.agregarHijo(new NodoArbol("[",""));
                                                         nodoaux.agregarHijo($$[$0-1][1]);
                                                         nodoaux.agregarHijo(new NodoArbol("]",""));
                                                         this.$ = [$$[$0-1][0],nodoaux]; 
break;
case 38:
    nodoaux = new NodoArbol("Predicado","");
                nodoaux.agregarHijo(new NodoArbol("[",""));
                nodoaux.agregarHijo(new NodoArbol("]",""));
                this.$ = [null,nodoaux];
break;
case 39:
 
break;
case 40:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.ANCESTOR_OR_SELF, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux];
break;
case 41:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.ANCESTOR, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux];
break;
case 42:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.CHILD, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux];
break;
case 43:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.DESCENDANT_OR_SELF, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux];
break;
case 44:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.DESCENDANT, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux];
break;
case 45:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.FOLLOWING_SIBLING, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux]; 
break;
case 46:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.FOLLOWING, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux];
break;
case 47:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.SELF, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux];
break;
case 48:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.PARENT, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux];
break;
case 49:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.PRECEDING_SIBLING, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux];
break;
case 50:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.PRECEDING, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux]; 
break;
case 51:
    idAux = new Primitivo($$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column);
                                                           operacionAux = new Operacion(TipoOperadores.ATRIBUTOS, idAux, $$[$0][0], Operador.IGUAL, _$[$0-3].first_line, _$[$0-3].first_column);
                                                           nodoaux = new NodoArbol("=","");
                                                           nodoaux.agregarHijo(new NodoArbol("@"+$$[$0-2],""));
                                                           nodoaux.agregarHijo($$[$0][1]);
                                                           this.$ = [operacionAux,nodoaux]; 
break;
case 52:
 idAux = new Primitivo($$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column);
                                                           operacionAux = new Operacion(TipoOperadores.ATRIBUTOS, idAux, $$[$0][0], Operador.IGUAL, _$[$0-3].first_line, _$[$0-3].first_column);
                                                           nodoaux = new NodoArbol("=","");
                                                           nodoaux.agregarHijo(new NodoArbol("attribute::"+$$[$0-2],""));
                                                           nodoaux.agregarHijo($$[$0][1]);
                                                           this.$ = [operacionAux,nodoaux]; 
break;
case 53:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                  nodoaux = new NodoArbol("and","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux]; 
break;
case 54:
  operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                  nodoaux = new NodoArbol("or","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux]; 
break;
case 55:
 this.$ = $$[$0];  
break;
case 56:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                         nodoaux = new NodoArbol(">","");
                                                                         nodoaux.agregarHijo($$[$0-2][1]);
                                                                         nodoaux.agregarHijo($$[$0][1]);
                                                                         this.$ = [operacionAux,nodoaux]; 
break;
case 57:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                         nodoaux = new NodoArbol("<","");
                                                                         nodoaux.agregarHijo($$[$0-2][1]);
                                                                         nodoaux.agregarHijo($$[$0][1]);
                                                                         this.$ = [operacionAux,nodoaux]; 
break;
case 58:
 
                                                                         operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MAYOR_IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                         nodoaux = new NodoArbol(">=","");
                                                                         nodoaux.agregarHijo($$[$0-2][1]);
                                                                         nodoaux.agregarHijo($$[$0][1]);
                                                                         this.$ = [operacionAux,nodoaux];
break;
case 59:
 
                                                                         operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MENOR_IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                         nodoaux = new NodoArbol("<=","");
                                                                         nodoaux.agregarHijo($$[$0-2][1]);
                                                                         nodoaux.agregarHijo($$[$0][1]);
                                                                         this.$ = [operacionAux,nodoaux]; 
break;
case 60:
   operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                         nodoaux = new NodoArbol("=","");
                                                                         nodoaux.agregarHijo($$[$0-2][1]);
                                                                         nodoaux.agregarHijo($$[$0][1]);
                                                                         this.$ = [operacionAux,nodoaux]; 
break;
case 61:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                         nodoaux = new NodoArbol("!=","");
                                                                         nodoaux.agregarHijo($$[$0-2][1]);
                                                                         nodoaux.agregarHijo($$[$0][1]);
                                                                         this.$ = [operacionAux,nodoaux]; 
break;
case 64:
  expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, TipoExpresionDefinida.ASTERISCO);
                                        nodoaux = new NodoArbol("*","");
                                        this.$ = [expresionAux,nodoaux]; 
break;
case 65:
      expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, TipoExpresionDefinida.TEXT);
                                        nodoaux = new NodoArbol($$[$0],"");
                                        this.$ = [expresionAux,nodoaux]; 
break;
case 66:
 expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, TipoExpresionDefinida.ARROBA);
                                             nodoaux = new NodoArbol("@*","");
                                             this.$ = [expresionAux,nodoaux];
break;
case 67:
 expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, TipoExpresionDefinida.NODE);
                                  nodoaux = new NodoArbol($$[$0],"");
                                  this.$ = [expresionAux,nodoaux]; 
break;
case 70: case 108:
 negativo = new Primitivo(-1, _$[$0-1].first_line, _$[$0-1].first_column);
                                                                  operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0][0], negativo, Operador.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column);
                                                                  nodoaux = new NodoArbol("*","");
                                                                  nodoaux.agregarHijo(new NodoArbol("-1",""));
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux]; 
break;
case 71:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                  nodoaux = new NodoArbol("+","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux];  
break;
case 72:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                  nodoaux = new NodoArbol("-","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux];  
break;
case 73:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                  nodoaux = new NodoArbol("*","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux];  
break;
case 74:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                  nodoaux = new NodoArbol("%","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux];   
break;
case 75:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                  nodoaux = new NodoArbol("÷","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux]; 
break;
case 76: case 114:
 this.$ = $$[$0-1]; 
break;
case 77: case 78: case 115: case 116:
 primitivoAux = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
                                                                  nodoaux = new NodoArbol($$[$0],"");
                                                                  this.$ = [primitivoAux,nodoaux]; 
break;
case 79:
 expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, TipoExpresionDefinida.LAST);
                                                                  nodoaux = new NodoArbol($$[$0],"");
                                                                  this.$ = [expresionAux,nodoaux]; 
break;
case 81:
  expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, TipoExpresionDefinida.POSITION);
                                                                  nodoaux = new NodoArbol($$[$0],"");
                                                                  this.$ = [expresionAux,nodoaux]; 
break;
case 82:
 primitivoAux = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column);
                                                                  nodoaux = new NodoArbol($$[$0],"");
                                                                  this.$ = [primitivoAux,nodoaux]; 
break;
case 83: case 84:
 primitivoAux = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column);
                              primitivoAux.setCadena(true);
                              nodoaux = new NodoArbol($$[$0],"");
                              this.$ = [primitivoAux,nodoaux]; 
break;
case 85:
 instruccionAux = new XPath(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1][0]);
                                                   flowerAux = new Flower(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], instruccionAux, $$[$0][0]);
                                                   nodoaux = new NodoArbol("for","");
                                                   nodoaux.agregarHijo(new NodoArbol($$[$0-3],""));
                                                   nodoaux.agregarHijo($$[$0-1][1]);
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [flowerAux,nodoaux]; 
break;
case 86:
                                   
                                   $$[$0-1][1].agregarHijo($$[$0][1]);
                                   $$[$0-1][0].push($$[$0][0]); 
                                   this.$ = [$$[$0-1][0],$$[$0-1][1]];  
break;
case 88:
  nodoaux = new NodoArbol(":=","");
                                                                     nodoaux.agregarHijo(new NodoArbol($$[$0-2],""));
                                                                     nodoaux.agregarHijo($$[$0][1]);
                                                                     declaracionAux = new Declaracion(TipoSentencia.LET, $$[$0][0], $$[$0-2],  _$[$0-3].first_line, _$[$0-3].first_column);
                                                                     this.$ = [declaracionAux,nodoaux]; 
break;
case 89:
 
                                        nodoaux = new NodoArbol("Where","");
                                        nodoaux.agregarHijo($$[$0][1]);
                                        sentenciaAux = new Sentencia(TipoSentencia.WHERE, $$[$0][0], _$[$0-3].first_line, _$[$0-3].first_column);
                                        this.$ = [sentenciaAux,nodoaux]; 
break;
case 90:
    
                                        nodoaux = new NodoArbol("OrderBy","");
                                        nodoaux.agregarHijo(new NodoArbol($$[$0],""));
                                        sentenciaAux = new Sentencia(TipoSentencia.ORDERBY_ELEMENTO, $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
                                        this.$ = [sentenciaAux,nodoaux]; 
break;
case 91:
  
                                        nodoaux = new NodoArbol("OrderBy","");
                                        nodoaux.agregarHijo(new NodoArbol("@"+$$[$0],""));  
                                        sentenciaAux = new Sentencia(TipoSentencia.ORDERBY_ATRIBUTO, $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
                                        this.$ = [sentenciaAux,nodoaux]; 
break;
case 92:
  
                                        nodoaux = new NodoArbol("OrderBy","");
                                        nodoaux.agregarHijo(new NodoArbol($$[$0],""));  
                                        sentenciaAux = new Sentencia(TipoSentencia.ORDERBY, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
                                        this.$ = [sentenciaAux,nodoaux]; 
break;
case 93:
  
                                nodoaux = new NodoArbol("Return","");
                                nodoaux.agregarHijo(new NodoArbol($$[$0],""));
                                sentenciaAux = new Sentencia(TipoSentencia.RETURN, null, _$[$0-1].first_line, _$[$0-1].first_column);
                                this.$ = [sentenciaAux,nodoaux];  
break;
case 94:
  
                                nodoaux = new NodoArbol("Return","");
                                nodoaux.agregarHijo($$[$0][1]);
                                sentenciaAux = new Sentencia(TipoSentencia.RETURN, $$[$0][0], _$[$0-3].first_line, _$[$0-3].first_column);
                                this.$ = [sentenciaAux,nodoaux];  
break;
case 95:
 expresionAux = new ExpresionXQuery(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], $$[$0][0]);
                                      nodoaux = new NodoArbol($$[$0-1],"");
                                      nodoaux.agregarHijo($$[$0][1]);
                                      this.$ = [expresionAux,nodoaux]; 
break;
case 96:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                     nodoaux = new NodoArbol("and","");
                                                                     nodoaux.agregarHijo($$[$0-2][1]);
                                                                     nodoaux.agregarHijo($$[$0][1]);
                                                                     this.$ = [operacionAux,nodoaux]; 
break;
case 97:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                   nodoaux = new NodoArbol("or","");
                                                                   nodoaux.agregarHijo($$[$0-2][1]);
                                                                   nodoaux.agregarHijo($$[$0][1]);
                                                                   this.$ = [operacionAux,nodoaux]; 
break;
case 98:
 this.$ = $$[$0];
break;
case 99:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                            nodoaux = new NodoArbol(">","");
                                                                            nodoaux.agregarHijo($$[$0-2][1]);
                                                                            nodoaux.agregarHijo($$[$0][1]);
                                                                            this.$ = [operacionAux,nodoaux]; 
break;
case 100:
  operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                            nodoaux = new NodoArbol("<","");
                                                                            nodoaux.agregarHijo($$[$0-2][1]);
                                                                            nodoaux.agregarHijo($$[$0][1]);
                                                                            this.$ = [operacionAux,nodoaux]; 
break;
case 101:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MAYOR_IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                                nodoaux = new NodoArbol(">=","");
                                                                                nodoaux.agregarHijo($$[$0-2][1]);
                                                                                nodoaux.agregarHijo($$[$0][1]);
                                                                                this.$ = [operacionAux,nodoaux]; 
break;
case 102:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MENOR_IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                                nodoaux = new NodoArbol("<=","");
                                                                                nodoaux.agregarHijo($$[$0-2][1]);
                                                                                nodoaux.agregarHijo($$[$0][1]);
                                                                                this.$ = [operacionAux,nodoaux]; 
break;
case 103:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                         nodoaux = new NodoArbol("=","");
                                                                         nodoaux.agregarHijo($$[$0-2][1]);
                                                                         nodoaux.agregarHijo($$[$0][1]);
                                                                         this.$ = [operacionAux,nodoaux]; 
break;
case 104:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                           nodoaux = new NodoArbol("=","");
                                                                           nodoaux.agregarHijo($$[$0-2][1]);
                                                                           nodoaux.agregarHijo($$[$0][1]);
                                                                           this.$ = [operacionAux,nodoaux]; 
break;
case 109:
  operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                   nodoaux = new NodoArbol("+","");
                                                                   nodoaux.agregarHijo($$[$0-2][1]);
                                                                   nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux]; 
break;
case 110:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                  nodoaux = new NodoArbol("-","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux]; 
break;
case 111:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column); 
                                                                  nodoaux = new NodoArbol("*","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux]; 
break;
case 112:
  operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                   nodoaux = new NodoArbol("%","");
                                                                   nodoaux.agregarHijo($$[$0-2][1]);
                                                                   nodoaux.agregarHijo($$[$0][1]);
                                                                   this.$ = [operacionAux,nodoaux]; 
break;
case 113:
  operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                   nodoaux = new NodoArbol("÷","");
                                                                   nodoaux.agregarHijo($$[$0-2][1]);
                                                                   nodoaux.agregarHijo($$[$0][1]);
                                                                   this.$ = [operacionAux,nodoaux]; 
break;
case 117: case 118:
  primitivoAux = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column);
                                                                   nodoaux = new NodoArbol($$[$0],"");
                                                                   this.$ = [primitivoAux, nodoaux]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,13:$V1,17:$V2,18:$V3,19:$V4,78:$V5},{1:[3]},{5:[1,12],6:13,7:4,8:5,9:$V0,13:$V1,17:$V2,18:$V3,19:$V4,78:$V5},o($V6,[2,3]),o($V6,[2,4]),o($V6,[2,5]),{79:[1,14]},{10:[1,15]},{10:[1,16]},{10:[1,17]},{10:[1,18]},{10:[1,19]},{1:[2,1]},o($V6,[2,2]),{80:[1,20]},{10:$V7,11:21,14:22,16:$V8,24:31,33:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,63:23,69:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{14:45,76:$Vp,77:$Vq},{14:46,76:$Vp,77:$Vq},{14:47,76:$Vp,77:$Vq},{10:$V7,11:48,14:22,16:$V8,24:31,33:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,63:23,69:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{20:49,21:50,22:51,23:52,24:53,25:$Vr,26:56,27:$Vs,28:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk},{12:[1,69]},o($VF,[2,68]),o($VF,[2,69],{35:$VG,69:$VH,70:$VI,71:$VJ,72:$VK}),o($VL,[2,83]),o($VL,[2,84]),{10:$V7,16:$V8,24:31,33:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,63:75,69:$Vl,73:$Vm,74:$Vn,75:$Vo},{10:$V7,16:$V8,24:31,33:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,63:76,69:$Vl,73:$Vm,74:$Vn,75:$Vo},o($VM,[2,77]),o($VM,[2,78]),o($VM,[2,79]),o($VM,[2,80]),o($VM,[2,81]),o($VM,[2,82]),{23:77,33:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE},{23:78,33:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE},{23:79,33:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE},{23:80,33:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE},{23:81,33:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE},{23:82,33:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE},{23:83,33:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE},{23:84,33:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE},{23:85,33:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE},{23:86,33:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE},{23:87,33:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE},{15:[1,88]},{12:[1,89]},{12:[1,90]},{12:[1,91]},{21:93,22:51,23:52,24:53,25:$Vr,26:56,27:$Vs,28:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,81:92,82:94,83:$VN,86:$VO,87:$VP,89:$VQ},o($VR,[2,13]),{23:99,24:100,33:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk},o($VR,[2,15]),o($VR,[2,16]),o($VS,[2,19],{26:101,28:$Vt,30:$Vu,31:$Vv,32:$Vw}),o($VS,[2,20],{26:102,28:$Vt,30:$Vu,31:$Vv,32:$Vw}),o($VS,[2,22]),o($VT,$VU,{34:103,42:$VV}),o($VT,$VU,{34:105,42:$VV}),o($VT,$VU,{34:106,42:$VV}),o($VT,$VU,{34:107,42:$VV}),{33:[1,108]},o($VT,$VU,{34:109,42:$VV}),o($VT,$VU,{34:110,42:$VV}),o($VT,$VU,{34:111,42:$VV}),o($VS,$VW,{29:112,26:113,28:$Vt,30:$Vu,31:$Vv,32:$Vw}),o($VS,$VW,{26:113,29:114,28:$Vt,30:$Vu,31:$Vv,32:$Vw}),o($VS,$VW,{26:113,29:115,28:$Vt,30:$Vu,31:$Vv,32:$Vw}),o($VS,$VW,{26:113,29:116,28:$Vt,30:$Vu,31:$Vv,32:$Vw}),o($V6,[2,6]),{10:$V7,16:$V8,24:31,33:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,63:117,69:$Vl,73:$Vm,74:$Vn,75:$Vo},{10:$V7,16:$V8,24:31,33:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,63:118,69:$Vl,73:$Vm,74:$Vn,75:$Vo},{10:$V7,16:$V8,24:31,33:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,63:119,69:$Vl,73:$Vm,74:$Vn,75:$Vo},{10:$V7,16:$V8,24:31,33:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,63:120,69:$Vl,73:$Vm,74:$Vn,75:$Vo},{10:$V7,16:$V8,24:31,33:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,63:121,69:$Vl,73:$Vm,74:$Vn,75:$Vo},o($VM,[2,70]),{12:[1,122],35:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},o($VT,[2,40]),o($VT,[2,41]),o($VT,[2,42]),o($VT,[2,43]),o($VT,[2,44]),o($VT,[2,45]),o($VT,[2,46]),o($VT,[2,47]),o($VT,[2,48]),o($VT,[2,49]),o($VT,[2,50]),{16:[1,123]},o($V6,[2,9]),o($V6,[2,10]),o($V6,[2,11]),o($V6,[2,85],{82:124,83:$VN,86:$VO,87:$VP,89:$VQ}),o($VR,[2,12]),o($VX,[2,87]),{79:[1,125]},{79:[1,126]},{88:[1,127]},{79:[1,128]},o($VR,[2,14]),o($VR,[2,17]),o($VS,[2,18]),o($VS,[2,21]),o($VT,[2,29]),{10:$V7,16:$V8,24:31,33:$V9,35:$VY,37:$VZ,38:$V_,39:$V$,41:$V01,43:129,45:130,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:133,59:$V11,61:131,63:132,69:$Vl,73:$Vm,74:$Vn,75:$Vo},o($VT,[2,30]),o($VT,[2,31]),o($VT,[2,32]),o($VT,$VU,{34:140,42:$VV}),o($VT,[2,34]),o($VT,[2,35]),o($VT,[2,36]),o($VS,[2,23]),o($VS,[2,27]),o($VS,[2,24]),o($VS,[2,25]),o($VS,[2,26]),o($V21,[2,71],{35:$VG,71:$VJ,72:$VK}),o($V21,[2,72],{35:$VG,71:$VJ,72:$VK}),o($VM,[2,73]),o($VM,[2,74]),o($VM,[2,75]),o($VM,[2,76]),{12:[1,141],15:[1,142]},o($VX,[2,86]),{84:[1,143]},{27:[1,144]},{79:[1,145]},o($VX,[2,93],{27:[1,146]}),{44:[1,147]},{44:[2,39],60:[1,148],62:[1,149]},o($V31,[2,55]),o($V31,[2,62],{35:$VG,58:[1,154],64:[1,150],65:[1,151],66:[1,152],67:[1,153],68:[1,155],69:$VH,70:$VI,71:$VJ,72:$VK}),o($V31,[2,63]),o($V31,[2,64]),o($V31,[2,65]),o($V31,[2,66]),o($V31,[2,67]),{33:[1,156]},{33:[1,157]},o($VT,[2,33]),o($V6,[2,7]),{16:[1,158]},{10:$V41,16:$V51,33:$V61,69:$V71,73:$V81,79:$V91,85:159,91:160,92:161},{10:$V41,16:$V51,33:$V61,69:$V71,73:$V81,79:$V91,85:168,91:160,92:161},o($VX,[2,92],{27:[1,169]}),{10:$V41,16:$V51,33:$V61,69:$V71,73:$V81,79:$V91,85:170,91:160,92:161},o($VT,[2,37]),{10:$V7,16:$V8,24:31,33:$V9,35:$VY,37:$VZ,38:$V_,39:$V$,41:$V01,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:133,59:$V11,61:171,63:132,69:$Vl,73:$Vm,74:$Vn,75:$Vo},{10:$V7,16:$V8,24:31,33:$V9,35:$VY,37:$VZ,38:$V_,39:$V$,41:$V01,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:133,59:$V11,61:172,63:132,69:$Vl,73:$Vm,74:$Vn,75:$Vo},{10:$V7,16:$V8,24:31,33:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,63:173,69:$Vl,73:$Vm,74:$Vn,75:$Vo},{10:$V7,16:$V8,24:31,33:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,63:174,69:$Vl,73:$Vm,74:$Vn,75:$Vo},{10:$V7,16:$V8,24:31,33:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,63:175,69:$Vl,73:$Vm,74:$Vn,75:$Vo},{10:$V7,16:$V8,24:31,33:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,63:176,69:$Vl,73:$Vm,74:$Vn,75:$Vo},{10:$V7,11:177,14:22,16:$V8,24:31,33:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,63:23,69:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{10:$V7,11:178,14:22,16:$V8,24:31,33:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,63:23,69:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{58:[1,179]},{58:[1,180]},{12:[1,181]},o($VX,[2,88],{60:$Va1,62:$Vb1}),o($Vc1,[2,98]),o($Vc1,[2,105],{35:$Vd1,58:[1,188],64:[1,184],65:[1,185],66:[1,186],67:[1,187],68:[1,189],69:$Ve1,70:$Vf1,71:$Vg1,72:$Vh1}),{10:$V41,16:$V51,33:$V61,69:$V71,73:$V81,79:$V91,92:195},{10:$V41,16:$V51,33:$V61,69:$V71,73:$V81,79:$V91,92:196},o($Vi1,[2,115]),o($Vi1,[2,116]),o($Vi1,[2,117]),o($Vi1,[2,118]),o($VX,[2,89],{60:$Va1,62:$Vb1}),{33:[1,197],38:[1,198]},o($VX,[2,94],{60:$Va1,62:$Vb1}),o($V31,[2,53]),o($V31,[2,54]),o($V31,[2,56],{35:$VG,69:$VH,70:$VI,71:$VJ,72:$VK}),o($V31,[2,57],{35:$VG,69:$VH,70:$VI,71:$VJ,72:$VK}),o($V31,[2,58],{35:$VG,69:$VH,70:$VI,71:$VJ,72:$VK}),o($V31,[2,59],{35:$VG,69:$VH,70:$VI,71:$VJ,72:$VK}),o($V31,[2,60]),o($V31,[2,61]),{14:199,76:$Vp,77:$Vq},{14:200,76:$Vp,77:$Vq},o($V6,[2,8]),{10:$V41,16:$V51,33:$V61,69:$V71,73:$V81,79:$V91,91:201,92:161},{10:$V41,16:$V51,33:$V61,69:$V71,73:$V81,79:$V91,91:202,92:161},{10:$V41,16:$V51,33:$V61,69:$V71,73:$V81,79:$V91,92:203},{10:$V41,16:$V51,33:$V61,69:$V71,73:$V81,79:$V91,92:204},{10:$V41,16:$V51,33:$V61,69:$V71,73:$V81,79:$V91,92:205},{10:$V41,16:$V51,33:$V61,69:$V71,73:$V81,79:$V91,92:206},{10:$V41,14:208,16:$V51,33:$V61,69:$V71,73:$V81,76:$Vp,77:$Vq,79:$V91,92:209,93:207},{10:$V41,14:208,16:$V51,33:$V61,69:$V71,73:$V81,76:$Vp,77:$Vq,79:$V91,92:209,93:210},{10:$V41,16:$V51,33:$V61,69:$V71,73:$V81,79:$V91,92:211},{10:$V41,16:$V51,33:$V61,69:$V71,73:$V81,79:$V91,92:212},{10:$V41,16:$V51,33:$V61,69:$V71,73:$V81,79:$V91,92:213},{10:$V41,16:$V51,33:$V61,69:$V71,73:$V81,79:$V91,92:214},{10:$V41,16:$V51,33:$V61,69:$V71,73:$V81,79:$V91,92:215},o($Vi1,[2,108]),{12:[1,216],35:$Vd1,69:$Ve1,70:$Vf1,71:$Vg1,72:$Vh1},o($VX,[2,90]),{33:[1,217]},o($V31,[2,51]),o($V31,[2,52]),o($Vc1,[2,96]),o($Vc1,[2,97]),o($Vc1,[2,99],{35:$Vd1,69:$Ve1,70:$Vf1,71:$Vg1,72:$Vh1}),o($Vc1,[2,100],{35:$Vd1,69:$Ve1,70:$Vf1,71:$Vg1,72:$Vh1}),o($Vc1,[2,101],{35:$Vd1,69:$Ve1,70:$Vf1,71:$Vg1,72:$Vh1}),o($Vc1,[2,102],{35:$Vd1,69:$Ve1,70:$Vf1,71:$Vg1,72:$Vh1}),o($Vc1,[2,103]),o($Vc1,[2,106]),o($Vc1,[2,107],{35:$Vd1,69:$Ve1,70:$Vf1,71:$Vg1,72:$Vh1}),o($Vc1,[2,104]),o($Vj1,[2,109],{35:$Vd1,71:$Vg1,72:$Vh1}),o($Vj1,[2,110],{35:$Vd1,71:$Vg1,72:$Vh1}),o($Vi1,[2,111]),o($Vi1,[2,112]),o($Vi1,[2,113]),o($Vi1,[2,114]),o($VX,[2,91])],
defaultActions: {12:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 79; 
break;
case 1: return 9;  
break;
case 2: return 13;  
break;
case 3: return 17;  
break;
case 4: return 18;  
break;
case 5: return 19;  
break;
case 6: return 41;  
break;
case 7: return 74;  
break;
case 8: return 75;  
break;
case 9: return 46;  
break;
case 10: return 47;  
break;
case 11: return 59;  
break;
case 12: return 48;  
break;
case 13: return 49;  
break;
case 14: return 50;  
break;
case 15: return 51;  
break;
case 16: return 52;  
break;
case 17: return 54;  
break;
case 18: return 55;  
break;
case 19: return 56;  
break;
case 20: return 53;  
break;
case 21: return 72;  
break;
case 22: return 62;  
break;
case 23: return 60;  
break;
case 24: return 71;  
break;
case 25: return 78;  
break;
case 26: return 80;  
break;
case 27: return 'tk_to';  
break;
case 28: return 83;  
break;
case 29: return 86;  
break;
case 30: return 89;  
break;
case 31: return 87;  
break;
case 32: return 88;  
break;
case 33: return 37;  
break;
case 34: return 38;  
break;
case 35: return 'tk_barra';  
break;
case 36: return 70;  
break;
case 37: return 69;  
break;
case 38: return 35;  
break;
case 39: return 68; 
break;
case 40: return 84; 
break;
case 41: return 67; 
break;
case 42: return 66; 
break;
case 43: return 58; 
break;
case 44: return 64; 
break;
case 45: return 65; 
break;
case 46: return 15; 
break;
case 47: return 'tk_interrogacion'; 
break;
case 48: return 28; 
break;
case 49: return 30; 
break;
case 50: return 31; 
break;
case 51: return 32; 
break;
case 52: return 'tk_slashpunto'; 
break;
case 53: return 'tk_slashdoblepunto'; 
break;
case 54: return 25; 
break;
case 55: return 27; 
break;
case 56: return 40; 
break;
case 57: return 36; 
break;
case 58: return 73;  
break;
case 59: return 16;  
break;
case 60: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 76; 
break;
case 61: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 77; 
break;
case 62: return 33; 
break;
case 63: return 42; 
break;
case 64: return 44; 
break;
case 65: return 10; 
break;
case 66: return 12; 
break;
case 67:/* skip whitespace */
break;
case 68: /*Los Ignoramos*/   
break;
case 69: return 5;       
break;
case 70:  console.log("ERROR: "+yy_.yytext); 
break;
}
},
rules: [/^(?:(\$)([a-zA-ZáéíúóàèìòÁÉÍÓÚÀÈÌÒÙñÑ])[a-zA-Z0-9áéíúóàèìòÁÉÍÓÚÀÈÌÒÙñÑ_]*)/i,/^(?:number\b)/i,/^(?:substring\b)/i,/^(?:upper-case\b)/i,/^(?:lower-case\b)/i,/^(?:string\b)/i,/^(?:node\(\))/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:ancestor-or-self::)/i,/^(?:ancestor::)/i,/^(?:attribute::)/i,/^(?:child::)/i,/^(?:descendant-or-self::)/i,/^(?:descendant::)/i,/^(?:following-sibling::)/i,/^(?:following::)/i,/^(?:parent::)/i,/^(?:preceding-sibling::)/i,/^(?:preceding::)/i,/^(?:self::)/i,/^(?:div\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:to\b)/i,/^(?:let\b)/i,/^(?:where\b)/i,/^(?:return\b)/i,/^(?:order\b)/i,/^(?:by\b)/i,/^(?:@\*)/i,/^(?:@)/i,/^(?:\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:!=)/i,/^(?::=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:,)/i,/^(?:\?)/i,/^(?:\.\.\/\/)/i,/^(?:\.\/\/)/i,/^(?:\.\.\/)/i,/^(?:\.\/)/i,/^(?:\/\.)/i,/^(?:\/\.\.)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:([0-9]+["."][0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:([a-zA-ZáéíúóàèìòÁÉÍÓÚÀÈÌÒÙñÑ])[a-zA-Z0-9áéíúóàèìòÁÉÍÓÚÀÈÌÒÙñÑ_]*)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\s+)/i,/^(?:[ \t\r\n\f])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XQueryAsc;
exports.Parser = XQueryAsc.Parser;
exports.parse = function () { return XQueryAsc.parse.apply(XQueryAsc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}