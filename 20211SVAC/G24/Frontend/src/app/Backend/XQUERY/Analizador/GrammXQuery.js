/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GrammXQuery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,8],$V1=[1,6],$V2=[1,7],$V3=[5,9,54],$V4=[1,10],$V5=[5,7,9,54],$V6=[1,13],$V7=[1,26],$V8=[1,23],$V9=[1,22],$Va=[1,25],$Vb=[1,29],$Vc=[1,27],$Vd=[1,30],$Ve=[20,42,44,45],$Vf=[1,55],$Vg=[1,54],$Vh=[1,47],$Vi=[1,46],$Vj=[1,36],$Vk=[1,37],$Vl=[1,38],$Vm=[1,39],$Vn=[1,40],$Vo=[1,41],$Vp=[1,42],$Vq=[1,43],$Vr=[1,44],$Vs=[1,45],$Vt=[1,48],$Vu=[1,49],$Vv=[1,50],$Vw=[1,51],$Vx=[1,52],$Vy=[1,53],$Vz=[1,59],$VA=[5,7,9,11,12,14,20,27,32,40,42,44,45,54,57,59,60,61,62,68,70,72,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],$VB=[2,90],$VC=[2,92],$VD=[1,61],$VE=[5,7,9,20,32,40,42,44,45,54],$VF=[1,77],$VG=[1,71],$VH=[1,74],$VI=[1,75],$VJ=[1,76],$VK=[1,78],$VL=[1,88],$VM=[1,87],$VN=[1,86],$VO=[1,113],$VP=[1,111],$VQ=[1,112],$VR=[1,114],$VS=[1,115],$VT=[5,7,9,11,12,14,20,27,32,40,42,44,45,54,57,61,62,68,72,75,76,77,80,81,82],$VU=[14,20],$VV=[5,7,9,11,12,14,20,27,32,40,42,44,45,54,57,59,60,61,62,68,72,75,76,77,78,81,82],$VW=[5,7,9,11,12,14,20,27,32,40,42,44,45,54,57,61,62,68,72,75,76,77,81,82],$VX=[11,12,27,57,76,79,81,82],$VY=[5,7,9,32,40,54,68],$VZ=[2,75],$V_=[1,130],$V$=[5,7,9,11,12,14,20,27,32,40,42,44,45,54,57,59,60,61,62,68,72,75,76,77,80,81,82,83,84,87,88,89,90,91,92,94],$V01=[5,7,9,11,12,14,20,27,32,40,42,44,45,54,57,59,60,61,62,68,72,75,76,77,80,81,82,83,84,85,86,87,88,89,90,91,92,94],$V11=[5,7,9,11,12,14,20,27,32,40,42,44,45,54,57,59,60,61,62,68,72,75,76,77,80,81,82,87,88,94],$V21=[5,7,9,11,12,14,20,27,32,40,42,44,45,54,57,59,60,61,62,68,72,75,76,77,80,81,82,87,88,89,90,91,92,94],$V31=[11,27,57],$V41=[5,7,9,14,20,32,40,44,45,54,59,60,62,68],$V51=[1,150],$V61=[2,26],$V71=[1,151],$V81=[1,152],$V91=[1,153],$Va1=[1,154],$Vb1=[1,163],$Vc1=[25,30],$Vd1=[1,178],$Ve1=[9,32,40,54],$Vf1=[27,42,44,45],$Vg1=[2,49],$Vh1=[1,206],$Vi1=[9,11,12,27,50,53,57,76,81,82];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"FUNCTION":4,"EOF":5,"METODOS":6,"RDECLARE":7,"RFUNCTION":8,"LOCAL":9,"DOSPUNTOS":10,"IDENTIFICADOR":11,"PARIZQ":12,"PARAMETROS":13,"PARDER":14,"TIPO":15,"BLOQUE":16,"PTCOMA":17,"LLAMADAFUNCION":18,"LET":19,"COMA":20,"DECLARACIONES":21,"VARIABLE":22,"AS":23,"XS":24,"QUESTION":25,"L_PARAMETROSINTERNOS":26,"DOLAR":27,"TIPOPARAMETRO":28,"L_CONSULTAS":29,"LLAVEIZQ":30,"INSTRUCCIONES":31,"LLAVEDER":32,"INT":33,"FLOAT":34,"CHAR":35,"DOUBLE":36,"INSTRUCCION":37,"FORSIMPLE":38,"FORCOMPUESTO":39,"RFOR":40,"CONDICIONCOMPUESTA":41,"RWHERE":42,"CONDICION":43,"RORDERBY":44,"RRETURN":45,"RETORNO":46,"CONDICIONSIMPLE":47,"CONJUNCION":48,"UNION":49,"RIN":50,"L_VARIABLES":51,"L_IN":52,"RAT":53,"RLET":54,"LETDOSPUNTOS":55,"EXPRESION":56,"ENTERO":57,"CONECTOR":58,"AND":59,"OR":60,"PUNTO":61,"RTO":62,"FUNCIONES":63,"IF":64,"ASIGNACION":65,"RIF":66,"RTHEN":67,"RELSE":68,"RDATA":69,"IGUAL":70,"CONSULTA":71,"BARRA":72,"OPCIONESCONSULT":73,"PREDICADO":74,"DOBLEBARRA":75,"ARROBA":76,"DOBLEPUNTO":77,"ASTERISCO":78,"CORIZQ":79,"CORDER":80,"CADENA":81,"RLAST":82,"MAS":83,"MENOS":84,"RDIV":85,"MODULO":86,"IGUALACION":87,"DIFERENCIACION":88,"MENORIGUAL":89,"MAYORIGUAL":90,"MENORQUE":91,"MAYORQUE":92,"REQUALS":93,"RNOTEQUALS":94,"RMENORIGUAL":95,"RMAYORIGUAL":96,"RMENORQUE":97,"RMAYORQUE":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"RDECLARE",8:"RFUNCTION",9:"LOCAL",10:"DOSPUNTOS",11:"IDENTIFICADOR",12:"PARIZQ",14:"PARDER",17:"PTCOMA",20:"COMA",23:"AS",24:"XS",25:"QUESTION",27:"DOLAR",30:"LLAVEIZQ",32:"LLAVEDER",33:"INT",34:"FLOAT",35:"CHAR",36:"DOUBLE",40:"RFOR",42:"RWHERE",44:"RORDERBY",45:"RRETURN",50:"RIN",53:"RAT",54:"RLET",55:"LETDOSPUNTOS",57:"ENTERO",59:"AND",60:"OR",61:"PUNTO",62:"RTO",66:"RIF",67:"RTHEN",68:"RELSE",69:"RDATA",70:"IGUAL",72:"BARRA",75:"DOBLEBARRA",76:"ARROBA",77:"DOBLEPUNTO",78:"ASTERISCO",79:"CORIZQ",80:"CORDER",81:"CADENA",82:"RLAST",83:"MAS",84:"MENOS",85:"RDIV",86:"MODULO",87:"IGUALACION",88:"DIFERENCIACION",89:"MENORIGUAL",90:"MAYORIGUAL",91:"MENORQUE",92:"MAYORQUE",93:"REQUALS",94:"RNOTEQUALS",95:"RMENORIGUAL",96:"RMAYORIGUAL",97:"RMENORQUE",98:"RMAYORQUE"},
productions_: [0,[3,2],[4,2],[4,1],[6,12],[6,11],[6,1],[6,1],[6,0],[13,3],[13,1],[21,6],[26,4],[26,2],[28,1],[28,1],[16,3],[16,2],[15,5],[15,5],[15,5],[15,5],[15,1],[15,1],[15,1],[15,1],[15,0],[31,2],[31,1],[37,1],[37,1],[37,1],[37,1],[39,8],[39,6],[39,6],[39,4],[38,8],[38,6],[38,6],[38,4],[41,3],[41,1],[41,0],[47,2],[47,1],[49,3],[48,2],[51,3],[51,1],[19,6],[52,1],[52,6],[52,5],[52,1],[18,6],[18,5],[22,2],[58,1],[58,1],[58,1],[58,1],[58,1],[46,1],[46,1],[46,1],[46,1],[46,1],[64,8],[64,9],[63,4],[65,3],[65,5],[43,2],[43,3],[43,1],[29,2],[29,1],[71,3],[71,2],[71,2],[71,2],[71,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[74,3],[56,1],[56,3],[56,1],[56,1],[56,1],[56,2],[56,2],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 27: case 44: case 76:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 10: case 13: case 28: case 45: case 49: case 77:
this.$=[$$[$0]];
break;
case 4:
this.$=new funciones.default($$[$0-6],$$[$0-4],$$[$0-2],$$[$0-1],_$[$0-11].first_line,_$[$0-11].first_column);
break;
case 5:
this.$=new funciones.default($$[$0-5],null,$$[$0-2],$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 6: case 7: case 14: case 15: case 22: case 23: case 24: case 25: case 29: case 30: case 31: case 32: case 42: case 51: case 54: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 75: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 94:
this.$=$$[$0]
break;
case 8:
this.$=""
break;
case 9: case 48:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 11:
this.$=new declaracion.default($$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 12:
$$[$0-3].push($$[$0]); this.$=$$[$0-3];
break;
case 16: case 18: case 19: case 20: case 21: case 89: case 91:
this.$=$$[$0-1]
break;
case 17:
this.$=null
break;
case 33:
this.$=$$[$0-7]+$$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 34: case 35: case 52:
this.$=$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 36: case 70:
this.$=$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 37:
this.$=new theforsimple.default($$[$0-6],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-4],$$[$0-2]);
break;
case 38:
this.$=new theforsimple.default($$[$0-4],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-2],[]);
break;
case 39:
this.$=new theforsimple.default($$[$0-4],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column,[],$$[$0-2]);
break;
case 40:
this.$=new theforsimple.default($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column,[],[]);
break;
case 41:
this.$=$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 46:
this.$=new condicionsimple.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 47: case 57: case 80: case 81:
this.$=$$[$0-1]+$$[$0]
break;
case 50:
this.$=new thelet.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 53:
this.$=$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 55:
this.$=new llamada.default($$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 56:
this.$=new llamada.default($$[$0-2],null,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 68:
this.$=new theif.default($$[$0-5],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-2],$$[$0])
break;
case 69:
this.$=new theif.default($$[$0-6],_$[$0-8].first_line,_$[$0-8].first_column,$$[$0-3],[])
break;
case 71: case 109:
this.$=new asignacion.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 72:
this.$=new asignacion.default($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 73:
this.$=new condicionsimple.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 74:
this.$=new condicion.default($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 78:
this.$ = new barrasnodo.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column, $$[$0-1]);
break;
case 79:
this.$ = new barrasnodo.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column, null);
break;
case 90:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 92:
this.$ = new identificador.default($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 93:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.CADENA),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 95:
this.$ = new atributosexpresion.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 96:
this.$ = new identificadorpredicado.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 97:
this.$=$$[$0-2]+"()"
break;
case 98:
this.$=new aritmetica.default(aritmetica.Operadores.SUMA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 99:
this.$=new aritmetica.default(aritmetica.Operadores.RESTA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 100:
this.$=new aritmetica.default(aritmetica.Operadores.DIVISION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 101:
this.$=new aritmetica.default(aritmetica.Operadores.MODULADOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 102: case 110:
this.$=new relacional.default(relacional.Relacionales.IGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 103: case 111:
this.$=new relacional.default(relacional.Relacionales.DIFERENTE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 104: case 112:
this.$=new relacional.default(relacional.Relacionales.MENORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 105: case 113:
this.$=new relacional.default(relacional.Relacionales.MAYORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 106: case 114:
this.$=new relacional.default(relacional.Relacionales.MENORQUE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 107: case 115:
this.$=new relacional.default(relacional.Relacionales.MAYORQUE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 108:
this.$=new aritmetica.default(aritmetica.Operadores.MULTIPLICACION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 116:
this.$=new logica.default(logica.Logicas.OR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 117:
this.$=new logica.default(logica.Logicas.AND,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
}
},
table: [o([5,7],$V0,{3:1,4:2,6:3,18:4,19:5,9:$V1,54:$V2}),{1:[3]},{5:[1,8],6:9,7:$V0,9:$V1,18:4,19:5,54:$V2},o($V3,[2,3],{7:$V4}),o($V5,[2,6]),o($V5,[2,7]),{10:[1,11]},{22:12,27:$V6},{1:[2,1]},o($V3,[2,2],{7:$V4}),{8:[1,14]},{11:[1,15]},{55:[1,16]},{11:[1,17]},{9:[1,18]},{12:[1,19]},{9:$V1,11:$V7,12:$V8,18:24,22:28,27:$V6,50:$V9,52:20,56:21,57:$Va,76:$Vb,81:$Vc,82:$Vd},o([5,7,9,11,12,14,20,23,27,32,40,42,44,45,50,53,54,55,57,59,60,61,62,68,70,72,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],[2,57]),{10:[1,31]},{14:[1,33],26:32,27:[1,34]},{45:[1,35]},o($Ve,[2,51],{59:$Vf,60:$Vg,70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),{12:[1,56]},{11:$V7,12:$Vz,22:28,27:$V6,56:58,57:[1,57],76:$Vb,81:$Vc,82:$Vd},o($Ve,[2,54]),o($VA,$VB),o($VA,$VC,{74:60,79:$VD}),o($VA,[2,93]),o($VA,[2,94]),{11:$V7,12:$Vz,22:28,27:$V6,56:62,57:$Va,76:$Vb,81:$Vc,82:$Vd},{12:[1,63]},{11:[1,64]},{14:[1,65],20:[1,66]},o($VE,[2,56]),{11:$V7,12:$Vz,22:69,27:$V6,28:67,29:68,56:73,57:$Va,61:$VF,71:70,72:$VG,73:72,75:$VH,76:$VI,77:$VJ,78:$VK,81:$Vc,82:$Vd},{11:$VL,12:$Vz,22:85,27:$V6,43:80,46:79,56:84,57:$Va,63:81,64:82,65:83,66:$VM,69:$VN,76:$Vb,81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:89,57:$Va,76:$Vb,81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:90,57:$Va,76:$Vb,81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:91,57:$Va,76:$Vb,81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:92,57:$Va,76:$Vb,81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:93,57:$Va,76:$Vb,81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:94,57:$Va,76:$Vb,81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:95,57:$Va,76:$Vb,81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:96,57:$Va,76:$Vb,81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:97,57:$Va,76:$Vb,81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:98,57:$Va,76:$Vb,81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:99,57:$Va,76:$Vb,81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:100,57:$Va,76:$Vb,81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:101,57:$Va,76:$Vb,81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:102,57:$Va,76:$Vb,81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:103,57:$Va,76:$Vb,81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:104,57:$Va,76:$Vb,81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:105,57:$Va,76:$Vb,81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:106,57:$Va,76:$Vb,81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:107,57:$Va,76:$Vb,81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:108,57:$Va,76:$Vb,81:$Vc,82:$Vd},{57:[1,109]},o([14,70,78,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],$VB,{58:110,20:$VO,59:$VP,60:$VQ,61:$VR,62:$VS}),{14:[1,116],59:$Vf,60:$Vg,70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy},{11:$V7,12:$Vz,22:28,27:$V6,56:58,57:$Va,76:$Vb,81:$Vc,82:$Vd},o($VA,[2,96]),{11:$V7,12:$Vz,22:28,27:$V6,56:117,57:$Va,76:$Vb,81:$Vc,82:$Vd},o($VT,[2,95],{59:$Vf,60:$Vg,70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),{14:[1,118]},{12:[1,119]},o($VE,[2,55]),{27:[1,120]},o($VU,[2,13]),o($VU,[2,14],{22:28,73:72,56:73,71:121,11:$V7,12:$Vz,27:$V6,57:$Va,61:$VF,72:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,81:$Vc,82:$Vd}),o([11,12,14,20,27,57,59,60,61,70,72,75,76,77,78,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],[2,15]),o($VV,[2,77]),{11:$V7,12:$Vz,22:28,27:$V6,56:123,57:$Va,72:[1,122],76:$Vb,79:[2,83],81:$Vc,82:$Vd},{11:$V7,12:$Vz,22:28,27:$V6,56:124,57:$Va,74:125,76:$Vb,79:$VD,81:$Vc,82:$Vd},o($VW,[2,82],{59:$Vf,60:$Vg,70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o($VX,[2,84]),{11:$V7,12:$Vz,22:28,27:$V6,56:62,57:$Va,76:$Vb,79:[2,85],81:$Vc,82:$Vd},o($VX,[2,86]),o($VX,[2,87]),o($VX,[2,88]),o([5,7,9,32,40,54],[2,50]),o($VY,[2,63],{58:126,20:$VO,59:$VP,60:$VQ,61:$VR,62:$VS}),o($VY,[2,64]),o($VY,[2,65]),o($VY,[2,66]),o($VY,[2,67],{59:$Vf,60:$Vg,70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o([5,7,9,20,32,40,54,59,60,62,68,70,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],$VZ,{22:28,71:70,73:72,56:73,29:127,11:$V7,12:$Vz,27:$V6,57:$Va,61:$VF,72:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,81:$Vc,82:$Vd}),{12:[1,128]},{12:[1,129]},o([5,7,9,32,40,54,59,60,68,78,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],$VC,{74:60,70:$V_,79:$VD}),o($V$,[2,98],{70:$Vh,78:$Vi,85:$Vl,86:$Vm,93:$Vt,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o($V$,[2,99],{70:$Vh,78:$Vi,85:$Vl,86:$Vm,93:$Vt,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o($V01,[2,100],{70:$Vh,78:$Vi,93:$Vt,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o($V01,[2,101],{70:$Vh,78:$Vi,93:$Vt,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o($V11,[2,102],{70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o($V11,[2,103],{70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o($V21,[2,104],{70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,93:$Vt,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o($V21,[2,105],{70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,93:$Vt,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o($V21,[2,106],{70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,93:$Vt,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o($V21,[2,107],{70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,93:$Vt,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o($VT,[2,108],{59:$Vf,60:$Vg,70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o($VT,[2,109],{59:$Vf,60:$Vg,70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o($VT,[2,110],{59:$Vf,60:$Vg,70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o($V11,[2,111],{70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o($VT,[2,112],{59:$Vf,60:$Vg,70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o($VT,[2,113],{59:$Vf,60:$Vg,70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o($VT,[2,114],{59:$Vf,60:$Vg,70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o($VT,[2,115],{59:$Vf,60:$Vg,70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o([5,7,9,11,12,14,20,27,32,40,42,44,45,54,57,60,61,62,68,72,75,76,77,80,81,82],[2,116],{59:$Vf,70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o([5,7,9,11,12,14,20,27,32,40,42,44,45,54,57,59,60,61,62,68,72,75,76,77,80,81,82],[2,117],{70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),{20:$VO,58:131,59:$VP,60:$VQ,61:$VR,62:$VS},{57:[1,132]},o($V31,[2,58]),o($V31,[2,59]),o($V31,[2,60]),o($V31,[2,61]),o($V31,[2,62]),o($VA,[2,91]),{59:$Vf,60:$Vg,70:$Vh,78:$Vi,80:[1,133],83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy},o($VA,[2,97]),{13:134,14:[1,135],21:136,22:137,27:$V6},{11:$V7,12:$Vz,22:69,27:$V6,28:138,29:68,56:73,57:$Va,61:$VF,71:70,72:$VG,73:72,75:$VH,76:$VI,77:$VJ,78:$VK,81:$Vc,82:$Vd},o($VV,[2,76]),{11:$V7,12:$Vz,22:28,27:$V6,56:139,57:$Va,76:$Vb,81:$Vc,82:$Vd},o($VW,[2,79],{59:$Vf,60:$Vg,70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o($VW,[2,80],{59:$Vf,60:$Vg,70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o($VV,[2,81]),{22:141,27:$V6,43:140},o($V41,[2,73],{22:28,73:72,56:73,71:121,11:$V7,12:$Vz,27:$V6,57:$Va,61:$VF,72:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,81:$Vc,82:$Vd}),{22:141,27:$V6,43:142},{22:141,27:$V6,43:143},{22:144,27:$V6},{57:[1,145]},{14:[1,146]},o($VA,[2,89]),{14:[1,147],20:[1,148]},{15:149,23:$V51,30:$V61,33:$V71,34:$V81,35:$V91,36:$Va1},o($VU,[2,10]),{23:[1,155]},o($VU,[2,12]),o($VW,[2,78],{59:$Vf,60:$Vg,70:$Vh,78:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy}),o([5,7,9,14,32,40,44,45,54,68],[2,74],{58:126,20:$VO,59:$VP,60:$VQ,61:$VR,62:$VS}),o($V41,$VZ,{22:28,71:70,73:72,56:73,29:127,11:$V7,12:$Vz,27:$V6,57:$Va,61:$VF,72:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,81:$Vc,82:$Vd}),{14:[1,156],20:$VO,58:126,59:$VP,60:$VQ,61:$VR,62:$VS},{14:[1,157],20:$VO,58:126,59:$VP,60:$VQ,61:$VR,62:$VS},o($VY,[2,71],{58:158,20:$VO,59:$VP,60:$VQ,61:$VR,62:$VS}),{14:[1,159]},o($Ve,[2,53]),{15:160,23:$V51,30:$V61,33:$V71,34:$V81,35:$V91,36:$Va1},{21:161,22:137,27:$V6},{16:162,30:$Vb1},{24:[1,164]},o($Vc1,[2,22]),o($Vc1,[2,23]),o($Vc1,[2,24]),o($Vc1,[2,25]),{24:[1,165]},o($VY,[2,70]),{67:[1,166]},{11:[1,168],65:167},o($Ve,[2,52]),{16:169,30:$Vb1},o($VU,[2,9]),{17:[1,170]},{9:$V1,18:177,19:176,31:171,32:[1,172],37:173,38:174,39:175,40:$Vd1,54:$V2},{10:[1,179]},{10:[1,180]},{11:$VL,12:$Vz,22:85,27:$V6,43:80,46:181,56:84,57:$Va,63:81,64:82,65:83,66:$VM,69:$VN,76:$Vb,81:$Vc,82:$Vd},o($VY,[2,72]),{70:$V_},{17:[1,182]},o($V5,[2,5]),{9:$V1,18:177,19:176,32:[1,183],37:184,38:174,39:175,40:$Vd1,54:$V2},{17:[2,17]},o($Ve1,[2,28]),o($Ve1,[2,29]),o($Ve1,[2,30]),o($Ve1,[2,31]),o($Ve1,[2,32]),o($Ve,[2,43],{47:185,41:186,49:187,48:188,22:189,51:190,27:$V6}),{33:[1,191],34:[1,192],35:[1,193],36:[1,194]},{15:195,23:$V51,25:$V61,33:$V71,34:$V81,35:$V91,36:$Va1},{68:[1,196]},o($V5,[2,4]),{17:[2,16]},o($Ve1,[2,27]),{22:201,27:$V6,42:[1,197],44:[1,198],45:[1,199],49:200},{20:[1,205],42:[1,202],44:[1,203],45:[1,204]},o($Vf1,[2,45]),o($Ve,[2,42]),o([9,11,12,27,53,57,76,81,82],$Vg1,{50:$Vh1}),{9:$V1,11:$V7,12:$V8,18:24,22:28,27:$V6,50:$V9,52:207,53:[1,208],56:21,57:$Va,76:$Vb,81:$Vc,82:$Vd},{25:[1,209]},{25:[1,210]},{25:[1,211]},{25:[1,212]},{25:[1,213]},{11:$VL,12:[1,215],22:85,27:$V6,43:80,46:214,56:84,57:$Va,63:81,64:82,65:83,66:$VM,69:$VN,76:$Vb,81:$Vc,82:$Vd},{22:141,27:$V6,43:216},{22:141,27:$V6,43:217},{11:$VL,12:$Vz,22:85,27:$V6,43:80,46:218,56:84,57:$Va,63:81,64:82,65:83,66:$VM,69:$VN,76:$Vb,81:$Vc,82:$Vd},o($Vf1,[2,44]),{50:$Vh1},{22:141,27:$V6,43:219},{22:141,27:$V6,43:220},{11:$VL,12:$Vz,22:85,27:$V6,43:80,46:221,56:84,57:$Va,63:81,64:82,65:83,66:$VM,69:$VN,76:$Vb,81:$Vc,82:$Vd},{22:223,27:$V6,48:222,51:190},{11:$V7,12:$Vz,22:28,27:$V6,29:224,56:73,57:$Va,61:$VF,71:70,72:$VG,73:72,75:$VH,76:$VI,77:$VJ,78:$VK,81:$Vc,82:$Vd},o($Ve,[2,47]),{22:225,27:$V6},o($Vc1,[2,18]),o($Vc1,[2,19]),o($Vc1,[2,20]),o($Vc1,[2,21]),o($VU,[2,11]),o($VY,[2,68]),{11:$V7,12:$Vz,14:[1,226],22:28,27:$V6,56:58,57:$Va,76:$Vb,81:$Vc,82:$Vd},{20:$VO,44:[1,227],45:[1,228],58:126,59:$VP,60:$VQ,61:$VR,62:$VS},{20:$VO,45:[1,229],58:126,59:$VP,60:$VQ,61:$VR,62:$VS},o($Ve1,[2,40]),{20:$VO,44:[1,230],45:[1,231],58:126,59:$VP,60:$VQ,61:$VR,62:$VS},{20:$VO,45:[1,232],58:126,59:$VP,60:$VQ,61:$VR,62:$VS},o($Ve1,[2,36]),o($Ve,[2,41]),o($Vi1,$Vg1),o([42,44,45],[2,46],{22:28,73:72,56:73,71:121,11:$V7,12:$Vz,27:$V6,57:$Va,61:$VF,72:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,81:$Vc,82:$Vd}),o($Vi1,[2,48]),o($VY,[2,69]),{22:141,27:$V6,43:233},{11:$VL,12:$Vz,22:85,27:$V6,43:80,46:234,56:84,57:$Va,63:81,64:82,65:83,66:$VM,69:$VN,76:$Vb,81:$Vc,82:$Vd},{11:$VL,12:$Vz,22:85,27:$V6,43:80,46:235,56:84,57:$Va,63:81,64:82,65:83,66:$VM,69:$VN,76:$Vb,81:$Vc,82:$Vd},{22:141,27:$V6,43:236},{11:$VL,12:$Vz,22:85,27:$V6,43:80,46:237,56:84,57:$Va,63:81,64:82,65:83,66:$VM,69:$VN,76:$Vb,81:$Vc,82:$Vd},{11:$VL,12:$Vz,22:85,27:$V6,43:80,46:238,56:84,57:$Va,63:81,64:82,65:83,66:$VM,69:$VN,76:$Vb,81:$Vc,82:$Vd},{20:$VO,45:[1,239],58:126,59:$VP,60:$VQ,61:$VR,62:$VS},o($Ve1,[2,38]),o($Ve1,[2,39]),{20:$VO,45:[1,240],58:126,59:$VP,60:$VQ,61:$VR,62:$VS},o($Ve1,[2,34]),o($Ve1,[2,35]),{11:$VL,12:$Vz,22:85,27:$V6,43:80,46:241,56:84,57:$Va,63:81,64:82,65:83,66:$VM,69:$VN,76:$Vb,81:$Vc,82:$Vd},{11:$VL,12:$Vz,22:85,27:$V6,43:80,46:242,56:84,57:$Va,63:81,64:82,65:83,66:$VM,69:$VN,76:$Vb,81:$Vc,82:$Vd},o($Ve1,[2,37]),o($Ve1,[2,33])],
defaultActions: {8:[2,1],172:[2,17],183:[2,16]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const theforcompuesto = require('./Instrucciones/ForCompuesto');
    const theforsimple = require('./Instrucciones/ForSimple');
    const atributosexpresion = require("../../XPATH/Analizador/Instrucciones/AtributosExpresion")
    const identificadorpredicado = require("../../XPATH/Analizador/Instrucciones/IdentificadorPredicado")
    const aritmetica= require("./Expresiones/Aritmetica");
    const logica = require ("./Expresiones/Logica");
    const relacional = require("./Expresiones/Relacional");
    const barrasnodo= require("../../XPATH/Analizador/Instrucciones/BarrasNodo")
    const identificador= require("./Expresiones/Identificador");
    const nativo= require("./Expresiones/Nativo");
    const asignacion= require("./Instrucciones/Asignacion")
    const funciones= require("./Instrucciones/Funciones")
    const declaracion= require("./Instrucciones/Declaracion")
    const llamada= require("./Instrucciones/Llamada")
    const theif = require('./Instrucciones/If')
    const thelet=require('./Instrucciones/Let')
    const Tipo= require("./Simbolos/Tipo");
    const condicionsimple= require("./Instrucciones/CondicionSimple");
    const condicion= require("./Instrucciones/Condicion");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:
break;
case 6:return 23;
break;
case 7:return 24;
break;
case 8:return 40;
break;
case 9:return 54;
break;
case 10:return 42;
break;
case 11:return 44;
break;
case 12:return 45;
break;
case 13:return 50;
break;
case 14:return 'RDOC';
break;
case 15:return 66;
break;
case 16:return 68;
break;
case 17:return 67;
break;
case 18:return 93;
break;
case 19:return 94;
break;
case 20:return 97;
break;
case 21:return 95;
break;
case 22:return 98;
break;
case 23:return 96;
break;
case 24:return 53;
break;
case 25:return 62;
break;
case 26:return 7;
break;
case 27:return 8;
break;
case 28:return 85;
break;
case 29:return 60;
break;
case 30:return 59;
break;
case 31:return 86;
break;
case 32:return 'RNODO';
break;
case 33:return 'RTEXT';
break;
case 34:return 69;
break;
case 35:return 82;
break;
case 36:return 9;
break;
case 37:return 33
break;
case 38:return 36
break;
case 39:return 34 
break;
case 40:return 35
break;
case 41:return 'FUPPER';
break;
case 42:return 'FSUBS';
break;
case 43:return 78;
break;
case 44:return 12;
break;
case 45:return 14;    
break;
case 46:return 77;
break;
case 47:return 61;
break;
case 48:return 75;
break;
case 49:return 72;
break;
case 50:return 79;
break;
case 51:return 80;
break;
case 52:return 27;
break;
case 53:return 90;
break;
case 54:return 'MENORQUECIERRE';
break;
case 55:return 89;
break;
case 56:return 91;
break;
case 57:return 92;
break;
case 58:return 30;
break;
case 59:return 32;
break;
case 60:return 88;
break;
case 61:return 70;
break;
case 62:return 87;
break;
case 63:return 83;
break;
case 64:return 84;
break;
case 65:return 'MULTIPLICACION';
break;
case 66:return 'POTENCIA';
break;
case 67:return 86;
break;
case 68:return 'POTENCIA';
break;
case 69:return 76;
break;
case 70:return 20;
break;
case 71:return 55;
break;
case 72:return 10;
break;
case 73:return 17;
break;
case 74:return 25;
break;
case 75: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 81; 
break;
case 76: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 'QUOTE'; 
break;
case 77:return 11;
break;
case 78:return 57;
break;
case 79:return 5
break;
case 80:console.log("Error Lexico");
break;
}
},
rules: [/^(?:[(][:][^:]*[:]+[)])/,/^(?:[ \r\t]+)/,/^(?:\s+)/,/^(?:\n+)/,/^(?:\/\/.*)/,/^(?:[/][][^][]+([^/][^][]+)*[/])/,/^(?:as\b)/,/^(?:xs\b)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order by\b)/,/^(?:return\b)/,/^(?:in\b)/,/^(?:doc\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:then\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:at\b)/,/^(?:to\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:div\b)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:data\b)/,/^(?:last\b)/,/^(?:local\b)/,/^(?:int\b)/,/^(?:decimal\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:upper-case\b)/,/^(?:substring\b)/,/^(?:\*)/,/^(?:\()/,/^(?:\))/,/^(?:\.\.)/,/^(?:\.)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:\[)/,/^(?:\])/,/^(?:\$)/,/^(?:>=)/,/^(?:<\/)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:!=)/,/^(?:=)/,/^(?:==)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\^)/,/^(?:%)/,/^(?:\^)/,/^(?:@)/,/^(?:,)/,/^(?::=)/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:([a-zA-Z_À-ÿ\u00F1\u00D1])[a-zA-Z0-9_^ÑñÀ-ÿ\-\.\u00F1\u00D10-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GrammXQuery;
exports.Parser = GrammXQuery.Parser;
exports.parse = function () { return GrammXQuery.parse.apply(GrammXQuery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}