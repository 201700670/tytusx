/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GrammXQuery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,14],$V1=[1,17],$V2=[1,25],$V3=[1,24],$V4=[1,30],$V5=[1,18],$V6=[1,23],$V7=[1,32],$V8=[1,31],$V9=[1,13],$Va=[1,12],$Vb=[1,14],$Vc=[1,15],$Vd=[1,16],$Ve=[1,28],$Vf=[1,26],$Vg=[1,29],$Vh=[5,9,11,12,49,63,65,67,75,79,80,81,82,83,90,95,96],$Vi=[1,35],$Vj=[5,7,9,11,12,49,63,65,67,75,79,80,81,82,83,90,95,96],$Vk=[5,7,9,11,12,14,38,49,63,65,67,75,77,79,80,81,82,83,90,95,96],$Vl=[1,62],$Vm=[1,61],$Vn=[1,54],$Vo=[1,53],$Vp=[1,43],$Vq=[1,44],$Vr=[1,45],$Vs=[1,46],$Vt=[1,47],$Vu=[1,48],$Vv=[1,49],$Vw=[1,50],$Vx=[1,51],$Vy=[1,52],$Vz=[1,55],$VA=[1,56],$VB=[1,57],$VC=[1,58],$VD=[1,59],$VE=[1,60],$VF=[5,7,9,11,12,14,26,38,49,51,53,54,63,65,67,68,69,70,71,75,77,79,80,81,82,83,84,86,89,90,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112],$VG=[2,119],$VH=[2,121],$VI=[1,65],$VJ=[2,123],$VK=[26,51,53,54],$VL=[1,104],$VM=[5,7,9,11,12,14,26,38,49,51,53,54,63,65,67,70,71,75,77,79,80,81,82,83,86,89,90,91,94,95,96],$VN=[51,53,54,67],$VO=[1,119],$VP=[1,116],$VQ=[2,63],$VR=[1,128],$VS=[1,124],$VT=[1,126],$VU=[1,122],$VV=[1,127],$VW=[1,129],$VX=[1,132],$VY=[1,138],$VZ=[1,139],$V_=[1,140],$V$=[5,7,9,11,12,14,26,38,49,51,53,54,63,65,67,68,69,70,71,75,77,79,80,81,82,83,86,89,90,91,94,95,96,97,98,101,102,103,104,105,106,107,108,109,110,111],$V01=[5,7,9,11,12,14,26,38,49,51,53,54,63,65,67,68,69,70,71,75,77,79,80,81,82,83,86,89,90,91,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111],$V11=[5,7,9,11,12,14,26,38,49,51,53,54,63,65,67,68,69,70,71,75,77,79,80,81,82,83,86,89,90,91,94,95,96,101,102,107,108],$V21=[5,7,9,11,12,14,26,38,49,51,53,54,63,65,67,68,69,70,71,75,77,79,80,81,82,83,86,89,90,91,94,95,96,101,102,103,104,105,106,107,108,109,110,111],$V31=[1,157],$V41=[1,160],$V51=[1,159],$V61=[5,7,9,11,12,14,26,38,49,51,53,54,63,65,67,75,77,79,80,81,82,83,90,95,96],$V71=[5,7,9,11,12,14,26,38,49,51,53,54,63,65,67,68,69,70,71,75,77,79,80,81,82,83,86,89,90,91,92,95,96],$V81=[11,12,65,67,90,93,95,96],$V91=[2,75],$Va1=[2,74],$Vb1=[1,181],$Vc1=[1,182],$Vd1=[5,7,9,14,26,38,49,53,54,63,68,69,71,75,77,79,80,81,82,83],$Ve1=[1,197],$Vf1=[9,11,12,59,62,65,67,70,86,89,90,91,92,95,96],$Vg1=[5,7,9,11,12,14,26,38,49,51,53,54,63,65,67,70,71,75,77,79,80,81,82,83,86,89,90,91,95,96],$Vh1=[14,84,92,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112],$Vi1=[14,26],$Vj1=[1,250],$Vk1=[1,254],$Vl1=[2,37],$Vm1=[1,255],$Vn1=[1,256],$Vo1=[1,257],$Vp1=[1,258],$Vq1=[1,259],$Vr1=[1,266],$Vs1=[14,26,36,39],$Vt1=[9,11,12,38,49,63,65,67,75,90,95,96],$Vu1=[14,26,36],$Vv1=[2,25],$Vw1=[1,294];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"FUNCTION":4,"EOF":5,"METODOS":6,"RDECLARE":7,"RFUNCTION":8,"LOCAL":9,"DOSPUNTOS":10,"IDENTIFICADOR":11,"PARIZQ":12,"PARAMETROS":13,"PARDER":14,"TIPO":15,"BLOQUE":16,"PTCOMA":17,"F_SUBS":18,"F_NUMBER":19,"F_UPPER":20,"F_LOWER":21,"F_STRING":22,"LLAMADAFUNCION":23,"LET":24,"INSTRUCCION":25,"COMA":26,"DECLARACIONES":27,"VARIABLE":28,"AS":29,"XS":30,"OPTIONALQUESTION":31,"L_PARAMETROSINTERNOS":32,"TIPOPARAMETRO":33,"L_CONSULTAS":34,"EXPRESION":35,"LLAVEIZQ":36,"INSTRUCCIONES":37,"LLAVEDER":38,"QUESTION":39,"INT":40,"FLOAT":41,"CHAR":42,"DOUBLE":43,"BOOLEAN":44,"DOUBLER":45,"FORSIMPLE":46,"FORCOMPUESTO":47,"L_IF":48,"RFOR":49,"CONDICIONCOMPUESTA":50,"RWHERE":51,"CONDICION":52,"RORDERBY":53,"RRETURN":54,"RETORNO":55,"CONDICIONSIMPLE":56,"CONJUNCION":57,"UNION":58,"RIN":59,"L_IN":60,"L_VARIABLES":61,"RAT":62,"RLET":63,"LETDOSPUNTOS":64,"ENTERO":65,"CONECTOR":66,"DOLAR":67,"AND":68,"OR":69,"PUNTO":70,"RTO":71,"FUNCIONES":72,"IF":73,"ASIGNACION":74,"RIF":75,"RTHEN":76,"RELSE":77,"RDATA":78,"RNUMBER":79,"RSUBS":80,"RUPPER":81,"RLOWER":82,"RSTRING":83,"IGUAL":84,"CONSULTA":85,"BARRA":86,"OPCIONESCONSULT":87,"PREDICADO":88,"DOBLEBARRA":89,"ARROBA":90,"DOBLEPUNTO":91,"ASTERISCO":92,"CORIZQ":93,"CORDER":94,"CADENA":95,"RLAST":96,"MAS":97,"MENOS":98,"RDIV":99,"MODULO":100,"IGUALACION":101,"DIFERENCIACION":102,"MENORIGUAL":103,"MAYORIGUAL":104,"MENORQUE":105,"MAYORQUE":106,"REQUALS":107,"RNOTEQUALS":108,"RMENORIGUAL":109,"RMAYORIGUAL":110,"RMENORQUE":111,"RMAYORQUE":112,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"RDECLARE",8:"RFUNCTION",9:"LOCAL",10:"DOSPUNTOS",11:"IDENTIFICADOR",12:"PARIZQ",14:"PARDER",17:"PTCOMA",26:"COMA",29:"AS",30:"XS",36:"LLAVEIZQ",38:"LLAVEDER",39:"QUESTION",40:"INT",41:"FLOAT",42:"CHAR",43:"DOUBLE",44:"BOOLEAN",45:"DOUBLER",49:"RFOR",51:"RWHERE",53:"RORDERBY",54:"RRETURN",59:"RIN",62:"RAT",63:"RLET",64:"LETDOSPUNTOS",65:"ENTERO",67:"DOLAR",68:"AND",69:"OR",70:"PUNTO",71:"RTO",75:"RIF",76:"RTHEN",77:"RELSE",78:"RDATA",79:"RNUMBER",80:"RSUBS",81:"RUPPER",82:"RLOWER",83:"RSTRING",84:"IGUAL",86:"BARRA",89:"DOBLEBARRA",90:"ARROBA",91:"DOBLEPUNTO",92:"ASTERISCO",93:"CORIZQ",94:"CORDER",95:"CADENA",96:"RLAST",97:"MAS",98:"MENOS",99:"RDIV",100:"MODULO",101:"IGUALACION",102:"DIFERENCIACION",103:"MENORIGUAL",104:"MAYORIGUAL",105:"MENORQUE",106:"MAYORQUE",107:"REQUALS",108:"RNOTEQUALS",109:"RMENORIGUAL",110:"RMAYORIGUAL",111:"RMENORQUE",112:"RMAYORQUE"},
productions_: [0,[3,2],[4,2],[4,1],[6,12],[6,11],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,0],[13,3],[13,1],[27,6],[32,3],[32,1],[33,1],[33,1],[16,3],[16,2],[31,1],[31,0],[15,5],[15,5],[15,5],[15,5],[15,5],[15,5],[15,1],[15,1],[15,1],[15,1],[15,1],[15,0],[37,2],[37,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[47,8],[47,6],[47,6],[47,4],[46,8],[46,6],[46,6],[46,4],[50,3],[50,1],[50,0],[56,2],[56,1],[58,3],[58,2],[57,2],[61,3],[61,1],[24,6],[24,4],[60,1],[60,6],[60,5],[60,1],[60,1],[23,6],[23,5],[28,2],[66,1],[66,1],[66,1],[66,1],[66,1],[55,1],[55,1],[55,1],[55,1],[55,1],[48,8],[48,15],[48,17],[73,8],[73,9],[72,4],[19,4],[19,5],[18,6],[18,7],[20,4],[20,5],[21,4],[21,5],[22,4],[22,5],[74,3],[74,5],[52,2],[52,3],[52,1],[34,2],[34,1],[85,3],[85,2],[85,2],[85,2],[85,1],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[88,3],[35,1],[35,3],[35,1],[35,1],[35,1],[35,2],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 38: case 57: case 105:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 16: case 19: case 39: case 58: case 63: case 106:
this.$=[$$[$0]];
break;
case 4:
this.$=new funciones.default($$[$0-6],$$[$0-4],$$[$0-2],$$[$0-1],_$[$0-11].first_line,_$[$0-11].first_column);
break;
case 5:
this.$=new funciones.default($$[$0-5],null,$$[$0-2],$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 20: case 21: case 32: case 33: case 34: case 35: case 36: case 40: case 41: case 42: case 43: case 44: case 45: case 55: case 66: case 69: case 70: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 104: case 111: case 112: case 113: case 114: case 115: case 116: case 117:
this.$=$$[$0]
break;
case 14:
this.$=""
break;
case 15: case 18: case 62:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 17:
this.$=new declaracion.default($$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 22: case 26: case 27: case 28: case 29: case 30: case 31: case 60: case 118: case 120:
this.$=$$[$0-1]
break;
case 23:
this.$=null
break;
case 24:
$$[$0]
break;
case 46:
this.$=$$[$0-7]+$$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 47: case 48: case 67:
this.$=$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 49: case 89:
this.$=$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 50:
this.$=new theforsimple.default($$[$0-6],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-4],$$[$0-2]);
break;
case 51:
this.$=new theforsimple.default($$[$0-4],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-2],null);
break;
case 52:
this.$=new theforsimple.default($$[$0-4],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column,null,$$[$0-2]);
break;
case 53:
this.$=new theforsimple.default($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column,null,null);
break;
case 54:
this.$=$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 59:
this.$=new condicionsimple.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 61: case 73: case 109: case 110:
this.$=$$[$0-1]+$$[$0]
break;
case 64:
this.$=new thelet.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 65:
this.$=new thelet.default($$[$0-2],$$[$0],null,_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 68:
this.$=$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 71:
this.$=new llamada.default($$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 72:
this.$=new llamada.default($$[$0-2],null,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 84:
this.$=new thefunctionif.default($$[$0-5],$$[$0-2],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0])
break;
case 85:
this.$=new theifAnidado.default($$[$0-12],$$[$0-9],$$[$0-5],$$[$0-2],$$[$0],_$[$0-14].first_line,_$[$0-14].first_column)
break;
case 86:
this.$=new theifAnidado.default($$[$0-14],$$[$0-11],$$[$0-7],$$[$0-4],$$[$0-1],_$[$0-16].first_line,_$[$0-16].first_column)
break;
case 87:
this.$=new theif.default($$[$0-5],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-2],$$[$0])
break;
case 88:
this.$=new theif.default($$[$0-6],_$[$0-8].first_line,_$[$0-8].first_column,$$[$0-3],null)
break;
case 90:
this.$=new number.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 91:
this.$=new number.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 92:
this.$=new subs.default($$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 93:
this.$=new subs.default($$[$0-4],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column)
break;
case 94:
this.$=new upper.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 95:
this.$=new upper.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 96:
this.$=new lower.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 97:
this.$=new lower.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 98:
this.$=new string.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 99:
this.$=new string.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 100: case 138:
this.$=new asignacion.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 101:
this.$=new asignacion.default($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 102:
this.$=new condicionsimple.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 103:
this.$=new condicion.default($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 107:
this.$ = new barrasnodo.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column, $$[$0-1]);
break;
case 108:
this.$ = new barrasnodo.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column, null);
break;
case 119:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 121:
this.$ = new identificador.default($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 122:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.CADENA),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 123:
this.$ = new variable.default($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 124:
this.$ = new atributosexpresion.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 125:
this.$ = new identificadorpredicado.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 126:
this.$=$$[$0-2]+"()"
break;
case 127:
this.$=new aritmetica.default(aritmetica.Operadores.SUMA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 128:
this.$=new aritmetica.default(aritmetica.Operadores.RESTA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 129:
this.$=new aritmetica.default(aritmetica.Operadores.DIVISION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 130:
this.$=new aritmetica.default(aritmetica.Operadores.MODULADOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 131: case 139:
this.$=new relacional.default(relacional.Relacionales.IGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 132: case 140:
this.$=new relacional.default(relacional.Relacionales.DIFERENTE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 133: case 141:
this.$=new relacional.default(relacional.Relacionales.MENORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 134: case 142:
this.$=new relacional.default(relacional.Relacionales.MAYORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 135: case 143:
this.$=new relacional.default(relacional.Relacionales.MENORQUE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 136: case 144:
this.$=new relacional.default(relacional.Relacionales.MAYORQUE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 137:
this.$=new aritmetica.default(aritmetica.Operadores.MULTIPLICACION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 145:
this.$=new logica.default(logica.Logicas.OR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 146:
this.$=new logica.default(logica.Logicas.AND,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
}
},
table: [o([5,7],$V0,{3:1,4:2,6:3,18:4,19:5,20:6,21:7,22:8,23:9,24:10,25:11,35:19,46:20,47:21,48:22,28:27,9:$V1,11:$V2,12:$V3,49:$V4,63:$V5,65:$V6,67:$V7,75:$V8,79:$V9,80:$Va,81:$Vb,82:$Vc,83:$Vd,90:$Ve,95:$Vf,96:$Vg}),{1:[3]},{5:[1,33],6:34,7:$V0,9:$V1,11:$V2,12:$V3,18:4,19:5,20:6,21:7,22:8,23:9,24:10,25:11,28:27,35:19,46:20,47:21,48:22,49:$V4,63:$V5,65:$V6,67:$V7,75:$V8,79:$V9,80:$Va,81:$Vb,82:$Vc,83:$Vd,90:$Ve,95:$Vf,96:$Vg},o($Vh,[2,3],{7:$Vi}),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),{12:[1,36]},{12:[1,37]},{12:[1,38]},{12:[1,39]},{12:[1,40]},{10:[1,41]},{28:42,67:$V7},o($Vk,[2,40],{68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE}),o($Vk,[2,41]),o($Vk,[2,42]),o($Vk,[2,45]),o($VF,$VG),{11:$V2,12:$V3,28:27,35:63,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},o($VF,$VH,{88:64,93:$VI}),o($VF,[2,122]),o($VF,$VJ),{11:$V2,12:$V3,28:27,35:66,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{12:[1,67]},o($VK,[2,56],{56:68,50:69,58:70,57:71,28:72,61:73,67:$V7}),{12:[1,74]},{11:[1,75]},{1:[2,1]},o($Vh,[2,2],{7:$Vi}),{8:[1,76]},{11:$V2,12:$V3,28:27,35:77,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:78,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:79,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:80,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:81,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:[1,82]},{64:[1,83]},{11:$V2,12:$V3,28:27,35:84,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:85,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:86,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:87,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:88,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:89,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:90,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:91,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:92,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:93,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:94,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:95,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:96,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:97,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:98,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:99,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:100,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:101,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:102,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:103,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{14:$VL,68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE},o($VF,[2,125]),{11:$V2,12:$V3,28:27,35:105,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},o($VM,[2,124],{68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE}),{14:[1,106]},{28:111,51:[1,107],53:[1,108],54:[1,109],58:110,67:$V7},{26:[1,115],51:[1,112],53:[1,113],54:[1,114]},o($VN,[2,58]),o($VK,[2,55]),{9:$V1,11:$V2,12:$VO,23:120,28:27,34:121,35:118,59:$VP,60:117,62:$VQ,65:$V6,67:$V7,70:$VR,85:123,86:$VS,87:125,89:$VT,90:$VU,91:$VV,92:$VW,95:$Vf,96:$Vg},{9:$V1,11:$V2,12:$VO,23:120,28:27,34:121,35:118,59:$VX,60:130,62:[1,131],65:$V6,67:$V7,70:$VR,85:123,86:$VS,87:125,89:$VT,90:$VU,91:$VV,92:$VW,95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:133,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},o([5,7,9,11,12,14,26,29,38,49,51,53,54,59,62,63,64,65,67,68,69,70,71,75,77,79,80,81,82,83,84,86,89,90,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112],[2,73]),{9:[1,134]},{26:$VY,66:135,68:[1,137],69:[1,136],70:$VZ,71:$V_,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE},{14:[1,141],68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE},{14:[1,142],68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE},{14:[1,143],68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE},{14:[1,144],68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE},{12:[1,145]},{9:$V1,11:$V2,12:$VO,23:120,28:27,34:121,35:118,59:$VX,60:146,65:$V6,67:$V7,70:$VR,85:123,86:$VS,87:125,89:$VT,90:$VU,91:$VV,92:$VW,95:$Vf,96:$Vg},o($V$,[2,127],{84:$Vn,92:$Vo,99:$Vr,100:$Vs,112:$VE}),o($V$,[2,128],{84:$Vn,92:$Vo,99:$Vr,100:$Vs,112:$VE}),o($V01,[2,129],{84:$Vn,92:$Vo,112:$VE}),o($V01,[2,130],{84:$Vn,92:$Vo,112:$VE}),o($V11,[2,131],{84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,103:$Vv,104:$Vw,105:$Vx,106:$Vy,109:$VB,110:$VC,111:$VD,112:$VE}),o($V11,[2,132],{84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,103:$Vv,104:$Vw,105:$Vx,106:$Vy,109:$VB,110:$VC,111:$VD,112:$VE}),o($V21,[2,133],{84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,112:$VE}),o($V21,[2,134],{84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,112:$VE}),o($V21,[2,135],{84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,112:$VE}),o($V21,[2,136],{84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,112:$VE}),o($VM,[2,137],{68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE}),o($VM,[2,138],{68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE}),o($V11,[2,139],{84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,103:$Vv,104:$Vw,105:$Vx,106:$Vy,109:$VB,110:$VC,111:$VD,112:$VE}),o($V11,[2,140],{84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,103:$Vv,104:$Vw,105:$Vx,106:$Vy,109:$VB,110:$VC,111:$VD,112:$VE}),o($V21,[2,141],{84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,112:$VE}),o($V21,[2,142],{84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,112:$VE}),o($V21,[2,143],{84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,112:$VE}),o($VM,[2,144],{68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE}),o([5,7,9,11,12,14,26,38,49,51,53,54,63,65,67,69,70,71,75,77,79,80,81,82,83,86,89,90,91,94,95,96],[2,145],{68:$Vl,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE}),o([5,7,9,11,12,14,26,38,49,51,53,54,63,65,67,68,69,70,71,75,77,79,80,81,82,83,86,89,90,91,94,95,96],[2,146],{84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE}),o($VF,[2,120]),{68:$Vl,69:$Vm,84:$Vn,92:$Vo,94:[1,147],97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE},o($VF,[2,126]),{28:149,52:148,67:$V7},{28:149,52:150,67:$V7},{11:$V31,12:$V3,28:158,35:152,52:156,55:151,65:$V6,67:$V7,72:153,73:154,74:155,75:$V41,78:$V51,90:$Ve,95:$Vf,96:$Vg},o($VN,[2,57]),{9:$V1,11:$V2,12:$VO,23:120,28:27,34:121,35:118,59:$VP,60:117,65:$V6,67:$V7,70:$VR,85:123,86:$VS,87:125,89:$VT,90:$VU,91:$VV,92:$VW,95:$Vf,96:$Vg},{28:149,52:161,67:$V7},{28:149,52:162,67:$V7},{11:$V31,12:$V3,28:158,35:152,52:156,55:163,65:$V6,67:$V7,72:153,73:154,74:155,75:$V41,78:$V51,90:$Ve,95:$Vf,96:$Vg},{28:165,57:164,61:73,67:$V7},{11:$V2,12:[1,167],28:27,34:166,35:168,65:$V6,67:$V7,70:$VR,85:123,86:$VS,87:125,89:$VT,90:$VU,91:$VV,92:$VW,95:$Vf,96:$Vg},o($VN,[2,60]),o([5,7,9,11,12,14,26,38,49,51,53,54,63,65,67,70,75,77,79,80,81,82,83,86,89,90,91,95,96],[2,66],{68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE}),{11:$V2,12:$V3,28:27,35:63,65:[1,169],67:$V7,90:$Ve,95:$Vf,96:$Vg},o($V61,[2,69]),o([5,7,9,14,26,38,49,51,53,54,63,75,77,79,80,81,82,83],[2,70],{28:27,87:125,35:168,85:170,11:$V2,12:$V3,65:$V6,67:$V7,70:$VR,86:$VS,89:$VT,90:$VU,91:$VV,92:$VW,95:$Vf,96:$Vg}),{11:$V2,12:$V3,28:27,35:66,65:$V6,67:$V7,90:$Ve,93:[2,114],95:$Vf,96:$Vg},o($V71,[2,106]),{11:$V2,12:$V3,28:27,35:172,65:$V6,67:$V7,86:[1,171],90:$Ve,93:[2,112],95:$Vf,96:$Vg},{11:$V2,12:$V3,28:27,35:173,65:$V6,67:$V7,88:174,90:$Ve,93:$VI,95:$Vf,96:$Vg},o($V81,[2,113]),o($V81,[2,115]),o($V81,[2,116]),o($V81,[2,117]),o($VK,[2,61]),{28:175,67:$V7},{12:[1,176]},{14:[1,177],68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE},{10:[1,178]},{11:$V2,12:$V3,28:27,35:179,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$V91,28:27,35:102,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{11:$V2,12:$Va1,28:27,35:103,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},o($Vj,[2,76]),o($Vj,[2,77]),o($Vj,[2,78]),o($Vj,[2,90],{66:180,26:$VY,68:$Vb1,69:$Vc1,70:$VZ,71:$V_}),o($Vj,[2,94],{66:183,26:$VY,68:$Vb1,69:$Vc1,70:$VZ,71:$V_}),o($Vj,[2,96],{66:184,26:$VY,68:$Vb1,69:$Vc1,70:$VZ,71:$V_}),o($Vj,[2,98],{66:185,26:$VY,68:$Vb1,69:$Vc1,70:$VZ,71:$V_}),{11:$V2,12:$V3,14:[1,187],28:27,32:186,33:188,34:189,35:190,65:$V6,67:$V7,70:$VR,85:123,86:$VS,87:125,89:$VT,90:$VU,91:$VV,92:$VW,95:$Vf,96:$Vg},o($Vk,[2,65],{54:[1,191]}),o($VF,[2,118]),{26:$VY,53:[1,192],54:[1,193],66:194,68:$Vb1,69:$Vc1,70:$VZ,71:$V_},o($Vd1,[2,104],{28:27,85:123,87:125,35:168,34:195,11:$V2,12:$V3,65:$V6,67:$V7,70:$VR,86:$VS,89:$VT,90:$VU,91:$VV,92:$VW,95:$Vf,96:$Vg}),{26:$VY,54:[1,196],66:194,68:$Vb1,69:$Vc1,70:$VZ,71:$V_},o($Vk,[2,53]),o($Vk,[2,79],{68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE}),o($Vk,[2,80]),o($Vk,[2,81]),o($Vk,[2,82]),o($Vk,[2,83],{66:194,26:$VY,68:$Vb1,69:$Vc1,70:$VZ,71:$V_}),o([5,7,9,11,12,14,38,49,63,65,67,68,69,75,77,79,80,81,82,83,90,92,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112],$VH,{88:64,84:$Ve1,93:$VI}),o([5,7,9,14,26,38,49,63,68,69,71,75,77,79,80,81,82,83,84,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112],$VJ,{28:27,85:123,87:125,35:168,34:195,11:$V2,12:$V3,65:$V6,67:$V7,70:$VR,86:$VS,89:$VT,90:$VU,91:$VV,92:$VW,95:$Vf,96:$Vg}),{12:[1,198]},{12:[1,199]},{26:$VY,53:[1,200],54:[1,201],66:194,68:$Vb1,69:$Vc1,70:$VZ,71:$V_},{26:$VY,54:[1,202],66:194,68:$Vb1,69:$Vc1,70:$VZ,71:$V_},o($Vk,[2,49]),o($VK,[2,54]),o($Vf1,$VQ),o([51,53,54],[2,59],{28:27,87:125,35:168,85:170,11:$V2,12:$V3,65:$V6,67:$V7,70:$VR,86:$VS,89:$VT,90:$VU,91:$VV,92:$VW,95:$Vf,96:$Vg}),{11:$V2,12:$V3,28:27,35:63,65:[1,203],67:$V7,90:$Ve,95:$Vf,96:$Vg},o($Vg1,[2,111],{68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE}),o($Vh1,$VG,{66:204,26:$VY,68:$Vb1,69:$Vc1,70:$VZ,71:$V_}),o($V71,[2,105]),{11:$V2,12:$V3,28:27,35:205,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},o($Vg1,[2,108],{68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE}),o($Vg1,[2,109],{68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE}),o($V71,[2,110]),o($Vf1,[2,62]),{65:[1,206]},{76:[1,207]},{11:[1,208]},{14:[1,209],68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE},o($Vj,[2,91]),o($Vj,$Va1),o($Vj,$V91),o($Vj,[2,95]),o($Vj,[2,97]),o($Vj,[2,99]),{14:[1,210],26:[1,211]},o($V61,[2,72]),o($Vi1,[2,19]),o($Vi1,[2,20],{28:27,87:125,35:168,85:170,11:$V2,12:$V3,65:$V6,67:$V7,70:$VR,86:$VS,89:$VT,90:$VU,91:$VV,92:$VW,95:$Vf,96:$Vg}),o([11,12,14,26,65,67,70,86,89,90,91,95,96],[2,21],{68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE}),{11:$V31,12:$V3,28:158,35:152,52:156,55:212,65:$V6,67:$V7,72:153,73:154,74:155,75:$V41,78:$V51,90:$Ve,95:$Vf,96:$Vg},{28:149,52:213,67:$V7},{11:$V31,12:$V3,28:158,35:152,52:156,55:214,65:$V6,67:$V7,72:153,73:154,74:155,75:$V41,78:$V51,90:$Ve,95:$Vf,96:$Vg},{28:149,52:215,67:$V7},o($Vd1,[2,102],{28:27,87:125,35:168,85:170,11:$V2,12:$V3,65:$V6,67:$V7,70:$VR,86:$VS,89:$VT,90:$VU,91:$VV,92:$VW,95:$Vf,96:$Vg}),{11:$V31,12:$V3,28:158,35:152,52:156,55:216,65:$V6,67:$V7,72:153,73:154,74:155,75:$V41,78:$V51,90:$Ve,95:$Vf,96:$Vg},{28:217,67:$V7},{28:149,52:218,67:$V7},{28:149,52:219,67:$V7},{28:149,52:220,67:$V7},{11:$V31,12:$V3,28:158,35:152,52:156,55:221,65:$V6,67:$V7,72:153,73:154,74:155,75:$V41,78:$V51,90:$Ve,95:$Vf,96:$Vg},{11:$V31,12:$V3,28:158,35:152,52:156,55:222,65:$V6,67:$V7,72:153,73:154,74:155,75:$V41,78:$V51,90:$Ve,95:$Vf,96:$Vg},o($Vh1,$VG,{66:223,26:$VY,68:$Vb1,69:$Vc1,70:$VZ,71:$V_}),{65:[1,224]},o($Vg1,[2,107],{68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE}),{26:$VY,66:223,68:$Vb1,69:$Vc1,70:$VZ,71:$V_},{9:$V1,11:$V2,12:$V3,23:227,24:226,25:225,28:27,35:19,46:20,47:21,48:22,49:$V4,63:$V5,65:$V6,67:$V7,75:$V8,90:$Ve,95:$Vf,96:$Vg},{12:[1,228]},o($Vj,[2,92],{66:229,26:$VY,68:$Vb1,69:$Vc1,70:$VZ,71:$V_}),o($V61,[2,71]),{11:$V2,12:$V3,28:27,33:230,34:189,35:190,65:$V6,67:$V7,70:$VR,85:123,86:$VS,87:125,89:$VT,90:$VU,91:$VV,92:$VW,95:$Vf,96:$Vg},o($Vk,[2,64]),{26:$VY,54:[1,231],66:194,68:$Vb1,69:$Vc1,70:$VZ,71:$V_},o($Vk,[2,51]),o([5,7,9,11,12,14,38,49,53,54,63,65,67,75,77,79,80,81,82,83,90,95,96],[2,103],{66:194,26:$VY,68:$Vb1,69:$Vc1,70:$VZ,71:$V_}),o($Vk,[2,52]),o($Vk,[2,100],{66:232,26:$VY,68:$Vb1,69:$Vc1,70:$VZ,71:$V_}),{14:[1,233],26:$VY,66:194,68:$Vb1,69:$Vc1,70:$VZ,71:$V_},{14:[1,234],26:$VY,66:194,68:$Vb1,69:$Vc1,70:$VZ,71:$V_},{26:$VY,54:[1,235],66:194,68:$Vb1,69:$Vc1,70:$VZ,71:$V_},o($Vk,[2,47]),o($Vk,[2,48]),{65:[1,236]},{14:[1,237]},{77:[1,238]},o($Vk,[2,43]),o($Vk,[2,44]),{13:239,14:[1,240],27:241,28:242,67:$V7},o($Vj,[2,93]),o($Vi1,[2,18]),{11:$V31,12:$V3,28:158,35:152,52:156,55:243,65:$V6,67:$V7,72:153,73:154,74:155,75:$V41,78:$V51,90:$Ve,95:$Vf,96:$Vg},{11:[1,245],74:244},o($Vk,[2,89]),{76:[1,246]},{11:$V31,12:$V3,28:158,35:152,52:156,55:247,65:$V6,67:$V7,72:153,73:154,74:155,75:$V41,78:$V51,90:$Ve,95:$Vf,96:$Vg},{14:[1,248]},o($V61,[2,68]),{9:$V1,11:$V2,12:$V3,23:227,24:226,25:249,28:27,35:19,46:20,47:21,48:22,49:$V4,63:$V5,65:$V6,67:$V7,75:$Vj1,90:$Ve,95:$Vf,96:$Vg},{14:[1,251],26:[1,252]},{15:253,29:$Vk1,36:$Vl1,40:$Vm1,41:$Vn1,42:$Vo1,43:$Vp1,44:$Vq1},o($Vi1,[2,16]),{29:[1,260]},o($Vk,[2,50]),o($Vk,[2,101]),{84:$Ve1},{11:$V31,12:$V3,28:158,35:152,52:156,55:261,65:$V6,67:$V7,72:153,73:154,74:155,75:$V41,78:$V51,90:$Ve,95:$Vf,96:$Vg},o($Vk,[2,46]),o($V61,[2,67]),o($Vk,[2,84]),{12:[1,262]},{15:263,29:$Vk1,36:$Vl1,40:$Vm1,41:$Vn1,42:$Vo1,43:$Vp1,44:$Vq1},{27:264,28:242,67:$V7},{16:265,36:$Vr1},{30:[1,267]},o($Vs1,[2,32]),o($Vs1,[2,33]),o($Vs1,[2,34]),o($Vs1,[2,35]),o($Vs1,[2,36]),{30:[1,268]},{77:[1,269]},{11:$V2,12:$V3,28:27,35:270,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{16:271,36:$Vr1},o($Vi1,[2,15]),{17:[1,272]},{9:$V1,11:$V2,12:$V3,23:227,24:226,25:275,28:27,35:19,37:273,38:[1,274],46:20,47:21,48:22,49:$V4,63:$V5,65:$V6,67:$V7,75:$V8,90:$Ve,95:$Vf,96:$Vg},{10:[1,276]},{10:[1,277]},{11:$V31,12:[1,279],28:158,35:152,52:156,55:278,65:$V6,67:$V7,72:153,73:154,74:155,75:$V41,78:$V51,90:$Ve,95:$Vf,96:$Vg},{14:[1,280],68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE},{17:[1,281]},o($Vj,[2,5]),{9:$V1,11:$V2,12:$V3,23:227,24:226,25:283,28:27,35:19,38:[1,282],46:20,47:21,48:22,49:$V4,63:$V5,65:$V6,67:$V7,75:$V8,90:$Ve,95:$Vf,96:$Vg},{17:[2,23]},o($Vt1,[2,39]),{40:[1,284],41:[1,285],42:[1,286],43:[1,287],44:[1,288],45:[1,289]},o([14,26,39],$Vl1,{15:290,29:$Vk1,40:$Vm1,41:$Vn1,42:$Vo1,43:$Vp1,44:$Vq1}),o($Vk,[2,87]),{11:$V2,12:$V3,14:[1,291],28:27,35:63,65:$V6,67:$V7,90:$Ve,95:$Vf,96:$Vg},{76:[1,292]},o($Vj,[2,4]),{17:[2,22]},o($Vt1,[2,38]),o($Vu1,$Vv1,{31:293,39:$Vw1}),o($Vu1,$Vv1,{31:295,39:$Vw1}),o($Vu1,$Vv1,{31:296,39:$Vw1}),o($Vu1,$Vv1,{31:297,39:$Vw1}),o($Vu1,$Vv1,{31:298,39:$Vw1}),o($Vu1,$Vv1,{31:299,39:$Vw1}),o($Vi1,$Vv1,{31:300,39:$Vw1}),o($Vk,[2,88]),{9:$V1,11:$V2,12:$V3,23:227,24:226,25:301,28:27,35:19,46:20,47:21,48:22,49:$V4,63:$V5,65:$V6,67:$V7,75:$V8,90:$Ve,95:$Vf,96:$Vg},o($Vs1,[2,26]),o($Vs1,[2,24]),o($Vs1,[2,27]),o($Vs1,[2,28]),o($Vs1,[2,29]),o($Vs1,[2,30]),o($Vs1,[2,31]),o($Vi1,[2,17]),{77:[1,302]},{9:$V1,11:$V2,12:[1,304],23:227,24:226,25:303,28:27,35:19,46:20,47:21,48:22,49:$V4,63:$V5,65:$V6,67:$V7,75:$Vj1,90:$Ve,95:$Vf,96:$Vg},o($Vk,[2,85]),{9:$V1,11:$V2,12:$V3,23:227,24:226,25:305,28:27,35:306,46:20,47:21,48:22,49:$V4,63:$V5,65:$V6,67:$V7,75:$V8,90:$Ve,95:$Vf,96:$Vg},{14:[1,307]},{14:$VL,68:$Vl,69:$Vm,84:$Vn,92:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE},o($Vk,[2,86])],
defaultActions: {33:[2,1],274:[2,23],282:[2,22]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const theforcompuesto = require('./Instrucciones/ForCompuesto');
    const theforsimple = require('./Instrucciones/ForSimple');
    const atributosexpresion = require("../../XPATH/Analizador/Instrucciones/AtributosSimples")
    const identificadorpredicado = require("../../XPATH/Analizador/Instrucciones/IdentificadorPredicado")
    const aritmetica= require("./Expresiones/Aritmetica");
    const logica = require ("./Expresiones/Logica");
    const relacional = require("./Expresiones/Relacional");
    const barrasnodo= require("./Instrucciones/BarrasNodo")
    const identificador= require("./Expresiones/Identificador");
    const variable= require("./Expresiones/Variable");
    const nativo= require("./Expresiones/Nativo");
    const asignacion= require("./Instrucciones/Asignacion")
    const funciones= require("./Instrucciones/Funciones")
    const declaracion= require("./Instrucciones/Declaracion")
    const llamada= require("./Instrucciones/Llamada")
    const theif = require('./Instrucciones/If')
    const thelet=require('./Instrucciones/Let')
    const Tipo= require("./Simbolos/Tipo");
    const condicionsimple= require("./Instrucciones/CondicionSimple");
    const condicion= require("./Instrucciones/Condicion");
    const lower=require("./Funciones/Lower");
    const number=require("./Funciones/Number");
    const string=require("./Funciones/String");
    const upper=require("./Funciones/Upper");
    const subs=require("./Funciones/Substring");
    const thefunctionif=require('./Instrucciones/IfFuncion');
    const theifAnidado=require('./Instrucciones/IfFuncionAnidado');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:
break;
case 6:return 29;
break;
case 7:return 30;
break;
case 8:return 49;
break;
case 9:return 63;
break;
case 10:return 51;
break;
case 11:return 53;
break;
case 12:return 54;
break;
case 13:return 59;
break;
case 14:return 'RDOC';
break;
case 15:return 75;
break;
case 16:return 77;
break;
case 17:return 76;
break;
case 18:return 107;
break;
case 19:return 108;
break;
case 20:return 111;
break;
case 21:return 109;
break;
case 22:return 112;
break;
case 23:return 110;
break;
case 24:return 62;
break;
case 25:return 71;
break;
case 26:return 7;
break;
case 27:return 8;
break;
case 28:return 99;
break;
case 29:return 69;
break;
case 30:return 68;
break;
case 31:return 100;
break;
case 32:return 'RNODO';
break;
case 33:return 'RTEXT';
break;
case 34:return 78;
break;
case 35:return 96;
break;
case 36:return 9;
break;
case 37:return 79;
break;
case 38:return 83;
break;
case 39:return 40
break;
case 40:return 43
break;
case 41:return 45
break;
case 42:return 41 
break;
case 43:return 42
break;
case 44:return 44
break;
case 45:return 81;
break;
case 46:return 82;
break;
case 47:return 80;
break;
case 48:return 92;
break;
case 49:return 12;
break;
case 50:return 14;    
break;
case 51:return 91;
break;
case 52:return 70;
break;
case 53:return 89;
break;
case 54:return 86;
break;
case 55:return 93;
break;
case 56:return 94;
break;
case 57:return 67;
break;
case 58:return 104;
break;
case 59:return 'MENORQUECIERRE';
break;
case 60:return 103;
break;
case 61:return 105;
break;
case 62:return 106;
break;
case 63:return 36;
break;
case 64:return 38;
break;
case 65:return 102;
break;
case 66:return 84;
break;
case 67:return 101;
break;
case 68:return 97;
break;
case 69:return 98;
break;
case 70:return 'MULTIPLICACION';
break;
case 71:return 'POTENCIA';
break;
case 72:return 100;
break;
case 73:return 'POTENCIA';
break;
case 74:return 90;
break;
case 75:return 26;
break;
case 76:return 64;
break;
case 77:return 10;
break;
case 78:return 17;
break;
case 79:return 39;
break;
case 80: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 95; 
break;
case 81: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 'QUOTE'; 
break;
case 82:return 11;
break;
case 83:return 65;
break;
case 84:return 5
break;
case 85:console.log("Error Lexico");
break;
}
},
rules: [/^(?:[(][:][^:]*[:]+[)])/,/^(?:[ \r\t]+)/,/^(?:\s+)/,/^(?:\n+)/,/^(?:\/\/.*)/,/^(?:[/][][^][]+([^/][^][]+)*[/])/,/^(?:as\b)/,/^(?:xs\b)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order by\b)/,/^(?:return\b)/,/^(?:in\b)/,/^(?:doc\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:then\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:at\b)/,/^(?:to\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:div\b)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:data\b)/,/^(?:last\b)/,/^(?:local\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:integer\b)/,/^(?:decimal\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:upper-case\b)/,/^(?:lower-case\b)/,/^(?:substring\b)/,/^(?:\*)/,/^(?:\()/,/^(?:\))/,/^(?:\.\.)/,/^(?:\.)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:\[)/,/^(?:\])/,/^(?:\$)/,/^(?:>=)/,/^(?:<\/)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:!=)/,/^(?:=)/,/^(?:==)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\^)/,/^(?:%)/,/^(?:\^)/,/^(?:@)/,/^(?:,)/,/^(?::=)/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:([a-zA-Z_À-ÿ\u00F1\u00D1])[a-zA-Z0-9_^ÑñÀ-ÿ\-\.\u00F1\u00D10-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GrammXQuery;
exports.Parser = GrammXQuery.Parser;
exports.parse = function () { return GrammXQuery.parse.apply(GrammXQuery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}