/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GrammXQuery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,14],$V1=[1,12],$V2=[1,21],$V3=[1,13],$V4=[1,17],$V5=[1,16],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[5,9,43,57,74,75,76,77,78],$Va=[1,24],$Vb=[5,7,9,43,57,74,75,76,77,78],$Vc=[1,27],$Vd=[5,7,9,36,43,57,74,75,76,77,78],$Ve=[26,45,47,48],$Vf=[1,46],$Vg=[1,45],$Vh=[1,44],$Vi=[1,49],$Vj=[1,47],$Vk=[1,50],$Vl=[45,47,48,62],$Vm=[1,67],$Vn=[1,64],$Vo=[2,56],$Vp=[1,76],$Vq=[1,72],$Vr=[1,74],$Vs=[1,70],$Vt=[1,75],$Vu=[1,77],$Vv=[1,80],$Vw=[1,105],$Vx=[1,106],$Vy=[1,107],$Vz=[1,96],$VA=[1,95],$VB=[1,85],$VC=[1,86],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[1,91],$VI=[1,92],$VJ=[1,93],$VK=[1,94],$VL=[1,97],$VM=[1,98],$VN=[1,99],$VO=[1,100],$VP=[1,101],$VQ=[1,102],$VR=[5,7,9,11,12,14,26,36,43,45,47,48,57,60,62,63,64,65,66,72,74,75,76,77,78,79,81,84,85,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],$VS=[2,108],$VT=[2,110],$VU=[1,110],$VV=[1,115],$VW=[1,114],$VX=[1,131],$VY=[1,130],$VZ=[1,129],$V_=[26,45,47,48,62],$V$=[5,7,9,11,12,14,26,36,43,45,47,48,57,60,62,63,64,65,66,72,74,75,76,77,78,81,84,85,86,87,90,91],$V01=[11,12,60,62,85,88,90,91],$V11=[2,67],$V21=[2,66],$V31=[5,7,9,11,12,43,57,60,62,74,75,76,77,78,85,90,91],$V41=[5,7,9,11,12,14,26,36,43,45,47,48,57,60,62,65,66,72,74,75,76,77,78,81,84,85,86,89,90,91],$V51=[1,180],$V61=[1,181],$V71=[5,7,9,14,26,36,43,47,48,57,63,64,66,72,74,75,76,77,78],$V81=[2,93],$V91=[5,7,9,36,43,57,72,74,75,76,77,78],$Va1=[1,192],$Vb1=[9,11,12,53,56,60,62,65,81,84,85,86,87,90,91],$Vc1=[5,7,9,11,12,14,26,36,43,45,47,48,57,60,62,65,66,72,74,75,76,77,78,81,84,85,86,90,91],$Vd1=[14,79,87,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],$Ve1=[5,7,9,26,36,43,45,47,48,57,62,74,75,76,77,78],$Vf1=[14,26],$Vg1=[5,7,9,11,12,14,26,36,43,45,47,48,57,60,62,63,64,65,66,72,74,75,76,77,78,81,84,85,86,89,90,91,92,93,96,97,98,99,100,101,103],$Vh1=[5,7,9,11,12,14,26,36,43,45,47,48,57,60,62,63,64,65,66,72,74,75,76,77,78,81,84,85,86,89,90,91,92,93,94,95,96,97,98,99,100,101,103],$Vi1=[5,7,9,11,12,14,26,36,43,45,47,48,57,60,62,63,64,65,66,72,74,75,76,77,78,81,84,85,86,89,90,91,96,97,103],$Vj1=[5,7,9,11,12,14,26,36,43,45,47,48,57,60,62,63,64,65,66,72,74,75,76,77,78,81,84,85,86,89,90,91,96,97,98,99,100,101,103],$Vk1=[5,7,9,11,43,57,60,62,74,75,76,77,78],$Vl1=[1,241],$Vm1=[2,32],$Vn1=[1,242],$Vo1=[1,243],$Vp1=[1,244],$Vq1=[1,245],$Vr1=[1,251],$Vs1=[14,26,34],$Vt1=[9,36,43,57];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"FUNCTION":4,"EOF":5,"METODOS":6,"RDECLARE":7,"RFUNCTION":8,"LOCAL":9,"DOSPUNTOS":10,"IDENTIFICADOR":11,"PARIZQ":12,"PARAMETROS":13,"PARDER":14,"TIPO":15,"BLOQUE":16,"PTCOMA":17,"LLAMADAFUNCION":18,"LET":19,"INSTRUCCION":20,"F_SUBS":21,"F_NUMBER":22,"F_UPPER":23,"F_LOWER":24,"F_STRING":25,"COMA":26,"DECLARACIONES":27,"VARIABLE":28,"AS":29,"XS":30,"L_PARAMETROSINTERNOS":31,"TIPOPARAMETRO":32,"L_CONSULTAS":33,"LLAVEIZQ":34,"INSTRUCCIONES":35,"LLAVEDER":36,"INT":37,"FLOAT":38,"CHAR":39,"DOUBLE":40,"FORSIMPLE":41,"FORCOMPUESTO":42,"RFOR":43,"CONDICIONCOMPUESTA":44,"RWHERE":45,"CONDICION":46,"RORDERBY":47,"RRETURN":48,"RETORNO":49,"CONDICIONSIMPLE":50,"CONJUNCION":51,"UNION":52,"RIN":53,"L_IN":54,"L_VARIABLES":55,"RAT":56,"RLET":57,"LETDOSPUNTOS":58,"EXPRESION":59,"ENTERO":60,"CONECTOR":61,"DOLAR":62,"AND":63,"OR":64,"PUNTO":65,"RTO":66,"FUNCIONES":67,"IF":68,"ASIGNACION":69,"RIF":70,"RTHEN":71,"RELSE":72,"RDATA":73,"RNUMBER":74,"RSUBS":75,"RUPPER":76,"RLOWER":77,"RSTRING":78,"IGUAL":79,"CONSULTA":80,"BARRA":81,"OPCIONESCONSULT":82,"PREDICADO":83,"DOBLEBARRA":84,"ARROBA":85,"DOBLEPUNTO":86,"ASTERISCO":87,"CORIZQ":88,"CORDER":89,"CADENA":90,"RLAST":91,"MAS":92,"MENOS":93,"RDIV":94,"MODULO":95,"IGUALACION":96,"DIFERENCIACION":97,"MENORIGUAL":98,"MAYORIGUAL":99,"MENORQUE":100,"MAYORQUE":101,"REQUALS":102,"RNOTEQUALS":103,"RMENORIGUAL":104,"RMAYORIGUAL":105,"RMENORQUE":106,"RMAYORQUE":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"RDECLARE",8:"RFUNCTION",9:"LOCAL",10:"DOSPUNTOS",11:"IDENTIFICADOR",12:"PARIZQ",14:"PARDER",17:"PTCOMA",26:"COMA",29:"AS",30:"XS",34:"LLAVEIZQ",36:"LLAVEDER",37:"INT",38:"FLOAT",39:"CHAR",40:"DOUBLE",43:"RFOR",45:"RWHERE",47:"RORDERBY",48:"RRETURN",53:"RIN",56:"RAT",57:"RLET",58:"LETDOSPUNTOS",60:"ENTERO",62:"DOLAR",63:"AND",64:"OR",65:"PUNTO",66:"RTO",70:"RIF",71:"RTHEN",72:"RELSE",73:"RDATA",74:"RNUMBER",75:"RSUBS",76:"RUPPER",77:"RLOWER",78:"RSTRING",79:"IGUAL",81:"BARRA",84:"DOBLEBARRA",85:"ARROBA",86:"DOBLEPUNTO",87:"ASTERISCO",88:"CORIZQ",89:"CORDER",90:"CADENA",91:"RLAST",92:"MAS",93:"MENOS",94:"RDIV",95:"MODULO",96:"IGUALACION",97:"DIFERENCIACION",98:"MENORIGUAL",99:"MAYORIGUAL",100:"MENORQUE",101:"MAYORQUE",102:"REQUALS",103:"RNOTEQUALS",104:"RMENORIGUAL",105:"RMAYORIGUAL",106:"RMENORQUE",107:"RMAYORQUE"},
productions_: [0,[3,2],[4,2],[4,1],[6,12],[6,11],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,0],[13,3],[13,1],[27,5],[31,3],[31,1],[32,1],[32,1],[16,3],[16,2],[15,4],[15,4],[15,4],[15,4],[15,1],[15,1],[15,1],[15,1],[15,0],[35,2],[35,1],[20,1],[20,1],[20,1],[20,1],[42,8],[42,6],[42,6],[42,4],[41,8],[41,6],[41,6],[41,4],[44,3],[44,1],[44,0],[50,2],[50,1],[52,3],[52,2],[51,2],[55,3],[55,1],[19,6],[54,1],[54,6],[54,5],[54,1],[54,1],[18,6],[18,5],[28,2],[61,1],[61,1],[61,1],[61,1],[61,1],[49,1],[49,1],[49,1],[49,1],[49,1],[68,8],[68,9],[67,4],[22,4],[22,5],[21,6],[21,7],[23,4],[23,5],[24,4],[24,5],[25,4],[25,5],[69,3],[69,5],[46,2],[46,3],[46,1],[33,2],[33,1],[80,3],[80,2],[80,2],[80,2],[80,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[83,3],[59,1],[59,3],[59,1],[59,1],[59,1],[59,2],[59,2],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 33: case 50: case 94:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 16: case 19: case 34: case 51: case 56: case 95:
this.$=[$$[$0]];
break;
case 4:
this.$=new funciones.default($$[$0-6],$$[$0-4],$$[$0-2],$$[$0-1],_$[$0-11].first_line,_$[$0-11].first_column);
break;
case 5:
this.$=new funciones.default($$[$0-5],null,$$[$0-2],$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 20: case 21: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 35: case 36: case 37: case 38: case 48: case 58: case 61: case 62: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 93: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 112:
this.$=$$[$0]
break;
case 14:
this.$=""
break;
case 15: case 18: case 55:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 17:
this.$=new declaracion.default($$[$0-4],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 22: case 53: case 107: case 109:
this.$=$$[$0-1]
break;
case 23:
this.$=null
break;
case 39:
this.$=$$[$0-7]+$$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 40: case 41: case 59:
this.$=$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 42: case 78:
this.$=$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 43:
this.$=new theforsimple.default($$[$0-6],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-4],$$[$0-2]);
break;
case 44:
this.$=new theforsimple.default($$[$0-4],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-2],null);
break;
case 45:
this.$=new theforsimple.default($$[$0-4],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column,null,$$[$0-2]);
break;
case 46:
this.$=new theforsimple.default($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column,null,null);
break;
case 47:
this.$=$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 52:
this.$=new condicionsimple.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 54: case 65: case 98: case 99:
this.$=$$[$0-1]+$$[$0]
break;
case 57:
this.$=new thelet.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 60:
this.$=$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 63:
this.$=new llamada.default($$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 64:
this.$=new llamada.default($$[$0-2],null,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 76:
this.$=new theif.default($$[$0-5],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-2],$$[$0])
break;
case 77:
this.$=new theif.default($$[$0-6],_$[$0-8].first_line,_$[$0-8].first_column,$$[$0-3],[])
break;
case 79:
this.$=new number.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 80:
this.$=new number.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 81:
this.$=new subs.default($$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 82:
this.$=new subs.default($$[$0-4],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column)
break;
case 83:
this.$=new upper.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 84:
this.$=new upper.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 85:
this.$=new lower.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 86:
this.$=new lower.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 87:
this.$=new string.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 88:
this.$=new string.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 89: case 127:
this.$=new asignacion.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 90:
this.$=new asignacion.default($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 91:
this.$=new condicionsimple.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 92:
this.$=new condicion.default($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 96:
this.$ = new barrasnodo.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column, $$[$0-1]);
break;
case 97:
this.$ = new barrasnodo.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column, null);
break;
case 108:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 110:
this.$ = new identificador.default($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 111:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.CADENA),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 113:
this.$ = new atributosexpresion.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 114:
this.$ = new identificadorpredicado.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 115:
this.$=$$[$0-2]+"()"
break;
case 116:
this.$=new aritmetica.default(aritmetica.Operadores.SUMA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 117:
this.$=new aritmetica.default(aritmetica.Operadores.RESTA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 118:
this.$=new aritmetica.default(aritmetica.Operadores.DIVISION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 119:
this.$=new aritmetica.default(aritmetica.Operadores.MODULADOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 120: case 128:
this.$=new relacional.default(relacional.Relacionales.IGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 121: case 129:
this.$=new relacional.default(relacional.Relacionales.DIFERENTE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 122: case 130:
this.$=new relacional.default(relacional.Relacionales.MENORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 123: case 131:
this.$=new relacional.default(relacional.Relacionales.MAYORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 124: case 132:
this.$=new relacional.default(relacional.Relacionales.MENORQUE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 125: case 133:
this.$=new relacional.default(relacional.Relacionales.MAYORQUE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 126:
this.$=new aritmetica.default(aritmetica.Operadores.MULTIPLICACION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 134:
this.$=new logica.default(logica.Logicas.OR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 135:
this.$=new logica.default(logica.Logicas.AND,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
}
},
table: [o([5,7],$V0,{3:1,4:2,6:3,18:4,19:5,20:6,21:7,22:8,23:9,24:10,25:11,41:14,42:15,9:$V1,43:$V2,57:$V3,74:$V4,75:$V5,76:$V6,77:$V7,78:$V8}),{1:[3]},{5:[1,22],6:23,7:$V0,9:$V1,18:4,19:5,20:6,21:7,22:8,23:9,24:10,25:11,41:14,42:15,43:$V2,57:$V3,74:$V4,75:$V5,76:$V6,77:$V7,78:$V8},o($V9,[2,3],{7:$Va}),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),o($Vb,[2,13]),{10:[1,25]},{28:26,62:$Vc},o($Vd,[2,35]),o($Vd,[2,36]),{12:[1,28]},{12:[1,29]},{12:[1,30]},{12:[1,31]},{12:[1,32]},o($Ve,[2,49],{50:33,44:34,52:35,51:36,28:37,55:38,62:$Vc}),{1:[2,1]},o($V9,[2,2],{7:$Va}),{8:[1,39]},{11:[1,40]},{58:[1,41]},{11:[1,42]},{11:$Vf,12:$Vg,28:48,59:43,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:51,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:52,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:53,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:54,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{28:59,45:[1,55],47:[1,56],48:[1,57],52:58,62:$Vc},{26:[1,63],45:[1,60],47:[1,61],48:[1,62]},o($Vl,[2,51]),o($Ve,[2,48]),{9:$V1,11:$Vf,12:$Vm,18:68,28:48,33:69,53:$Vn,54:65,56:$Vo,59:66,60:$Vh,62:$Vc,65:$Vp,80:71,81:$Vq,82:73,84:$Vr,85:$Vs,86:$Vt,87:$Vu,90:$Vj,91:$Vk},{9:$V1,11:$Vf,12:$Vm,18:68,28:48,33:69,53:$Vv,54:78,56:[1,79],59:66,60:$Vh,62:$Vc,65:$Vp,80:71,81:$Vq,82:73,84:$Vr,85:$Vs,86:$Vt,87:$Vu,90:$Vj,91:$Vk},{9:[1,81]},{12:[1,82]},{9:$V1,11:$Vf,12:$Vm,18:68,28:48,33:69,53:$Vv,54:83,59:66,60:$Vh,62:$Vc,65:$Vp,80:71,81:$Vq,82:73,84:$Vr,85:$Vs,86:$Vt,87:$Vu,90:$Vj,91:$Vk},o([5,7,9,11,12,14,26,29,36,43,45,47,48,53,56,57,58,60,62,63,64,65,66,72,74,75,76,77,78,79,81,84,85,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],[2,65]),{26:$Vw,61:84,63:[1,104],64:[1,103],65:$Vx,66:$Vy,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ},o($VR,$VS),{11:$Vf,12:$Vg,28:48,59:108,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},o($VR,$VT,{83:109,88:$VU}),o($VR,[2,111]),o($VR,[2,112]),{11:$Vf,12:$Vg,28:48,59:111,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{12:[1,112]},{14:[1,113],63:$VV,64:$VW,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ},{14:[1,116],63:$VV,64:$VW,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ},{14:[1,117],63:$VV,64:$VW,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ},{14:[1,118],63:$VV,64:$VW,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ},{28:120,46:119,62:$Vc},{28:120,46:121,62:$Vc},{11:$VX,12:$Vg,28:128,46:123,49:122,59:127,60:$Vh,62:$Vc,67:124,68:125,69:126,70:$VY,73:$VZ,85:$Vi,90:$Vj,91:$Vk},o($Vl,[2,50]),{9:$V1,11:$Vf,12:$Vm,18:68,28:48,33:69,53:$Vn,54:65,59:66,60:$Vh,62:$Vc,65:$Vp,80:71,81:$Vq,82:73,84:$Vr,85:$Vs,86:$Vt,87:$Vu,90:$Vj,91:$Vk},{28:120,46:132,62:$Vc},{28:120,46:133,62:$Vc},{11:$VX,12:$Vg,28:128,46:123,49:134,59:127,60:$Vh,62:$Vc,67:124,68:125,69:126,70:$VY,73:$VZ,85:$Vi,90:$Vj,91:$Vk},{28:136,51:135,55:38,62:$Vc},{11:$Vf,12:[1,138],28:48,33:137,59:139,60:$Vh,62:$Vc,65:$Vp,80:71,81:$Vq,82:73,84:$Vr,85:$Vs,86:$Vt,87:$Vu,90:$Vj,91:$Vk},o($Vl,[2,53]),o([11,12,26,45,47,48,60,62,65,81,84,85,86,90,91],[2,58],{63:$VV,64:$VW,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ}),{11:$Vf,12:$Vg,28:48,59:108,60:[1,140],62:$Vc,85:$Vi,90:$Vj,91:$Vk},o($V_,[2,61]),o($Ve,[2,62],{28:48,82:73,59:139,80:141,11:$Vf,12:$Vg,60:$Vh,62:$Vc,65:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,90:$Vj,91:$Vk}),{11:$Vf,12:$Vg,28:48,59:111,60:$Vh,62:$Vc,85:$Vi,88:[2,103],90:$Vj,91:$Vk},o($V$,[2,95]),{11:$Vf,12:$Vg,28:48,59:143,60:$Vh,62:$Vc,81:[1,142],85:$Vi,88:[2,101],90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:144,60:$Vh,62:$Vc,83:145,85:$Vi,88:$VU,90:$Vj,91:$Vk},o($V01,[2,102]),o($V01,[2,104]),o($V01,[2,105]),o($V01,[2,106]),o($Ve,[2,54]),{28:146,62:$Vc},{12:[1,147]},{10:[1,148]},{11:$Vf,12:$Vg,14:[1,150],28:153,31:149,32:151,33:152,59:139,60:$Vh,62:$Vc,65:$Vp,80:71,81:$Vq,82:73,84:$Vr,85:$Vs,86:$Vt,87:$Vu,90:$Vj,91:$Vk},{48:[1,154]},{11:$Vf,12:$Vg,28:48,59:155,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:156,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:157,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:158,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:159,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:160,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:161,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:162,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:163,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:164,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:165,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:166,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:167,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:168,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:169,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:170,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:171,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:172,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:173,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$V11,28:48,59:174,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$V21,28:48,59:175,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},o($V31,[2,68]),o($V31,[2,69]),o($V31,[2,70]),{14:[1,176],63:$VV,64:$VW,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ},o($VR,[2,114]),{11:$Vf,12:$Vg,28:48,59:177,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},o($V41,[2,113],{63:$VV,64:$VW,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ}),{14:[1,178]},o($Vb,[2,79],{61:179,26:$Vw,63:$V51,64:$V61,65:$Vx,66:$Vy}),{11:$Vf,12:$Vg,28:48,59:174,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},{11:$Vf,12:$Vg,28:48,59:175,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},o($Vb,[2,83],{61:182,26:$Vw,63:$V51,64:$V61,65:$Vx,66:$Vy}),o($Vb,[2,85],{61:183,26:$Vw,63:$V51,64:$V61,65:$Vx,66:$Vy}),o($Vb,[2,87],{61:184,26:$Vw,63:$V51,64:$V61,65:$Vx,66:$Vy}),{26:$Vw,47:[1,185],48:[1,186],61:187,63:$V51,64:$V61,65:$Vx,66:$Vy},o($V71,$V81,{28:48,80:71,82:73,59:139,33:188,11:$Vf,12:$Vg,60:$Vh,62:$Vc,65:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,90:$Vj,91:$Vk}),{26:$Vw,48:[1,189],61:187,63:$V51,64:$V61,65:$Vx,66:$Vy},o($Vd,[2,46]),o($V91,[2,71],{61:187,26:$Vw,63:$V51,64:$V61,65:$Vx,66:$Vy}),o($V91,[2,72]),o($V91,[2,73]),o($V91,[2,74]),o($V91,[2,75],{63:$VV,64:$VW,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ}),o([5,7,9,26,36,43,57,63,64,66,72,74,75,76,77,78,79,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],$V81,{28:48,80:71,82:73,59:139,33:188,11:$Vf,12:$Vg,60:$Vh,62:$Vc,65:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,90:$Vj,91:$Vk}),{12:[1,190]},{12:[1,191]},o([5,7,9,36,43,57,63,64,72,74,75,76,77,78,87,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],$VT,{83:109,79:$Va1,88:$VU}),{26:$Vw,47:[1,193],48:[1,194],61:187,63:$V51,64:$V61,65:$Vx,66:$Vy},{26:$Vw,48:[1,195],61:187,63:$V51,64:$V61,65:$Vx,66:$Vy},o($Vd,[2,42]),o($Ve,[2,47]),o($Vb1,$Vo),o([45,47,48],[2,52],{28:48,82:73,59:139,80:141,11:$Vf,12:$Vg,60:$Vh,62:$Vc,65:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,90:$Vj,91:$Vk}),{11:$Vf,12:$Vg,28:48,59:108,60:[1,196],62:$Vc,85:$Vi,90:$Vj,91:$Vk},o($Vc1,[2,100],{63:$VV,64:$VW,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ}),o($Vd1,$VS,{61:197,26:$Vw,63:$V51,64:$V61,65:$Vx,66:$Vy}),o($V$,[2,94]),{11:$Vf,12:$Vg,28:48,59:198,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},o($Vc1,[2,97],{63:$VV,64:$VW,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ}),o($Vc1,[2,98],{63:$VV,64:$VW,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ}),o($V$,[2,99]),o($Vb1,[2,55]),{60:[1,199]},{11:[1,200]},{14:[1,201],26:[1,202]},o($Ve1,[2,64]),o($Vf1,[2,19]),o($Vf1,[2,20],{28:48,82:73,59:139,80:141,11:$Vf,12:$Vg,60:$Vh,62:$Vc,65:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,90:$Vj,91:$Vk}),o([11,12,14,26,60,62,63,64,65,79,81,84,85,86,87,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],[2,21]),{11:$VX,12:$Vg,28:128,46:123,49:203,59:127,60:$Vh,62:$Vc,67:124,68:125,69:126,70:$VY,73:$VZ,85:$Vi,90:$Vj,91:$Vk},{14:[1,204],63:$VV,64:$VW,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ},o($Vg1,[2,116],{79:$Vz,87:$VA,94:$VD,95:$VE,102:$VL,104:$VN,105:$VO,106:$VP,107:$VQ}),o($Vg1,[2,117],{79:$Vz,87:$VA,94:$VD,95:$VE,102:$VL,104:$VN,105:$VO,106:$VP,107:$VQ}),o($Vh1,[2,118],{79:$Vz,87:$VA,102:$VL,104:$VN,105:$VO,106:$VP,107:$VQ}),o($Vh1,[2,119],{79:$Vz,87:$VA,102:$VL,104:$VN,105:$VO,106:$VP,107:$VQ}),o($Vi1,[2,120],{79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,104:$VN,105:$VO,106:$VP,107:$VQ}),o($Vi1,[2,121],{79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,104:$VN,105:$VO,106:$VP,107:$VQ}),o($Vj1,[2,122],{79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,102:$VL,104:$VN,105:$VO,106:$VP,107:$VQ}),o($Vj1,[2,123],{79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,102:$VL,104:$VN,105:$VO,106:$VP,107:$VQ}),o($Vj1,[2,124],{79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,102:$VL,104:$VN,105:$VO,106:$VP,107:$VQ}),o($Vj1,[2,125],{79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,102:$VL,104:$VN,105:$VO,106:$VP,107:$VQ}),o($V41,[2,126],{63:$VV,64:$VW,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ}),o($V41,[2,127],{63:$VV,64:$VW,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ}),o($V41,[2,128],{63:$VV,64:$VW,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ}),o($Vi1,[2,129],{79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,104:$VN,105:$VO,106:$VP,107:$VQ}),o($V41,[2,130],{63:$VV,64:$VW,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ}),o($V41,[2,131],{63:$VV,64:$VW,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ}),o($V41,[2,132],{63:$VV,64:$VW,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ}),o($V41,[2,133],{63:$VV,64:$VW,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ}),o([5,7,9,11,12,14,26,36,43,45,47,48,57,60,62,64,65,66,72,74,75,76,77,78,81,84,85,86,89,90,91],[2,134],{63:$VV,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ}),o([5,7,9,11,12,14,26,36,43,45,47,48,57,60,62,63,64,65,66,72,74,75,76,77,78,81,84,85,86,89,90,91],[2,135],{79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ}),o($VR,[2,109]),{63:$VV,64:$VW,79:$Vz,87:$VA,89:[1,205],92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ},o($VR,[2,115]),o($Vb,[2,80]),o($Vk1,$V21),o($Vk1,$V11),o($Vb,[2,84]),o($Vb,[2,86]),o($Vb,[2,88]),{28:120,46:206,62:$Vc},{11:$VX,12:$Vg,28:128,46:123,49:207,59:127,60:$Vh,62:$Vc,67:124,68:125,69:126,70:$VY,73:$VZ,85:$Vi,90:$Vj,91:$Vk},{28:120,46:208,62:$Vc},o($V71,[2,91],{28:48,82:73,59:139,80:141,11:$Vf,12:$Vg,60:$Vh,62:$Vc,65:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,90:$Vj,91:$Vk}),{11:$VX,12:$Vg,28:128,46:123,49:209,59:127,60:$Vh,62:$Vc,67:124,68:125,69:126,70:$VY,73:$VZ,85:$Vi,90:$Vj,91:$Vk},{28:120,46:210,62:$Vc},{28:120,46:211,62:$Vc},{28:212,62:$Vc},{28:120,46:213,62:$Vc},{11:$VX,12:$Vg,28:128,46:123,49:214,59:127,60:$Vh,62:$Vc,67:124,68:125,69:126,70:$VY,73:$VZ,85:$Vi,90:$Vj,91:$Vk},{11:$VX,12:$Vg,28:128,46:123,49:215,59:127,60:$Vh,62:$Vc,67:124,68:125,69:126,70:$VY,73:$VZ,85:$Vi,90:$Vj,91:$Vk},o($Vd1,$VS,{61:216,26:$Vw,63:$V51,64:$V61,65:$Vx,66:$Vy}),{60:[1,217]},o($Vc1,[2,96],{63:$VV,64:$VW,79:$Vz,87:$VA,92:$VB,93:$VC,94:$VD,95:$VE,96:$VF,97:$VG,98:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ}),{26:$Vw,61:216,63:$V51,64:$V61,65:$Vx,66:$Vy},{12:[1,218]},o($Ve1,[2,63]),{11:$Vf,12:$Vg,28:153,32:219,33:152,59:139,60:$Vh,62:$Vc,65:$Vp,80:71,81:$Vq,82:73,84:$Vr,85:$Vs,86:$Vt,87:$Vu,90:$Vj,91:$Vk},o($Vd,[2,57]),o($Vb,[2,81],{61:220,26:$Vw,63:$V51,64:$V61,65:$Vx,66:$Vy}),o($VR,[2,107]),{26:$Vw,48:[1,221],61:187,63:$V51,64:$V61,65:$Vx,66:$Vy},o($Vd,[2,44]),o([5,7,9,14,36,43,47,48,57,72,74,75,76,77,78],[2,92],{61:187,26:$Vw,63:$V51,64:$V61,65:$Vx,66:$Vy}),o($Vd,[2,45]),{14:[1,222],26:$Vw,61:187,63:$V51,64:$V61,65:$Vx,66:$Vy},{14:[1,223],26:$Vw,61:187,63:$V51,64:$V61,65:$Vx,66:$Vy},o($V91,[2,89],{61:224,26:$Vw,63:$V51,64:$V61,65:$Vx,66:$Vy}),{26:$Vw,48:[1,225],61:187,63:$V51,64:$V61,65:$Vx,66:$Vy},o($Vd,[2,40]),o($Vd,[2,41]),{60:[1,226]},{14:[1,227]},{13:228,14:[1,229],27:230,28:231,62:$Vc},o($Vf1,[2,18]),o($Vb,[2,82]),{11:$VX,12:$Vg,28:128,46:123,49:232,59:127,60:$Vh,62:$Vc,67:124,68:125,69:126,70:$VY,73:$VZ,85:$Vi,90:$Vj,91:$Vk},o($V91,[2,78]),{71:[1,233]},{11:[1,235],69:234},{11:$VX,12:$Vg,28:128,46:123,49:236,59:127,60:$Vh,62:$Vc,67:124,68:125,69:126,70:$VY,73:$VZ,85:$Vi,90:$Vj,91:$Vk},{14:[1,237]},o($V_,[2,60]),{14:[1,238],26:[1,239]},{15:240,29:$Vl1,34:$Vm1,37:$Vn1,38:$Vo1,39:$Vp1,40:$Vq1},o($Vf1,[2,16]),{29:[1,246]},o($Vd,[2,43]),{11:$VX,12:$Vg,28:128,46:123,49:247,59:127,60:$Vh,62:$Vc,67:124,68:125,69:126,70:$VY,73:$VZ,85:$Vi,90:$Vj,91:$Vk},o($V91,[2,90]),{79:$Va1},o($Vd,[2,39]),o($V_,[2,59]),{15:248,29:$Vl1,34:$Vm1,37:$Vn1,38:$Vo1,39:$Vp1,40:$Vq1},{27:249,28:231,62:$Vc},{16:250,34:$Vr1},{30:[1,252]},o($Vs1,[2,28]),o($Vs1,[2,29]),o($Vs1,[2,30]),o($Vs1,[2,31]),{30:[1,253]},{72:[1,254]},{16:255,34:$Vr1},o($Vf1,[2,15]),{17:[1,256]},{9:$V1,18:261,19:260,20:259,35:257,36:[1,258],41:14,42:15,43:$V2,57:$V3},{10:[1,262]},{10:[1,263]},{11:$VX,12:[1,265],28:128,46:123,49:264,59:127,60:$Vh,62:$Vc,67:124,68:125,69:126,70:$VY,73:$VZ,85:$Vi,90:$Vj,91:$Vk},{17:[1,266]},o($Vb,[2,5]),{9:$V1,18:261,19:260,20:268,36:[1,267],41:14,42:15,43:$V2,57:$V3},{17:[2,23]},o($Vt1,[2,34]),o($Vt1,[2,37]),o($Vt1,[2,38]),{37:[1,269],38:[1,270],39:[1,271],40:[1,272]},o($Vf1,$Vm1,{15:273,29:$Vl1,37:$Vn1,38:$Vo1,39:$Vp1,40:$Vq1}),o($V91,[2,76]),{11:$Vf,12:$Vg,14:[1,274],28:48,59:108,60:$Vh,62:$Vc,85:$Vi,90:$Vj,91:$Vk},o($Vb,[2,4]),{17:[2,22]},o($Vt1,[2,33]),o($Vs1,[2,24]),o($Vs1,[2,25]),o($Vs1,[2,26]),o($Vs1,[2,27]),o($Vf1,[2,17]),o($V91,[2,77])],
defaultActions: {22:[2,1],258:[2,23],267:[2,22]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const theforcompuesto = require('./Instrucciones/ForCompuesto');
    const theforsimple = require('./Instrucciones/ForSimple');
    const atributosexpresion = require("../../XPATH/Analizador/Instrucciones/AtributosExpresion")
    const identificadorpredicado = require("../../XPATH/Analizador/Instrucciones/IdentificadorPredicado")
    const aritmetica= require("./Expresiones/Aritmetica");
    const logica = require ("./Expresiones/Logica");
    const relacional = require("./Expresiones/Relacional");
    const barrasnodo= require("./Instrucciones/BarrasNodo")
    const identificador= require("./Expresiones/Identificador");
    const nativo= require("./Expresiones/Nativo");
    const asignacion= require("./Instrucciones/Asignacion")
    const funciones= require("./Instrucciones/Funciones")
    const declaracion= require("./Instrucciones/Declaracion")
    const llamada= require("./Instrucciones/Llamada")
    const theif = require('./Instrucciones/If')
    const thelet=require('./Instrucciones/Let')
    const Tipo= require("./Simbolos/Tipo");
    const condicionsimple= require("./Instrucciones/CondicionSimple");
    const condicion= require("./Instrucciones/Condicion");
    const lower=require("./Funciones/Lower");
    const number=require("./Funciones/Number");
    const string=require("./Funciones/String");
    const upper=require("./Funciones/Upper");
    const subs=require("./Funciones/Substring");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:
break;
case 6:return 29;
break;
case 7:return 30;
break;
case 8:return 43;
break;
case 9:return 57;
break;
case 10:return 45;
break;
case 11:return 47;
break;
case 12:return 48;
break;
case 13:return 53;
break;
case 14:return 'RDOC';
break;
case 15:return 70;
break;
case 16:return 72;
break;
case 17:return 71;
break;
case 18:return 102;
break;
case 19:return 103;
break;
case 20:return 106;
break;
case 21:return 104;
break;
case 22:return 107;
break;
case 23:return 105;
break;
case 24:return 56;
break;
case 25:return 66;
break;
case 26:return 7;
break;
case 27:return 8;
break;
case 28:return 94;
break;
case 29:return 64;
break;
case 30:return 63;
break;
case 31:return 95;
break;
case 32:return 'RNODO';
break;
case 33:return 'RTEXT';
break;
case 34:return 73;
break;
case 35:return 91;
break;
case 36:return 9;
break;
case 37:return 74;
break;
case 38:return 78;
break;
case 39:return 37
break;
case 40:return 40
break;
case 41:return 38 
break;
case 42:return 39
break;
case 43:return 76;
break;
case 44:return 77;
break;
case 45:return 75;
break;
case 46:return 87;
break;
case 47:return 12;
break;
case 48:return 14;    
break;
case 49:return 86;
break;
case 50:return 65;
break;
case 51:return 84;
break;
case 52:return 81;
break;
case 53:return 88;
break;
case 54:return 89;
break;
case 55:return 62;
break;
case 56:return 99;
break;
case 57:return 'MENORQUECIERRE';
break;
case 58:return 98;
break;
case 59:return 100;
break;
case 60:return 101;
break;
case 61:return 34;
break;
case 62:return 36;
break;
case 63:return 97;
break;
case 64:return 79;
break;
case 65:return 96;
break;
case 66:return 92;
break;
case 67:return 93;
break;
case 68:return 'MULTIPLICACION';
break;
case 69:return 'POTENCIA';
break;
case 70:return 95;
break;
case 71:return 'POTENCIA';
break;
case 72:return 85;
break;
case 73:return 26;
break;
case 74:return 58;
break;
case 75:return 10;
break;
case 76:return 17;
break;
case 77:return 'QUESTION';
break;
case 78: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 90; 
break;
case 79: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 'QUOTE'; 
break;
case 80:return 11;
break;
case 81:return 60;
break;
case 82:return 5
break;
case 83:console.log("Error Lexico");
break;
}
},
rules: [/^(?:[(][:][^:]*[:]+[)])/,/^(?:[ \r\t]+)/,/^(?:\s+)/,/^(?:\n+)/,/^(?:\/\/.*)/,/^(?:[/][][^][]+([^/][^][]+)*[/])/,/^(?:as\b)/,/^(?:xs\b)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order by\b)/,/^(?:return\b)/,/^(?:in\b)/,/^(?:doc\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:then\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:at\b)/,/^(?:to\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:div\b)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:data\b)/,/^(?:last\b)/,/^(?:local\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:integer\b)/,/^(?:decimal\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:upper-case\b)/,/^(?:lower-case\b)/,/^(?:substring\b)/,/^(?:\*)/,/^(?:\()/,/^(?:\))/,/^(?:\.\.)/,/^(?:\.)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:\[)/,/^(?:\])/,/^(?:\$)/,/^(?:>=)/,/^(?:<\/)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:!=)/,/^(?:=)/,/^(?:==)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\^)/,/^(?:%)/,/^(?:\^)/,/^(?:@)/,/^(?:,)/,/^(?::=)/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:([a-zA-Z_À-ÿ\u00F1\u00D1])[a-zA-Z0-9_^ÑñÀ-ÿ\-\.\u00F1\u00D10-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GrammXQuery;
exports.Parser = GrammXQuery.Parser;
exports.parse = function () { return GrammXQuery.parse.apply(GrammXQuery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}