/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GrammXQuery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,14],$V1=[1,17],$V2=[1,25],$V3=[1,24],$V4=[1,30],$V5=[1,18],$V6=[1,23],$V7=[1,32],$V8=[1,31],$V9=[1,13],$Va=[1,12],$Vb=[1,14],$Vc=[1,15],$Vd=[1,16],$Ve=[1,28],$Vf=[1,26],$Vg=[1,29],$Vh=[5,9,11,12,48,62,64,66,74,78,79,80,81,82,89,94,95],$Vi=[1,35],$Vj=[5,7,9,11,12,48,62,64,66,74,78,79,80,81,82,89,94,95],$Vk=[5,7,9,11,12,37,48,62,64,66,74,76,78,79,80,81,82,89,94,95],$Vl=[1,62],$Vm=[1,61],$Vn=[1,54],$Vo=[1,53],$Vp=[1,43],$Vq=[1,44],$Vr=[1,45],$Vs=[1,46],$Vt=[1,47],$Vu=[1,48],$Vv=[1,49],$Vw=[1,50],$Vx=[1,51],$Vy=[1,52],$Vz=[1,55],$VA=[1,56],$VB=[1,57],$VC=[1,58],$VD=[1,59],$VE=[1,60],$VF=[5,7,9,11,12,14,26,37,48,50,52,53,62,64,66,67,68,69,70,74,76,78,79,80,81,82,83,85,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111],$VG=[2,117],$VH=[2,119],$VI=[1,65],$VJ=[2,121],$VK=[26,50,52,53],$VL=[5,7,9,11,12,14,26,37,48,50,52,53,62,64,66,69,70,74,76,78,79,80,81,82,85,88,89,90,93,94,95],$VM=[50,52,53,66],$VN=[1,119],$VO=[1,116],$VP=[2,62],$VQ=[1,128],$VR=[1,124],$VS=[1,126],$VT=[1,122],$VU=[1,127],$VV=[1,129],$VW=[1,132],$VX=[1,138],$VY=[1,139],$VZ=[1,140],$V_=[5,7,9,11,12,14,26,37,48,50,52,53,62,64,66,67,68,69,70,74,76,78,79,80,81,82,85,88,89,90,93,94,95,96,97,100,101,102,103,104,105,106,107,108,109,110],$V$=[5,7,9,11,12,14,26,37,48,50,52,53,62,64,66,67,68,69,70,74,76,78,79,80,81,82,85,88,89,90,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],$V01=[5,7,9,11,12,14,26,37,48,50,52,53,62,64,66,67,68,69,70,74,76,78,79,80,81,82,85,88,89,90,93,94,95,100,101,106,107],$V11=[5,7,9,11,12,14,26,37,48,50,52,53,62,64,66,67,68,69,70,74,76,78,79,80,81,82,85,88,89,90,93,94,95,100,101,102,103,104,105,106,107,108,109,110],$V21=[1,157],$V31=[1,160],$V41=[1,159],$V51=[5,7,9,11,12,26,37,48,50,52,53,62,64,66,74,76,78,79,80,81,82,89,94,95],$V61=[5,7,9,11,12,14,26,37,48,50,52,53,62,64,66,67,68,69,70,74,76,78,79,80,81,82,85,88,89,90,91,94,95],$V71=[11,12,64,66,89,92,94,95],$V81=[2,74],$V91=[2,73],$Va1=[1,181],$Vb1=[1,182],$Vc1=[5,7,9,14,26,37,48,52,53,62,67,68,70,74,76,78,79,80,81,82],$Vd1=[1,197],$Ve1=[9,11,12,58,61,64,66,69,85,88,89,90,91,94,95],$Vf1=[5,7,9,11,12,14,26,37,48,50,52,53,62,64,66,69,70,74,76,78,79,80,81,82,85,88,89,90,94,95],$Vg1=[14,83,91,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111],$Vh1=[14,26],$Vi1=[1,250],$Vj1=[1,254],$Vk1=[2,36],$Vl1=[1,255],$Vm1=[1,256],$Vn1=[1,257],$Vo1=[1,258],$Vp1=[1,259],$Vq1=[1,266],$Vr1=[14,26,35,38],$Vs1=[9,11,12,37,48,62,64,66,74,89,94,95],$Vt1=[14,26,35],$Vu1=[2,25],$Vv1=[1,293];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"FUNCTION":4,"EOF":5,"METODOS":6,"RDECLARE":7,"RFUNCTION":8,"LOCAL":9,"DOSPUNTOS":10,"IDENTIFICADOR":11,"PARIZQ":12,"PARAMETROS":13,"PARDER":14,"TIPO":15,"BLOQUE":16,"PTCOMA":17,"F_SUBS":18,"F_NUMBER":19,"F_UPPER":20,"F_LOWER":21,"F_STRING":22,"LLAMADAFUNCION":23,"LET":24,"INSTRUCCION":25,"COMA":26,"DECLARACIONES":27,"VARIABLE":28,"AS":29,"XS":30,"OPTIONALQUESTION":31,"L_PARAMETROSINTERNOS":32,"TIPOPARAMETRO":33,"L_CONSULTAS":34,"LLAVEIZQ":35,"INSTRUCCIONES":36,"LLAVEDER":37,"QUESTION":38,"INT":39,"FLOAT":40,"CHAR":41,"DOUBLE":42,"BOOLEAN":43,"EXPRESION":44,"FORSIMPLE":45,"FORCOMPUESTO":46,"L_IF":47,"RFOR":48,"CONDICIONCOMPUESTA":49,"RWHERE":50,"CONDICION":51,"RORDERBY":52,"RRETURN":53,"RETORNO":54,"CONDICIONSIMPLE":55,"CONJUNCION":56,"UNION":57,"RIN":58,"L_IN":59,"L_VARIABLES":60,"RAT":61,"RLET":62,"LETDOSPUNTOS":63,"ENTERO":64,"CONECTOR":65,"DOLAR":66,"AND":67,"OR":68,"PUNTO":69,"RTO":70,"FUNCIONES":71,"IF":72,"ASIGNACION":73,"RIF":74,"RTHEN":75,"RELSE":76,"RDATA":77,"RNUMBER":78,"RSUBS":79,"RUPPER":80,"RLOWER":81,"RSTRING":82,"IGUAL":83,"CONSULTA":84,"BARRA":85,"OPCIONESCONSULT":86,"PREDICADO":87,"DOBLEBARRA":88,"ARROBA":89,"DOBLEPUNTO":90,"ASTERISCO":91,"CORIZQ":92,"CORDER":93,"CADENA":94,"RLAST":95,"MAS":96,"MENOS":97,"RDIV":98,"MODULO":99,"IGUALACION":100,"DIFERENCIACION":101,"MENORIGUAL":102,"MAYORIGUAL":103,"MENORQUE":104,"MAYORQUE":105,"REQUALS":106,"RNOTEQUALS":107,"RMENORIGUAL":108,"RMAYORIGUAL":109,"RMENORQUE":110,"RMAYORQUE":111,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"RDECLARE",8:"RFUNCTION",9:"LOCAL",10:"DOSPUNTOS",11:"IDENTIFICADOR",12:"PARIZQ",14:"PARDER",17:"PTCOMA",26:"COMA",29:"AS",30:"XS",35:"LLAVEIZQ",37:"LLAVEDER",38:"QUESTION",39:"INT",40:"FLOAT",41:"CHAR",42:"DOUBLE",43:"BOOLEAN",48:"RFOR",50:"RWHERE",52:"RORDERBY",53:"RRETURN",58:"RIN",61:"RAT",62:"RLET",63:"LETDOSPUNTOS",64:"ENTERO",66:"DOLAR",67:"AND",68:"OR",69:"PUNTO",70:"RTO",74:"RIF",75:"RTHEN",76:"RELSE",77:"RDATA",78:"RNUMBER",79:"RSUBS",80:"RUPPER",81:"RLOWER",82:"RSTRING",83:"IGUAL",85:"BARRA",88:"DOBLEBARRA",89:"ARROBA",90:"DOBLEPUNTO",91:"ASTERISCO",92:"CORIZQ",93:"CORDER",94:"CADENA",95:"RLAST",96:"MAS",97:"MENOS",98:"RDIV",99:"MODULO",100:"IGUALACION",101:"DIFERENCIACION",102:"MENORIGUAL",103:"MAYORIGUAL",104:"MENORQUE",105:"MAYORQUE",106:"REQUALS",107:"RNOTEQUALS",108:"RMENORIGUAL",109:"RMAYORIGUAL",110:"RMENORQUE",111:"RMAYORQUE"},
productions_: [0,[3,2],[4,2],[4,1],[6,12],[6,11],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,0],[13,3],[13,1],[27,6],[32,3],[32,1],[33,1],[33,1],[16,3],[16,2],[31,1],[31,0],[15,5],[15,5],[15,5],[15,5],[15,5],[15,1],[15,1],[15,1],[15,1],[15,1],[15,0],[36,2],[36,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[46,8],[46,6],[46,6],[46,4],[45,8],[45,6],[45,6],[45,4],[49,3],[49,1],[49,0],[55,2],[55,1],[57,3],[57,2],[56,2],[60,3],[60,1],[24,6],[24,4],[59,1],[59,6],[59,5],[59,1],[59,1],[23,6],[23,5],[28,2],[65,1],[65,1],[65,1],[65,1],[65,1],[54,1],[54,1],[54,1],[54,1],[54,1],[47,8],[47,15],[72,8],[72,9],[71,4],[19,4],[19,5],[18,6],[18,7],[20,4],[20,5],[21,4],[21,5],[22,4],[22,5],[73,3],[73,5],[51,2],[51,3],[51,1],[34,2],[34,1],[84,3],[84,2],[84,2],[84,2],[84,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[87,3],[44,1],[44,3],[44,1],[44,1],[44,1],[44,2],[44,2],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 37: case 56: case 103:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 16: case 19: case 38: case 57: case 62: case 104:
this.$=[$$[$0]];
break;
case 4:
this.$=new funciones.default($$[$0-6],$$[$0-4],$$[$0-2],$$[$0-1],_$[$0-11].first_line,_$[$0-11].first_column);
break;
case 5:
this.$=new funciones.default($$[$0-5],null,$$[$0-2],$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 20: case 21: case 31: case 32: case 33: case 34: case 35: case 39: case 40: case 41: case 42: case 43: case 44: case 54: case 65: case 68: case 69: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 102: case 109: case 110: case 111: case 112: case 113: case 114: case 115:
this.$=$$[$0]
break;
case 14:
this.$=""
break;
case 15: case 18: case 61:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 17:
this.$=new declaracion.default($$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 22: case 26: case 27: case 28: case 29: case 30: case 59: case 116: case 118:
this.$=$$[$0-1]
break;
case 23:
this.$=null
break;
case 24:
$$[$0]
break;
case 45:
this.$=$$[$0-7]+$$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 46: case 47: case 66:
this.$=$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 48: case 87:
this.$=$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 49:
this.$=new theforsimple.default($$[$0-6],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-4],$$[$0-2]);
break;
case 50:
this.$=new theforsimple.default($$[$0-4],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-2],null);
break;
case 51:
this.$=new theforsimple.default($$[$0-4],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column,null,$$[$0-2]);
break;
case 52:
this.$=new theforsimple.default($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column,null,null);
break;
case 53:
this.$=$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 58:
this.$=new condicionsimple.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 60: case 72: case 107: case 108:
this.$=$$[$0-1]+$$[$0]
break;
case 63:
this.$=new thelet.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 64:
this.$=new thelet.default($$[$0-2],$$[$0],null,_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 67:
this.$=$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 70:
this.$=new llamada.default($$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 71:
this.$=new llamada.default($$[$0-2],null,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 83:
this.$=new thefunctionif.default($$[$0-5],$$[$0-2],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0],null)
break;
case 84:
this.$=new theifAnidado.default($$[$0-12],$$[$0-9],$$[$0-5],$$[$0-2],$$[$0],_$[$0-14].first_line,_$[$0-14].first_column)
break;
case 85:
this.$=new theif.default($$[$0-5],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-2],$$[$0])
break;
case 86:
this.$=new theif.default($$[$0-6],_$[$0-8].first_line,_$[$0-8].first_column,$$[$0-3],null)
break;
case 88:
this.$=new number.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 89:
this.$=new number.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 90:
this.$=new subs.default($$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 91:
this.$=new subs.default($$[$0-4],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column)
break;
case 92:
this.$=new upper.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 93:
this.$=new upper.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 94:
this.$=new lower.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 95:
this.$=new lower.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 96:
this.$=new string.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 97:
this.$=new string.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 98: case 136:
this.$=new asignacion.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 99:
this.$=new asignacion.default($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 100:
this.$=new condicionsimple.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 101:
this.$=new condicion.default($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 105:
this.$ = new barrasnodo.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column, $$[$0-1]);
break;
case 106:
this.$ = new barrasnodo.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column, null);
break;
case 117:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 119:
this.$ = new identificador.default($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 120:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.CADENA),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 121:
this.$ = new variable.default($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 122:
this.$ = new atributosexpresion.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 123:
this.$ = new identificadorpredicado.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 124:
this.$=$$[$0-2]+"()"
break;
case 125:
this.$=new aritmetica.default(aritmetica.Operadores.SUMA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 126:
this.$=new aritmetica.default(aritmetica.Operadores.RESTA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 127:
this.$=new aritmetica.default(aritmetica.Operadores.DIVISION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 128:
this.$=new aritmetica.default(aritmetica.Operadores.MODULADOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 129: case 137:
this.$=new relacional.default(relacional.Relacionales.IGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 130: case 138:
this.$=new relacional.default(relacional.Relacionales.DIFERENTE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 131: case 139:
this.$=new relacional.default(relacional.Relacionales.MENORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 132: case 140:
this.$=new relacional.default(relacional.Relacionales.MAYORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 133: case 141:
this.$=new relacional.default(relacional.Relacionales.MENORQUE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 134: case 142:
this.$=new relacional.default(relacional.Relacionales.MAYORQUE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 135:
this.$=new aritmetica.default(aritmetica.Operadores.MULTIPLICACION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 143:
this.$=new logica.default(logica.Logicas.OR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 144:
this.$=new logica.default(logica.Logicas.AND,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
}
},
table: [o([5,7],$V0,{3:1,4:2,6:3,18:4,19:5,20:6,21:7,22:8,23:9,24:10,25:11,44:19,45:20,46:21,47:22,28:27,9:$V1,11:$V2,12:$V3,48:$V4,62:$V5,64:$V6,66:$V7,74:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc,82:$Vd,89:$Ve,94:$Vf,95:$Vg}),{1:[3]},{5:[1,33],6:34,7:$V0,9:$V1,11:$V2,12:$V3,18:4,19:5,20:6,21:7,22:8,23:9,24:10,25:11,28:27,44:19,45:20,46:21,47:22,48:$V4,62:$V5,64:$V6,66:$V7,74:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc,82:$Vd,89:$Ve,94:$Vf,95:$Vg},o($Vh,[2,3],{7:$Vi}),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),{12:[1,36]},{12:[1,37]},{12:[1,38]},{12:[1,39]},{12:[1,40]},{10:[1,41]},{28:42,66:$V7},o($Vk,[2,39],{67:$Vl,68:$Vm,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE}),o($Vk,[2,40]),o($Vk,[2,41]),o($Vk,[2,44]),o($VF,$VG),{11:$V2,12:$V3,28:27,44:63,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},o($VF,$VH,{87:64,92:$VI}),o($VF,[2,120]),o($VF,$VJ),{11:$V2,12:$V3,28:27,44:66,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{12:[1,67]},o($VK,[2,55],{55:68,49:69,57:70,56:71,28:72,60:73,66:$V7}),{12:[1,74]},{11:[1,75]},{1:[2,1]},o($Vh,[2,2],{7:$Vi}),{8:[1,76]},{11:$V2,12:$V3,28:27,44:77,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:78,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:79,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:80,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:81,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:[1,82]},{63:[1,83]},{11:$V2,12:$V3,28:27,44:84,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:85,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:86,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:87,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:88,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:89,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:90,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:91,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:92,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:93,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:94,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:95,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:96,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:97,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:98,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:99,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:100,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:101,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:102,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:103,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{14:[1,104],67:$Vl,68:$Vm,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},o($VF,[2,123]),{11:$V2,12:$V3,28:27,44:105,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},o($VL,[2,122],{67:$Vl,68:$Vm,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE}),{14:[1,106]},{28:111,50:[1,107],52:[1,108],53:[1,109],57:110,66:$V7},{26:[1,115],50:[1,112],52:[1,113],53:[1,114]},o($VM,[2,57]),o($VK,[2,54]),{9:$V1,11:$V2,12:$VN,23:120,28:27,34:121,44:118,58:$VO,59:117,61:$VP,64:$V6,66:$V7,69:$VQ,84:123,85:$VR,86:125,88:$VS,89:$VT,90:$VU,91:$VV,94:$Vf,95:$Vg},{9:$V1,11:$V2,12:$VN,23:120,28:27,34:121,44:118,58:$VW,59:130,61:[1,131],64:$V6,66:$V7,69:$VQ,84:123,85:$VR,86:125,88:$VS,89:$VT,90:$VU,91:$VV,94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:133,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},o([5,7,9,11,12,14,26,29,37,48,50,52,53,58,61,62,63,64,66,67,68,69,70,74,76,78,79,80,81,82,83,85,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111],[2,72]),{9:[1,134]},{26:$VX,65:135,67:[1,137],68:[1,136],69:$VY,70:$VZ,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{14:[1,141],67:$Vl,68:$Vm,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{14:[1,142],67:$Vl,68:$Vm,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{14:[1,143],67:$Vl,68:$Vm,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{14:[1,144],67:$Vl,68:$Vm,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{12:[1,145]},{9:$V1,11:$V2,12:$VN,23:120,28:27,34:121,44:118,58:$VW,59:146,64:$V6,66:$V7,69:$VQ,84:123,85:$VR,86:125,88:$VS,89:$VT,90:$VU,91:$VV,94:$Vf,95:$Vg},o($V_,[2,125],{83:$Vn,91:$Vo,98:$Vr,99:$Vs,111:$VE}),o($V_,[2,126],{83:$Vn,91:$Vo,98:$Vr,99:$Vs,111:$VE}),o($V$,[2,127],{83:$Vn,91:$Vo,111:$VE}),o($V$,[2,128],{83:$Vn,91:$Vo,111:$VE}),o($V01,[2,129],{83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,102:$Vv,103:$Vw,104:$Vx,105:$Vy,108:$VB,109:$VC,110:$VD,111:$VE}),o($V01,[2,130],{83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,102:$Vv,103:$Vw,104:$Vx,105:$Vy,108:$VB,109:$VC,110:$VD,111:$VE}),o($V11,[2,131],{83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,111:$VE}),o($V11,[2,132],{83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,111:$VE}),o($V11,[2,133],{83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,111:$VE}),o($V11,[2,134],{83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,111:$VE}),o($VL,[2,135],{67:$Vl,68:$Vm,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE}),o($VL,[2,136],{67:$Vl,68:$Vm,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE}),o($V01,[2,137],{83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,102:$Vv,103:$Vw,104:$Vx,105:$Vy,108:$VB,109:$VC,110:$VD,111:$VE}),o($V01,[2,138],{83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,102:$Vv,103:$Vw,104:$Vx,105:$Vy,108:$VB,109:$VC,110:$VD,111:$VE}),o($V11,[2,139],{83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,111:$VE}),o($V11,[2,140],{83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,111:$VE}),o($V11,[2,141],{83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,111:$VE}),o($VL,[2,142],{67:$Vl,68:$Vm,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE}),o([5,7,9,11,12,14,26,37,48,50,52,53,62,64,66,68,69,70,74,76,78,79,80,81,82,85,88,89,90,93,94,95],[2,143],{67:$Vl,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE}),o([5,7,9,11,12,14,26,37,48,50,52,53,62,64,66,67,68,69,70,74,76,78,79,80,81,82,85,88,89,90,93,94,95],[2,144],{83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE}),o($VF,[2,118]),{67:$Vl,68:$Vm,83:$Vn,91:$Vo,93:[1,147],96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},o($VF,[2,124]),{28:149,51:148,66:$V7},{28:149,51:150,66:$V7},{11:$V21,12:$V3,28:158,44:152,51:156,54:151,64:$V6,66:$V7,71:153,72:154,73:155,74:$V31,77:$V41,89:$Ve,94:$Vf,95:$Vg},o($VM,[2,56]),{9:$V1,11:$V2,12:$VN,23:120,28:27,34:121,44:118,58:$VO,59:117,64:$V6,66:$V7,69:$VQ,84:123,85:$VR,86:125,88:$VS,89:$VT,90:$VU,91:$VV,94:$Vf,95:$Vg},{28:149,51:161,66:$V7},{28:149,51:162,66:$V7},{11:$V21,12:$V3,28:158,44:152,51:156,54:163,64:$V6,66:$V7,71:153,72:154,73:155,74:$V31,77:$V41,89:$Ve,94:$Vf,95:$Vg},{28:165,56:164,60:73,66:$V7},{11:$V2,12:[1,167],28:27,34:166,44:168,64:$V6,66:$V7,69:$VQ,84:123,85:$VR,86:125,88:$VS,89:$VT,90:$VU,91:$VV,94:$Vf,95:$Vg},o($VM,[2,59]),o([5,7,9,11,12,26,37,48,50,52,53,62,64,66,69,74,76,78,79,80,81,82,85,88,89,90,94,95],[2,65],{67:$Vl,68:$Vm,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE}),{11:$V2,12:$V3,28:27,44:63,64:[1,169],66:$V7,89:$Ve,94:$Vf,95:$Vg},o($V51,[2,68]),o([5,7,9,26,37,48,50,52,53,62,74,76,78,79,80,81,82],[2,69],{28:27,86:125,44:168,84:170,11:$V2,12:$V3,64:$V6,66:$V7,69:$VQ,85:$VR,88:$VS,89:$VT,90:$VU,91:$VV,94:$Vf,95:$Vg}),{11:$V2,12:$V3,28:27,44:66,64:$V6,66:$V7,89:$Ve,92:[2,112],94:$Vf,95:$Vg},o($V61,[2,104]),{11:$V2,12:$V3,28:27,44:172,64:$V6,66:$V7,85:[1,171],89:$Ve,92:[2,110],94:$Vf,95:$Vg},{11:$V2,12:$V3,28:27,44:173,64:$V6,66:$V7,87:174,89:$Ve,92:$VI,94:$Vf,95:$Vg},o($V71,[2,111]),o($V71,[2,113]),o($V71,[2,114]),o($V71,[2,115]),o($VK,[2,60]),{28:175,66:$V7},{12:[1,176]},{14:[1,177],67:$Vl,68:$Vm,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{10:[1,178]},{11:$V2,12:$V3,28:27,44:179,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V81,28:27,44:102,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{11:$V2,12:$V91,28:27,44:103,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},o($Vj,[2,75]),o($Vj,[2,76]),o($Vj,[2,77]),o($Vj,[2,88],{65:180,26:$VX,67:$Va1,68:$Vb1,69:$VY,70:$VZ}),o($Vj,[2,92],{65:183,26:$VX,67:$Va1,68:$Vb1,69:$VY,70:$VZ}),o($Vj,[2,94],{65:184,26:$VX,67:$Va1,68:$Vb1,69:$VY,70:$VZ}),o($Vj,[2,96],{65:185,26:$VX,67:$Va1,68:$Vb1,69:$VY,70:$VZ}),{11:$V2,12:$V3,14:[1,187],28:190,32:186,33:188,34:189,44:168,64:$V6,66:$V7,69:$VQ,84:123,85:$VR,86:125,88:$VS,89:$VT,90:$VU,91:$VV,94:$Vf,95:$Vg},o($Vk,[2,64],{53:[1,191]}),o($VF,[2,116]),{26:$VX,52:[1,192],53:[1,193],65:194,67:$Va1,68:$Vb1,69:$VY,70:$VZ},o($Vc1,[2,102],{28:27,84:123,86:125,44:168,34:195,11:$V2,12:$V3,64:$V6,66:$V7,69:$VQ,85:$VR,88:$VS,89:$VT,90:$VU,91:$VV,94:$Vf,95:$Vg}),{26:$VX,53:[1,196],65:194,67:$Va1,68:$Vb1,69:$VY,70:$VZ},o($Vk,[2,52]),o($Vk,[2,78],{67:$Vl,68:$Vm,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE}),o($Vk,[2,79]),o($Vk,[2,80]),o($Vk,[2,81]),o($Vk,[2,82],{65:194,26:$VX,67:$Va1,68:$Vb1,69:$VY,70:$VZ}),o([5,7,9,11,12,37,48,62,64,66,67,68,74,76,78,79,80,81,82,89,91,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111],$VH,{87:64,83:$Vd1,92:$VI}),o([5,7,9,26,37,48,62,67,68,70,74,76,78,79,80,81,82,83,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111],$VJ,{28:27,84:123,86:125,44:168,34:195,11:$V2,12:$V3,64:$V6,66:$V7,69:$VQ,85:$VR,88:$VS,89:$VT,90:$VU,91:$VV,94:$Vf,95:$Vg}),{12:[1,198]},{12:[1,199]},{26:$VX,52:[1,200],53:[1,201],65:194,67:$Va1,68:$Vb1,69:$VY,70:$VZ},{26:$VX,53:[1,202],65:194,67:$Va1,68:$Vb1,69:$VY,70:$VZ},o($Vk,[2,48]),o($VK,[2,53]),o($Ve1,$VP),o([50,52,53],[2,58],{28:27,86:125,44:168,84:170,11:$V2,12:$V3,64:$V6,66:$V7,69:$VQ,85:$VR,88:$VS,89:$VT,90:$VU,91:$VV,94:$Vf,95:$Vg}),{11:$V2,12:$V3,28:27,44:63,64:[1,203],66:$V7,89:$Ve,94:$Vf,95:$Vg},o($Vf1,[2,109],{67:$Vl,68:$Vm,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE}),o($Vg1,$VG,{65:204,26:$VX,67:$Va1,68:$Vb1,69:$VY,70:$VZ}),o($V61,[2,103]),{11:$V2,12:$V3,28:27,44:205,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},o($Vf1,[2,106],{67:$Vl,68:$Vm,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE}),o($Vf1,[2,107],{67:$Vl,68:$Vm,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE}),o($V61,[2,108]),o($Ve1,[2,61]),{64:[1,206]},{75:[1,207]},{11:[1,208]},{14:[1,209],67:$Vl,68:$Vm,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},o($Vj,[2,89]),o($Vj,$V91),o($Vj,$V81),o($Vj,[2,93]),o($Vj,[2,95]),o($Vj,[2,97]),{14:[1,210],26:[1,211]},o($V51,[2,71]),o($Vh1,[2,19]),o($Vh1,[2,20],{28:27,86:125,44:168,84:170,11:$V2,12:$V3,64:$V6,66:$V7,69:$VQ,85:$VR,88:$VS,89:$VT,90:$VU,91:$VV,94:$Vf,95:$Vg}),o([11,12,14,26,64,66,67,68,69,83,85,88,89,90,91,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111],[2,21]),{11:$V21,12:$V3,28:158,44:152,51:156,54:212,64:$V6,66:$V7,71:153,72:154,73:155,74:$V31,77:$V41,89:$Ve,94:$Vf,95:$Vg},{28:149,51:213,66:$V7},{11:$V21,12:$V3,28:158,44:152,51:156,54:214,64:$V6,66:$V7,71:153,72:154,73:155,74:$V31,77:$V41,89:$Ve,94:$Vf,95:$Vg},{28:149,51:215,66:$V7},o($Vc1,[2,100],{28:27,86:125,44:168,84:170,11:$V2,12:$V3,64:$V6,66:$V7,69:$VQ,85:$VR,88:$VS,89:$VT,90:$VU,91:$VV,94:$Vf,95:$Vg}),{11:$V21,12:$V3,28:158,44:152,51:156,54:216,64:$V6,66:$V7,71:153,72:154,73:155,74:$V31,77:$V41,89:$Ve,94:$Vf,95:$Vg},{28:217,66:$V7},{28:149,51:218,66:$V7},{28:149,51:219,66:$V7},{28:149,51:220,66:$V7},{11:$V21,12:$V3,28:158,44:152,51:156,54:221,64:$V6,66:$V7,71:153,72:154,73:155,74:$V31,77:$V41,89:$Ve,94:$Vf,95:$Vg},{11:$V21,12:$V3,28:158,44:152,51:156,54:222,64:$V6,66:$V7,71:153,72:154,73:155,74:$V31,77:$V41,89:$Ve,94:$Vf,95:$Vg},o($Vg1,$VG,{65:223,26:$VX,67:$Va1,68:$Vb1,69:$VY,70:$VZ}),{64:[1,224]},o($Vf1,[2,105],{67:$Vl,68:$Vm,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE}),{26:$VX,65:223,67:$Va1,68:$Vb1,69:$VY,70:$VZ},{9:$V1,11:$V2,12:$V3,23:227,24:226,25:225,28:27,44:19,45:20,46:21,47:22,48:$V4,62:$V5,64:$V6,66:$V7,74:$V8,89:$Ve,94:$Vf,95:$Vg},{12:[1,228]},o($Vj,[2,90],{65:229,26:$VX,67:$Va1,68:$Vb1,69:$VY,70:$VZ}),o($V51,[2,70]),{11:$V2,12:$V3,28:190,33:230,34:189,44:168,64:$V6,66:$V7,69:$VQ,84:123,85:$VR,86:125,88:$VS,89:$VT,90:$VU,91:$VV,94:$Vf,95:$Vg},o($Vk,[2,63]),{26:$VX,53:[1,231],65:194,67:$Va1,68:$Vb1,69:$VY,70:$VZ},o($Vk,[2,50]),o([5,7,9,11,12,14,37,48,52,53,62,64,66,74,76,78,79,80,81,82,89,94,95],[2,101],{65:194,26:$VX,67:$Va1,68:$Vb1,69:$VY,70:$VZ}),o($Vk,[2,51]),o($Vk,[2,98],{65:232,26:$VX,67:$Va1,68:$Vb1,69:$VY,70:$VZ}),{14:[1,233],26:$VX,65:194,67:$Va1,68:$Vb1,69:$VY,70:$VZ},{14:[1,234],26:$VX,65:194,67:$Va1,68:$Vb1,69:$VY,70:$VZ},{26:$VX,53:[1,235],65:194,67:$Va1,68:$Vb1,69:$VY,70:$VZ},o($Vk,[2,46]),o($Vk,[2,47]),{64:[1,236]},{14:[1,237]},{76:[1,238]},o($Vk,[2,42]),o($Vk,[2,43]),{13:239,14:[1,240],27:241,28:242,66:$V7},o($Vj,[2,91]),o($Vh1,[2,18]),{11:$V21,12:$V3,28:158,44:152,51:156,54:243,64:$V6,66:$V7,71:153,72:154,73:155,74:$V31,77:$V41,89:$Ve,94:$Vf,95:$Vg},{11:[1,245],73:244},o($Vk,[2,87]),{75:[1,246]},{11:$V21,12:$V3,28:158,44:152,51:156,54:247,64:$V6,66:$V7,71:153,72:154,73:155,74:$V31,77:$V41,89:$Ve,94:$Vf,95:$Vg},{14:[1,248]},o($V51,[2,67]),{9:$V1,11:$V2,12:$V3,23:227,24:226,25:249,28:27,44:19,45:20,46:21,47:22,48:$V4,62:$V5,64:$V6,66:$V7,74:$Vi1,89:$Ve,94:$Vf,95:$Vg},{14:[1,251],26:[1,252]},{15:253,29:$Vj1,35:$Vk1,39:$Vl1,40:$Vm1,41:$Vn1,42:$Vo1,43:$Vp1},o($Vh1,[2,16]),{29:[1,260]},o($Vk,[2,49]),o($Vk,[2,99]),{83:$Vd1},{11:$V21,12:$V3,28:158,44:152,51:156,54:261,64:$V6,66:$V7,71:153,72:154,73:155,74:$V31,77:$V41,89:$Ve,94:$Vf,95:$Vg},o($Vk,[2,45]),o($V51,[2,66]),o($Vk,[2,83]),{12:[1,262]},{15:263,29:$Vj1,35:$Vk1,39:$Vl1,40:$Vm1,41:$Vn1,42:$Vo1,43:$Vp1},{27:264,28:242,66:$V7},{16:265,35:$Vq1},{30:[1,267]},o($Vr1,[2,31]),o($Vr1,[2,32]),o($Vr1,[2,33]),o($Vr1,[2,34]),o($Vr1,[2,35]),{30:[1,268]},{76:[1,269]},{11:$V2,12:$V3,28:27,44:270,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{16:271,35:$Vq1},o($Vh1,[2,15]),{17:[1,272]},{9:$V1,11:$V2,12:$V3,23:227,24:226,25:275,28:27,36:273,37:[1,274],44:19,45:20,46:21,47:22,48:$V4,62:$V5,64:$V6,66:$V7,74:$V8,89:$Ve,94:$Vf,95:$Vg},{10:[1,276]},{10:[1,277]},{11:$V21,12:[1,279],28:158,44:152,51:156,54:278,64:$V6,66:$V7,71:153,72:154,73:155,74:$V31,77:$V41,89:$Ve,94:$Vf,95:$Vg},{14:[1,280],67:$Vl,68:$Vm,83:$Vn,91:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC,110:$VD,111:$VE},{17:[1,281]},o($Vj,[2,5]),{9:$V1,11:$V2,12:$V3,23:227,24:226,25:283,28:27,37:[1,282],44:19,45:20,46:21,47:22,48:$V4,62:$V5,64:$V6,66:$V7,74:$V8,89:$Ve,94:$Vf,95:$Vg},{17:[2,23]},o($Vs1,[2,38]),{39:[1,284],40:[1,285],41:[1,286],42:[1,287],43:[1,288]},o([14,26,38],$Vk1,{15:289,29:$Vj1,39:$Vl1,40:$Vm1,41:$Vn1,42:$Vo1,43:$Vp1}),o($Vk,[2,85]),{11:$V2,12:$V3,14:[1,290],28:27,44:63,64:$V6,66:$V7,89:$Ve,94:$Vf,95:$Vg},{75:[1,291]},o($Vj,[2,4]),{17:[2,22]},o($Vs1,[2,37]),o($Vt1,$Vu1,{31:292,38:$Vv1}),o($Vt1,$Vu1,{31:294,38:$Vv1}),o($Vt1,$Vu1,{31:295,38:$Vv1}),o($Vt1,$Vu1,{31:296,38:$Vv1}),o($Vt1,$Vu1,{31:297,38:$Vv1}),o($Vh1,$Vu1,{31:298,38:$Vv1}),o($Vk,[2,86]),{9:$V1,11:$V2,12:$V3,23:227,24:226,25:299,28:27,44:19,45:20,46:21,47:22,48:$V4,62:$V5,64:$V6,66:$V7,74:$V8,89:$Ve,94:$Vf,95:$Vg},o($Vr1,[2,26]),o($Vr1,[2,24]),o($Vr1,[2,27]),o($Vr1,[2,28]),o($Vr1,[2,29]),o($Vr1,[2,30]),o($Vh1,[2,17]),{76:[1,300]},{9:$V1,11:$V2,12:$V3,23:227,24:226,25:301,28:27,44:19,45:20,46:21,47:22,48:$V4,62:$V5,64:$V6,66:$V7,74:$Vi1,89:$Ve,94:$Vf,95:$Vg},o($Vk,[2,84])],
defaultActions: {33:[2,1],274:[2,23],282:[2,22]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const theforcompuesto = require('./Instrucciones/ForCompuesto');
    const theforsimple = require('./Instrucciones/ForSimple');
    const atributosexpresion = require("../../XPATH/Analizador/Instrucciones/AtributosSimples")
    const identificadorpredicado = require("../../XPATH/Analizador/Instrucciones/IdentificadorPredicado")
    const aritmetica= require("./Expresiones/Aritmetica");
    const logica = require ("./Expresiones/Logica");
    const relacional = require("./Expresiones/Relacional");
    const barrasnodo= require("./Instrucciones/BarrasNodo")
    const identificador= require("./Expresiones/Identificador");
    const variable= require("./Expresiones/Variable");
    const nativo= require("./Expresiones/Nativo");
    const asignacion= require("./Instrucciones/Asignacion")
    const funciones= require("./Instrucciones/Funciones")
    const declaracion= require("./Instrucciones/Declaracion")
    const llamada= require("./Instrucciones/Llamada")
    const theif = require('./Instrucciones/If')
    const thelet=require('./Instrucciones/Let')
    const Tipo= require("./Simbolos/Tipo");
    const condicionsimple= require("./Instrucciones/CondicionSimple");
    const condicion= require("./Instrucciones/Condicion");
    const lower=require("./Funciones/Lower");
    const number=require("./Funciones/Number");
    const string=require("./Funciones/String");
    const upper=require("./Funciones/Upper");
    const subs=require("./Funciones/Substring");
    const thefunctionif=require('./Instrucciones/IfFuncion');
    const theifAnidado=require('./Instrucciones/IfFuncionAnidado');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:
break;
case 6:return 29;
break;
case 7:return 30;
break;
case 8:return 48;
break;
case 9:return 62;
break;
case 10:return 50;
break;
case 11:return 52;
break;
case 12:return 53;
break;
case 13:return 58;
break;
case 14:return 'RDOC';
break;
case 15:return 74;
break;
case 16:return 76;
break;
case 17:return 75;
break;
case 18:return 106;
break;
case 19:return 107;
break;
case 20:return 110;
break;
case 21:return 108;
break;
case 22:return 111;
break;
case 23:return 109;
break;
case 24:return 61;
break;
case 25:return 70;
break;
case 26:return 7;
break;
case 27:return 8;
break;
case 28:return 98;
break;
case 29:return 68;
break;
case 30:return 67;
break;
case 31:return 99;
break;
case 32:return 'RNODO';
break;
case 33:return 'RTEXT';
break;
case 34:return 77;
break;
case 35:return 95;
break;
case 36:return 9;
break;
case 37:return 78;
break;
case 38:return 82;
break;
case 39:return 39
break;
case 40:return 42
break;
case 41:return 40 
break;
case 42:return 41
break;
case 43:return 43
break;
case 44:return 80;
break;
case 45:return 81;
break;
case 46:return 79;
break;
case 47:return 91;
break;
case 48:return 12;
break;
case 49:return 14;    
break;
case 50:return 90;
break;
case 51:return 69;
break;
case 52:return 88;
break;
case 53:return 85;
break;
case 54:return 92;
break;
case 55:return 93;
break;
case 56:return 66;
break;
case 57:return 103;
break;
case 58:return 'MENORQUECIERRE';
break;
case 59:return 102;
break;
case 60:return 104;
break;
case 61:return 105;
break;
case 62:return 35;
break;
case 63:return 37;
break;
case 64:return 101;
break;
case 65:return 83;
break;
case 66:return 100;
break;
case 67:return 96;
break;
case 68:return 97;
break;
case 69:return 'MULTIPLICACION';
break;
case 70:return 'POTENCIA';
break;
case 71:return 99;
break;
case 72:return 'POTENCIA';
break;
case 73:return 89;
break;
case 74:return 26;
break;
case 75:return 63;
break;
case 76:return 10;
break;
case 77:return 17;
break;
case 78:return 38;
break;
case 79: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 94; 
break;
case 80: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 'QUOTE'; 
break;
case 81:return 11;
break;
case 82:return 64;
break;
case 83:return 5
break;
case 84:console.log("Error Lexico");
break;
}
},
rules: [/^(?:[(][:][^:]*[:]+[)])/,/^(?:[ \r\t]+)/,/^(?:\s+)/,/^(?:\n+)/,/^(?:\/\/.*)/,/^(?:[/][][^][]+([^/][^][]+)*[/])/,/^(?:as\b)/,/^(?:xs\b)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order by\b)/,/^(?:return\b)/,/^(?:in\b)/,/^(?:doc\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:then\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:at\b)/,/^(?:to\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:div\b)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:data\b)/,/^(?:last\b)/,/^(?:local\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:integer\b)/,/^(?:decimal\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:upper-case\b)/,/^(?:lower-case\b)/,/^(?:substring\b)/,/^(?:\*)/,/^(?:\()/,/^(?:\))/,/^(?:\.\.)/,/^(?:\.)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:\[)/,/^(?:\])/,/^(?:\$)/,/^(?:>=)/,/^(?:<\/)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:!=)/,/^(?:=)/,/^(?:==)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\^)/,/^(?:%)/,/^(?:\^)/,/^(?:@)/,/^(?:,)/,/^(?::=)/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:([a-zA-Z_À-ÿ\u00F1\u00D1])[a-zA-Z0-9_^ÑñÀ-ÿ\-\.\u00F1\u00D10-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GrammXQuery;
exports.Parser = GrammXQuery.Parser;
exports.parse = function () { return GrammXQuery.parse.apply(GrammXQuery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}